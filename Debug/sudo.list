
sudo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08008c88  08008c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009038  08009038  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009038  08009038  00019038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009040  08009040  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009048  08009048  00019048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800904c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002498  20000090  080090d8  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002528  080090d8  00022528  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001160c  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002785  00000000  00000000  00031705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  00033e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000086d  00000000  00000000  00034990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000057c9  00000000  00000000  000351fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f4a1  00000000  00000000  0003a9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008dd02  00000000  00000000  00049e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003194  00000000  00000000  000d7b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000dad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008c70 	.word	0x08008c70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08008c70 	.word	0x08008c70

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b970 	b.w	8000cbc <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9e08      	ldr	r6, [sp, #32]
 80009fa:	460d      	mov	r5, r1
 80009fc:	4604      	mov	r4, r0
 80009fe:	460f      	mov	r7, r1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d14a      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4694      	mov	ip, r2
 8000a08:	d965      	bls.n	8000ad6 <__udivmoddi4+0xe2>
 8000a0a:	fab2 f382 	clz	r3, r2
 8000a0e:	b143      	cbz	r3, 8000a22 <__udivmoddi4+0x2e>
 8000a10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a14:	f1c3 0220 	rsb	r2, r3, #32
 8000a18:	409f      	lsls	r7, r3
 8000a1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1e:	4317      	orrs	r7, r2
 8000a20:	409c      	lsls	r4, r3
 8000a22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a26:	fa1f f58c 	uxth.w	r5, ip
 8000a2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a2e:	0c22      	lsrs	r2, r4, #16
 8000a30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a38:	fb01 f005 	mul.w	r0, r1, r5
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	d90a      	bls.n	8000a56 <__udivmoddi4+0x62>
 8000a40:	eb1c 0202 	adds.w	r2, ip, r2
 8000a44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a48:	f080 811b 	bcs.w	8000c82 <__udivmoddi4+0x28e>
 8000a4c:	4290      	cmp	r0, r2
 8000a4e:	f240 8118 	bls.w	8000c82 <__udivmoddi4+0x28e>
 8000a52:	3902      	subs	r1, #2
 8000a54:	4462      	add	r2, ip
 8000a56:	1a12      	subs	r2, r2, r0
 8000a58:	b2a4      	uxth	r4, r4
 8000a5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a66:	fb00 f505 	mul.w	r5, r0, r5
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	d90a      	bls.n	8000a84 <__udivmoddi4+0x90>
 8000a6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a76:	f080 8106 	bcs.w	8000c86 <__udivmoddi4+0x292>
 8000a7a:	42a5      	cmp	r5, r4
 8000a7c:	f240 8103 	bls.w	8000c86 <__udivmoddi4+0x292>
 8000a80:	4464      	add	r4, ip
 8000a82:	3802      	subs	r0, #2
 8000a84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a88:	1b64      	subs	r4, r4, r5
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	b11e      	cbz	r6, 8000a96 <__udivmoddi4+0xa2>
 8000a8e:	40dc      	lsrs	r4, r3
 8000a90:	2300      	movs	r3, #0
 8000a92:	e9c6 4300 	strd	r4, r3, [r6]
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0xbc>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	f000 80ec 	beq.w	8000c7c <__udivmoddi4+0x288>
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab0:	fab3 f183 	clz	r1, r3
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	d149      	bne.n	8000b4c <__udivmoddi4+0x158>
 8000ab8:	42ab      	cmp	r3, r5
 8000aba:	d302      	bcc.n	8000ac2 <__udivmoddi4+0xce>
 8000abc:	4282      	cmp	r2, r0
 8000abe:	f200 80f7 	bhi.w	8000cb0 <__udivmoddi4+0x2bc>
 8000ac2:	1a84      	subs	r4, r0, r2
 8000ac4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac8:	2001      	movs	r0, #1
 8000aca:	4617      	mov	r7, r2
 8000acc:	2e00      	cmp	r6, #0
 8000ace:	d0e2      	beq.n	8000a96 <__udivmoddi4+0xa2>
 8000ad0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ad4:	e7df      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000ad6:	b902      	cbnz	r2, 8000ada <__udivmoddi4+0xe6>
 8000ad8:	deff      	udf	#255	; 0xff
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 808f 	bne.w	8000c02 <__udivmoddi4+0x20e>
 8000ae4:	1a8a      	subs	r2, r1, r2
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2101      	movs	r1, #1
 8000af0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000af4:	fb07 2015 	mls	r0, r7, r5, r2
 8000af8:	0c22      	lsrs	r2, r4, #16
 8000afa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000afe:	fb0e f005 	mul.w	r0, lr, r5
 8000b02:	4290      	cmp	r0, r2
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x124>
 8000b06:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x122>
 8000b10:	4290      	cmp	r0, r2
 8000b12:	f200 80ca 	bhi.w	8000caa <__udivmoddi4+0x2b6>
 8000b16:	4645      	mov	r5, r8
 8000b18:	1a12      	subs	r2, r2, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b20:	fb07 2210 	mls	r2, r7, r0, r2
 8000b24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x14e>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x14c>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80ba 	bhi.w	8000cb4 <__udivmoddi4+0x2c0>
 8000b40:	4610      	mov	r0, r2
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b4a:	e79f      	b.n	8000a8c <__udivmoddi4+0x98>
 8000b4c:	f1c1 0720 	rsb	r7, r1, #32
 8000b50:	408b      	lsls	r3, r1
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b62:	40fd      	lsrs	r5, r7
 8000b64:	4323      	orrs	r3, r4
 8000b66:	fa00 f901 	lsl.w	r9, r0, r1
 8000b6a:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000b6e:	fa1f fe8c 	uxth.w	lr, ip
 8000b72:	fbb5 f8f0 	udiv	r8, r5, r0
 8000b76:	0c1c      	lsrs	r4, r3, #16
 8000b78:	fb00 5518 	mls	r5, r0, r8, r5
 8000b7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b80:	fb08 f50e 	mul.w	r5, r8, lr
 8000b84:	42a5      	cmp	r5, r4
 8000b86:	fa02 f201 	lsl.w	r2, r2, r1
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b0>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8087 	bcs.w	8000ca6 <__udivmoddi4+0x2b2>
 8000b98:	42a5      	cmp	r5, r4
 8000b9a:	f240 8084 	bls.w	8000ca6 <__udivmoddi4+0x2b2>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4464      	add	r4, ip
 8000ba4:	1b64      	subs	r4, r4, r5
 8000ba6:	b29d      	uxth	r5, r3
 8000ba8:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bac:	fb00 4413 	mls	r4, r0, r3, r4
 8000bb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1da>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bc4:	d26b      	bcs.n	8000c9e <__udivmoddi4+0x2aa>
 8000bc6:	45a6      	cmp	lr, r4
 8000bc8:	d969      	bls.n	8000c9e <__udivmoddi4+0x2aa>
 8000bca:	3b02      	subs	r3, #2
 8000bcc:	4464      	add	r4, ip
 8000bce:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000bd2:	fba0 8302 	umull	r8, r3, r0, r2
 8000bd6:	eba4 040e 	sub.w	r4, r4, lr
 8000bda:	429c      	cmp	r4, r3
 8000bdc:	46c6      	mov	lr, r8
 8000bde:	461d      	mov	r5, r3
 8000be0:	d355      	bcc.n	8000c8e <__udivmoddi4+0x29a>
 8000be2:	d052      	beq.n	8000c8a <__udivmoddi4+0x296>
 8000be4:	b156      	cbz	r6, 8000bfc <__udivmoddi4+0x208>
 8000be6:	ebb9 030e 	subs.w	r3, r9, lr
 8000bea:	eb64 0405 	sbc.w	r4, r4, r5
 8000bee:	fa04 f707 	lsl.w	r7, r4, r7
 8000bf2:	40cb      	lsrs	r3, r1
 8000bf4:	40cc      	lsrs	r4, r1
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	f1c3 0120 	rsb	r1, r3, #32
 8000c06:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0a:	fa20 f201 	lsr.w	r2, r0, r1
 8000c0e:	fa25 f101 	lsr.w	r1, r5, r1
 8000c12:	409d      	lsls	r5, r3
 8000c14:	432a      	orrs	r2, r5
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c22:	fb07 1510 	mls	r5, r7, r0, r1
 8000c26:	0c11      	lsrs	r1, r2, #16
 8000c28:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c2c:	fb00 f50e 	mul.w	r5, r0, lr
 8000c30:	428d      	cmp	r5, r1
 8000c32:	fa04 f403 	lsl.w	r4, r4, r3
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x256>
 8000c38:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c40:	d22f      	bcs.n	8000ca2 <__udivmoddi4+0x2ae>
 8000c42:	428d      	cmp	r5, r1
 8000c44:	d92d      	bls.n	8000ca2 <__udivmoddi4+0x2ae>
 8000c46:	3802      	subs	r0, #2
 8000c48:	4461      	add	r1, ip
 8000c4a:	1b49      	subs	r1, r1, r5
 8000c4c:	b292      	uxth	r2, r2
 8000c4e:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c52:	fb07 1115 	mls	r1, r7, r5, r1
 8000c56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c5a:	fb05 f10e 	mul.w	r1, r5, lr
 8000c5e:	4291      	cmp	r1, r2
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x280>
 8000c62:	eb1c 0202 	adds.w	r2, ip, r2
 8000c66:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c6a:	d216      	bcs.n	8000c9a <__udivmoddi4+0x2a6>
 8000c6c:	4291      	cmp	r1, r2
 8000c6e:	d914      	bls.n	8000c9a <__udivmoddi4+0x2a6>
 8000c70:	3d02      	subs	r5, #2
 8000c72:	4462      	add	r2, ip
 8000c74:	1a52      	subs	r2, r2, r1
 8000c76:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c7a:	e739      	b.n	8000af0 <__udivmoddi4+0xfc>
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	4630      	mov	r0, r6
 8000c80:	e709      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000c82:	4639      	mov	r1, r7
 8000c84:	e6e7      	b.n	8000a56 <__udivmoddi4+0x62>
 8000c86:	4610      	mov	r0, r2
 8000c88:	e6fc      	b.n	8000a84 <__udivmoddi4+0x90>
 8000c8a:	45c1      	cmp	r9, r8
 8000c8c:	d2aa      	bcs.n	8000be4 <__udivmoddi4+0x1f0>
 8000c8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c92:	eb63 050c 	sbc.w	r5, r3, ip
 8000c96:	3801      	subs	r0, #1
 8000c98:	e7a4      	b.n	8000be4 <__udivmoddi4+0x1f0>
 8000c9a:	4645      	mov	r5, r8
 8000c9c:	e7ea      	b.n	8000c74 <__udivmoddi4+0x280>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	e795      	b.n	8000bce <__udivmoddi4+0x1da>
 8000ca2:	4640      	mov	r0, r8
 8000ca4:	e7d1      	b.n	8000c4a <__udivmoddi4+0x256>
 8000ca6:	46d0      	mov	r8, sl
 8000ca8:	e77c      	b.n	8000ba4 <__udivmoddi4+0x1b0>
 8000caa:	3d02      	subs	r5, #2
 8000cac:	4462      	add	r2, ip
 8000cae:	e733      	b.n	8000b18 <__udivmoddi4+0x124>
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	e70b      	b.n	8000acc <__udivmoddi4+0xd8>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	e743      	b.n	8000b42 <__udivmoddi4+0x14e>
 8000cba:	bf00      	nop

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <PWM_GEN>:
 * 		  behavior.
 * 		  E_OK -> everything is OK.
 * 		  E_NOK-> something wrong happened.
 */
Std_ReturnStatus PWM_GEN(TIM_TypeDef *TIMER,PWM_config* PWM_cfg ,uint32_t timer_clk)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0f6      	sub	sp, #472	; 0x1d8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000cca:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000cce:	6018      	str	r0, [r3, #0]
 8000cd0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000cd4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8000cd8:	6019      	str	r1, [r3, #0]
 8000cda:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000cde:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000ce2:	601a      	str	r2, [r3, #0]
	if((NULL == TIMER) || (NULL == PWM_cfg))
 8000ce4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000ce8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d006      	beq.n	8000d00 <PWM_GEN+0x40>
 8000cf2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000cf6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <PWM_GEN+0x46>
	{
		return E_NOK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f001 ba94 	b.w	800222e <PWM_GEN+0x156e>
	}
	else
	{
		//Disable TIMER (CEN = 0)
		TIMER->CR1 &= ~(1 << 0);
 8000d06:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000d0a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f023 0201 	bic.w	r2, r3, #1
 8000d16:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000d1a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	601a      	str	r2, [r3, #0]
		 *					    Fpwm = (Fclk)/((ARR+1)*(PSC+1))  				   *
		 *                   so (ARR+1) = (Fclk)/((Fpwm)*(PSC+1))				   *
		 *   we will iterate over this equation to get the values of ARR and PSC   *
		 ***************************************************************************
		 */
		uint32_t temp_ARR = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		uint32_t temp_PSC = 1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		while(1)
		{
			temp_ARR = timer_clk/(PWM_cfg->freq * temp_PSC);
 8000d2e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000d32:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d3e:	fb02 f303 	mul.w	r3, r2, r3
 8000d42:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8000d46:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 8000d4a:	6812      	ldr	r2, [r2, #0]
 8000d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d50:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
			if(temp_ARR >= 35000)
 8000d54:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d58:	f648 02b7 	movw	r2, #34999	; 0x88b7
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d905      	bls.n	8000d6c <PWM_GEN+0xac>
			{
				temp_PSC += 2;
 8000d60:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000d64:	3302      	adds	r3, #2
 8000d66:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
			temp_ARR = timer_clk/(PWM_cfg->freq * temp_PSC);
 8000d6a:	e7e0      	b.n	8000d2e <PWM_GEN+0x6e>
			}
			else
			{
				break;
 8000d6c:	bf00      	nop
			}
		}
		//Configurations of timer depending on which one is chosen.
		if(TIMER == TIM1)
 8000d6e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000d72:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4aa3      	ldr	r2, [pc, #652]	; (8001008 <PWM_GEN+0x348>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	f040 828c 	bne.w	8001298 <PWM_GEN+0x5d8>
		{
			//Enable Timer1 RCC clock and GPIOA clock
			TIM1_ENABLE();
 8000d80:	4ba2      	ldr	r3, [pc, #648]	; (800100c <PWM_GEN+0x34c>)
 8000d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d84:	4aa1      	ldr	r2, [pc, #644]	; (800100c <PWM_GEN+0x34c>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6453      	str	r3, [r2, #68]	; 0x44
			GPIOA_ENABLE();
 8000d8c:	4b9f      	ldr	r3, [pc, #636]	; (800100c <PWM_GEN+0x34c>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	4a9e      	ldr	r2, [pc, #632]	; (800100c <PWM_GEN+0x34c>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6313      	str	r3, [r2, #48]	; 0x30
			//configure the timer according to the chosen channel.
			if(PWM_cfg->ch == CH1)
 8000d98:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000d9c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f040 8093 	bne.w	8000ed0 <PWM_GEN+0x210>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM1_CH1 ={.Gpio = GPIOA, .mode = AltFunction, .altFunc = AF1,
 8000daa:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	619a      	str	r2, [r3, #24]
 8000dbe:	4b94      	ldr	r3, [pc, #592]	; (8001010 <PWM_GEN+0x350>)
 8000dc0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
								   .pin_no = 8, .outSpeed = HighSpeed};
				GPIO_Init(&TIM1_CH1);
 8000ddc:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fa2d 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR1 |= (0b110 << 4);
 8000de6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000dea:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000df6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000dfa:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	619a      	str	r2, [r3, #24]
				//Output compare preload enable.
				TIMER->CCMR1 |= (1 << 3);
 8000e02:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000e06:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	f043 0208 	orr.w	r2, r3, #8
 8000e12:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000e16:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	619a      	str	r2, [r3, #24]
				//Capture/Compare 1 output enable.
				TIMER->CCER  |= (1 << 0);
 8000e1e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000e22:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	f043 0201 	orr.w	r2, r3, #1
 8000e2e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000e32:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit CC1P: Capture/Compare 1 output polarity).
				//Main output enable
				TIMER->BDTR  |= (1 << 15);
 8000e3a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000e3e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000e4a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000e4e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	645a      	str	r2, [r3, #68]	; 0x44
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 8000e56:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000e5a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	f043 0201 	orr.w	r2, r3, #1
 8000e66:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000e6a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60da      	str	r2, [r3, #12]
				//Capture/Compare 1 interrupt enable [CC1E]
				TIMER->DIER  |= (1 << 1);
 8000e72:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000e76:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	f043 0202 	orr.w	r2, r3, #2
 8000e82:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000e86:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR1].
				TIMER->CCR1   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 8000e8e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000e92:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fae2 	bl	800046c <__aeabi_ui2d>
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	4b59      	ldr	r3, [pc, #356]	; (8001014 <PWM_GEN+0x354>)
 8000eae:	f7ff fc81 	bl	80007b4 <__aeabi_ddiv>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f7ff fd63 	bl	8000984 <__aeabi_d2uiz>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000ec4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	635a      	str	r2, [r3, #52]	; 0x34
 8000ecc:	f001 b972 	b.w	80021b4 <PWM_GEN+0x14f4>
			}
			else if(PWM_cfg->ch == CH2)
 8000ed0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000ed4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	f040 809b 	bne.w	8001018 <PWM_GEN+0x358>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM1_CH2 ={.Gpio = GPIOA, .mode = AltFunction, .altFunc = AF1,
 8000ee2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	619a      	str	r2, [r3, #24]
 8000ef6:	4b46      	ldr	r3, [pc, #280]	; (8001010 <PWM_GEN+0x350>)
 8000ef8:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8000efc:	2309      	movs	r3, #9
 8000efe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000f0e:	2301      	movs	r3, #1
 8000f10:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
								   .pin_no = 9, .outSpeed = HighSpeed};
				GPIO_Init(&TIM1_CH2);
 8000f14:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 f991 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR1 |= (0b110 << 12);
 8000f1e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000f22:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000f2e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000f32:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	619a      	str	r2, [r3, #24]
				//Output compare preload enable.
				TIMER->CCMR1 |= (1 << 11);
 8000f3a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000f3e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000f4a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000f4e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	619a      	str	r2, [r3, #24]
				//Capture/Compare 2 output enable.
				TIMER->CCER  |= (1 << 4);
 8000f56:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000f5a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	f043 0210 	orr.w	r2, r3, #16
 8000f66:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000f6a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit CC2P: Capture/Compare 1 output polarity).
				//Main output enable
				TIMER->BDTR  |= (1 << 15);
 8000f72:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000f76:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f82:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000f86:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	645a      	str	r2, [r3, #68]	; 0x44
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 8000f8e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000f92:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000fa2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60da      	str	r2, [r3, #12]
				//Capture/Compare 2 interrupt enable [CC2E]
				TIMER->DIER  |= (1 << 2);
 8000faa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000fae:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	f043 0204 	orr.w	r2, r3, #4
 8000fba:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000fbe:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR2].
				TIMER->CCR2   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 8000fc6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000fca:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fa46 	bl	800046c <__aeabi_ui2d>
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <PWM_GEN+0x354>)
 8000fe6:	f7ff fbe5 	bl	80007b4 <__aeabi_ddiv>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f7ff fcc7 	bl	8000984 <__aeabi_d2uiz>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000ffc:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	639a      	str	r2, [r3, #56]	; 0x38
 8001004:	f001 b8d6 	b.w	80021b4 <PWM_GEN+0x14f4>
 8001008:	40010000 	.word	0x40010000
 800100c:	40023800 	.word	0x40023800
 8001010:	40020000 	.word	0x40020000
 8001014:	408f4000 	.word	0x408f4000
			}
			else if(PWM_cfg->ch == CH3)
 8001018:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800101c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b02      	cmp	r3, #2
 8001026:	f040 8093 	bne.w	8001150 <PWM_GEN+0x490>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM1_CH3 ={.Gpio = GPIOA, .mode = AltFunction, .altFunc = AF1,
 800102a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
 800103a:	615a      	str	r2, [r3, #20]
 800103c:	619a      	str	r2, [r3, #24]
 800103e:	4b94      	ldr	r3, [pc, #592]	; (8001290 <PWM_GEN+0x5d0>)
 8001040:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001044:	230a      	movs	r3, #10
 8001046:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800104a:	2302      	movs	r3, #2
 800104c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001050:	2302      	movs	r3, #2
 8001052:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001056:	2301      	movs	r3, #1
 8001058:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
								   .pin_no = 10, .outSpeed = HighSpeed};
				GPIO_Init(&TIM1_CH3);
 800105c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001060:	4618      	mov	r0, r3
 8001062:	f001 f8ed 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR2 |= (0b110 << 4);
 8001066:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800106a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001076:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800107a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61da      	str	r2, [r3, #28]
				//Output compare preload enable.
				TIMER->CCMR2 |= (1 << 3);
 8001082:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001086:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f043 0208 	orr.w	r2, r3, #8
 8001092:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001096:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61da      	str	r2, [r3, #28]
				//Capture/Compare 3 output enable.
				TIMER->CCER  |= (1 << 8);
 800109e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80010a2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010ae:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80010b2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit CC3P: Capture/Compare 1 output polarity).
				//Main output enable
				TIMER->BDTR  |= (1 << 15);
 80010ba:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80010be:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80010ca:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80010ce:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 80010d6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80010da:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	f043 0201 	orr.w	r2, r3, #1
 80010e6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80010ea:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60da      	str	r2, [r3, #12]
				//Capture/Compare 1 interrupt enable [CC3E]
				TIMER->DIER  |= (1 << 3);
 80010f2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80010f6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f043 0208 	orr.w	r2, r3, #8
 8001102:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001106:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR3].
				TIMER->CCR3   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 800110e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001112:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800111e:	fb02 f303 	mul.w	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f9a2 	bl	800046c <__aeabi_ui2d>
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	4b59      	ldr	r3, [pc, #356]	; (8001294 <PWM_GEN+0x5d4>)
 800112e:	f7ff fb41 	bl	80007b4 <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fc23 	bl	8000984 <__aeabi_d2uiz>
 800113e:	4602      	mov	r2, r0
 8001140:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001144:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	63da      	str	r2, [r3, #60]	; 0x3c
 800114c:	f001 b832 	b.w	80021b4 <PWM_GEN+0x14f4>
			}
			else if(PWM_cfg->ch == CH4)
 8001150:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001154:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b03      	cmp	r3, #3
 800115e:	f040 8093 	bne.w	8001288 <PWM_GEN+0x5c8>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM1_CH4 ={.Gpio = GPIOA, .mode = AltFunction, .altFunc = AF1,
 8001162:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	4b46      	ldr	r3, [pc, #280]	; (8001290 <PWM_GEN+0x5d0>)
 8001178:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800117c:	230b      	movs	r3, #11
 800117e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800118e:	2301      	movs	r3, #1
 8001190:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
								   .pin_no = 11, .outSpeed = HighSpeed};
				GPIO_Init(&TIM1_CH4);
 8001194:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001198:	4618      	mov	r0, r3
 800119a:	f001 f851 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR2 |= (0b110 << 12);
 800119e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80011a2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80011ae:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80011b2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	61da      	str	r2, [r3, #28]
				//Output compare preload enable.
				TIMER->CCMR2 |= (1 << 11);
 80011ba:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80011be:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80011ca:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80011ce:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61da      	str	r2, [r3, #28]
				//Capture/Compare 4 output enable.
				TIMER->CCER  |= (1 << 12);
 80011d6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80011da:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011e6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80011ea:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit 1 CC4P: Capture/Compare 1 output polarity).
				//Main output enable
				TIMER->BDTR  |= (1 << 15);
 80011f2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80011f6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001202:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001206:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	645a      	str	r2, [r3, #68]	; 0x44
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 800120e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001212:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	f043 0201 	orr.w	r2, r3, #1
 800121e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001222:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	60da      	str	r2, [r3, #12]
				//Capture/Compare 2 interrupt enable [CC4E]
				TIMER->DIER  |= (1 << 4);
 800122a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800122e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	f043 0210 	orr.w	r2, r3, #16
 800123a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800123e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR4].
				TIMER->CCR4   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 8001246:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800124a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001256:	fb02 f303 	mul.w	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f906 	bl	800046c <__aeabi_ui2d>
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <PWM_GEN+0x5d4>)
 8001266:	f7ff faa5 	bl	80007b4 <__aeabi_ddiv>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fb87 	bl	8000984 <__aeabi_d2uiz>
 8001276:	4602      	mov	r2, r0
 8001278:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800127c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	641a      	str	r2, [r3, #64]	; 0x40
 8001284:	f000 bf96 	b.w	80021b4 <PWM_GEN+0x14f4>
			}
			else{return E_NOK;}
 8001288:	2300      	movs	r3, #0
 800128a:	f000 bfd0 	b.w	800222e <PWM_GEN+0x156e>
 800128e:	bf00      	nop
 8001290:	40020000 	.word	0x40020000
 8001294:	408f4000 	.word	0x408f4000
		}
		else if(TIMER == TIM2)
 8001298:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800129c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a6:	f040 824f 	bne.w	8001748 <PWM_GEN+0xa88>
		{
			//Enable Timer1 RCC clock and GPIOA clock
			TIM2_ENABLE();
 80012aa:	4b92      	ldr	r3, [pc, #584]	; (80014f4 <PWM_GEN+0x834>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a91      	ldr	r2, [pc, #580]	; (80014f4 <PWM_GEN+0x834>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
			GPIOA_ENABLE();
 80012b6:	4b8f      	ldr	r3, [pc, #572]	; (80014f4 <PWM_GEN+0x834>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a8e      	ldr	r2, [pc, #568]	; (80014f4 <PWM_GEN+0x834>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
			//configure the timer according to the chosen channel.
			if(PWM_cfg->ch == CH1)
 80012c2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80012c6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f040 8082 	bne.w	80013d8 <PWM_GEN+0x718>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM2_CH1 ={.Gpio = GPIOA, .mode = AltFunction, .altFunc = AF1,
 80012d4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
 80012e4:	615a      	str	r2, [r3, #20]
 80012e6:	619a      	str	r2, [r3, #24]
 80012e8:	4b83      	ldr	r3, [pc, #524]	; (80014f8 <PWM_GEN+0x838>)
 80012ea:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80012ee:	2302      	movs	r3, #2
 80012f0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012f4:	2302      	movs	r3, #2
 80012f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012fa:	2301      	movs	r3, #1
 80012fc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
								   .pin_no = 0, .outSpeed = HighSpeed};
				GPIO_Init(&TIM2_CH1);
 8001300:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8001304:	4618      	mov	r0, r3
 8001306:	f000 ff9b 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR1 |= (0b110 << 4);
 800130a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800130e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800131a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800131e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	619a      	str	r2, [r3, #24]
				//Output compare preload enable.
				TIMER->CCMR1 |= (1 << 3);
 8001326:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800132a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f043 0208 	orr.w	r2, r3, #8
 8001336:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800133a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	619a      	str	r2, [r3, #24]
				//Capture/Compare 1 output enable.
				TIMER->CCER  |= (1 << 0);
 8001342:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001346:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	f043 0201 	orr.w	r2, r3, #1
 8001352:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001356:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit CC1P: Capture/Compare 1 output polarity).
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 800135e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001362:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001372:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60da      	str	r2, [r3, #12]
				//Capture/Compare 1 interrupt enable [CC1E]
				TIMER->DIER  |= (1 << 1);
 800137a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800137e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f043 0202 	orr.w	r2, r3, #2
 800138a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800138e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR1].
				TIMER->CCR1   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 8001396:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800139a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f85e 	bl	800046c <__aeabi_ui2d>
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b51      	ldr	r3, [pc, #324]	; (80014fc <PWM_GEN+0x83c>)
 80013b6:	f7ff f9fd 	bl	80007b4 <__aeabi_ddiv>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fadf 	bl	8000984 <__aeabi_d2uiz>
 80013c6:	4602      	mov	r2, r0
 80013c8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80013cc:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	635a      	str	r2, [r3, #52]	; 0x34
 80013d4:	f000 beee 	b.w	80021b4 <PWM_GEN+0x14f4>
			}
			else if(PWM_cfg->ch == CH2)
 80013d8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80013dc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	f040 808b 	bne.w	8001500 <PWM_GEN+0x840>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM2_CH2 ={.Gpio = GPIOA, .mode = AltFunction, .altFunc = AF1,
 80013ea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	619a      	str	r2, [r3, #24]
 80013fe:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <PWM_GEN+0x838>)
 8001400:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001404:	2301      	movs	r3, #1
 8001406:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800140a:	2302      	movs	r3, #2
 800140c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001410:	2302      	movs	r3, #2
 8001412:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001416:	2301      	movs	r3, #1
 8001418:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
								   .pin_no = 1, .outSpeed = HighSpeed};
				GPIO_Init(&TIM2_CH2);
 800141c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001420:	4618      	mov	r0, r3
 8001422:	f000 ff0d 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR1 |= (0b110 << 12);
 8001426:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800142a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001436:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800143a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	619a      	str	r2, [r3, #24]
				//Output compare preload enable.
				TIMER->CCMR1 |= (1 << 11);
 8001442:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001446:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001452:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001456:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	619a      	str	r2, [r3, #24]
				//Capture/Compare 2 output enable.
				TIMER->CCER  |= (1 << 4);
 800145e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001462:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	f043 0210 	orr.w	r2, r3, #16
 800146e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001472:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit CC2P: Capture/Compare 1 output polarity).
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 800147a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800147e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	f043 0201 	orr.w	r2, r3, #1
 800148a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800148e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60da      	str	r2, [r3, #12]
				//Capture/Compare 2 interrupt enable [CC2E]
				TIMER->DIER  |= (1 << 2);
 8001496:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800149a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	f043 0204 	orr.w	r2, r3, #4
 80014a6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80014aa:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR2].
				TIMER->CCR2   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 80014b2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80014b6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe ffd0 	bl	800046c <__aeabi_ui2d>
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <PWM_GEN+0x83c>)
 80014d2:	f7ff f96f 	bl	80007b4 <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fa51 	bl	8000984 <__aeabi_d2uiz>
 80014e2:	4602      	mov	r2, r0
 80014e4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80014e8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	639a      	str	r2, [r3, #56]	; 0x38
 80014f0:	f000 be60 	b.w	80021b4 <PWM_GEN+0x14f4>
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	408f4000 	.word	0x408f4000
			}
			else if(PWM_cfg->ch == CH3)
 8001500:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001504:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b02      	cmp	r3, #2
 800150e:	f040 8085 	bne.w	800161c <PWM_GEN+0x95c>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM2_CH3 ={.Gpio = GPIOA, .mode = AltFunction, .altFunc = AF1,
 8001512:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	619a      	str	r2, [r3, #24]
 8001526:	4b86      	ldr	r3, [pc, #536]	; (8001740 <PWM_GEN+0xa80>)
 8001528:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800152c:	2302      	movs	r3, #2
 800152e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001538:	2302      	movs	r3, #2
 800153a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800153e:	2301      	movs	r3, #1
 8001540:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
								   .pin_no = 2, .outSpeed = HighSpeed};
				GPIO_Init(&TIM2_CH3);
 8001544:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001548:	4618      	mov	r0, r3
 800154a:	f000 fe79 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR2 |= (0b110 << 4);
 800154e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001552:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800155e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001562:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	61da      	str	r2, [r3, #28]
				//Output compare preload enable.
				TIMER->CCMR2 |= (1 << 3);
 800156a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800156e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f043 0208 	orr.w	r2, r3, #8
 800157a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800157e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	61da      	str	r2, [r3, #28]
				//Capture/Compare 3 output enable.
				TIMER->CCER  |= (1 << 8);
 8001586:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800158a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001596:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800159a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit CC3P: Capture/Compare 1 output polarity).
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 80015a2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80015a6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f043 0201 	orr.w	r2, r3, #1
 80015b2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80015b6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60da      	str	r2, [r3, #12]
				//Capture/Compare 1 interrupt enable [CC3E]
				TIMER->DIER  |= (1 << 3);
 80015be:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80015c2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f043 0208 	orr.w	r2, r3, #8
 80015ce:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80015d2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR3].
				TIMER->CCR3   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 80015da:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80015de:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff3c 	bl	800046c <__aeabi_ui2d>
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b52      	ldr	r3, [pc, #328]	; (8001744 <PWM_GEN+0xa84>)
 80015fa:	f7ff f8db 	bl	80007b4 <__aeabi_ddiv>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff f9bd 	bl	8000984 <__aeabi_d2uiz>
 800160a:	4602      	mov	r2, r0
 800160c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001610:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	63da      	str	r2, [r3, #60]	; 0x3c
 8001618:	f000 bdcc 	b.w	80021b4 <PWM_GEN+0x14f4>
			}
			else if(PWM_cfg->ch == CH4)
 800161c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001620:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b03      	cmp	r3, #3
 800162a:	f040 8085 	bne.w	8001738 <PWM_GEN+0xa78>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM2_CH4 ={.Gpio = GPIOA, .mode = AltFunction, .altFunc = AF1,
 800162e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	619a      	str	r2, [r3, #24]
 8001642:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <PWM_GEN+0xa80>)
 8001644:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001648:	2303      	movs	r3, #3
 800164a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800164e:	2302      	movs	r3, #2
 8001650:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800165a:	2301      	movs	r3, #1
 800165c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
								   .pin_no = 3, .outSpeed = HighSpeed};
				GPIO_Init(&TIM2_CH4);
 8001660:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fdeb 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR2 |= (0b110 << 12);
 800166a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800166e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800167a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800167e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61da      	str	r2, [r3, #28]
				//Output compare preload enable.
				TIMER->CCMR2 |= (1 << 11);
 8001686:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800168a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001696:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800169a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61da      	str	r2, [r3, #28]
				//Capture/Compare 4 output enable.
				TIMER->CCER  |= (1 << 12);
 80016a2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80016a6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016b2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80016b6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit 1 CC4P: Capture/Compare 1 output polarity).
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 80016be:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80016c2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f043 0201 	orr.w	r2, r3, #1
 80016ce:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80016d2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60da      	str	r2, [r3, #12]
				//Capture/Compare 2 interrupt enable [CC4E]
				TIMER->DIER  |= (1 << 4);
 80016da:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80016de:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f043 0210 	orr.w	r2, r3, #16
 80016ea:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80016ee:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR4].
				TIMER->CCR4   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 80016f6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80016fa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe feae 	bl	800046c <__aeabi_ui2d>
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <PWM_GEN+0xa84>)
 8001716:	f7ff f84d 	bl	80007b4 <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff f92f 	bl	8000984 <__aeabi_d2uiz>
 8001726:	4602      	mov	r2, r0
 8001728:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800172c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
 8001734:	f000 bd3e 	b.w	80021b4 <PWM_GEN+0x14f4>
			}
			else{return E_NOK;}
 8001738:	2300      	movs	r3, #0
 800173a:	f000 bd78 	b.w	800222e <PWM_GEN+0x156e>
 800173e:	bf00      	nop
 8001740:	40020000 	.word	0x40020000
 8001744:	408f4000 	.word	0x408f4000
		}
		else if(TIMER == TIM3)
 8001748:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800174c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4aa7      	ldr	r2, [pc, #668]	; (80019f0 <PWM_GEN+0xd30>)
 8001754:	4293      	cmp	r3, r2
 8001756:	f040 8291 	bne.w	8001c7c <PWM_GEN+0xfbc>
		{
			//Enable Timer1 RCC clock and GPIOA clock
			TIM3_ENABLE();
 800175a:	4ba6      	ldr	r3, [pc, #664]	; (80019f4 <PWM_GEN+0xd34>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4aa5      	ldr	r2, [pc, #660]	; (80019f4 <PWM_GEN+0xd34>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
			GPIOB_ENABLE();
 8001766:	4ba3      	ldr	r3, [pc, #652]	; (80019f4 <PWM_GEN+0xd34>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4aa2      	ldr	r2, [pc, #648]	; (80019f4 <PWM_GEN+0xd34>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
			//configure the timer according to the chosen channel.
			if(PWM_cfg->ch == CH1)
 8001772:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001776:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 8097 	bne.w	80018b2 <PWM_GEN+0xbf2>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM3_CH1 ={.Gpio = GPIOB, .mode = AltFunction, .altFunc = AF2,
 8001784:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800178c:	461a      	mov	r2, r3
 800178e:	2300      	movs	r3, #0
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	6053      	str	r3, [r2, #4]
 8001794:	6093      	str	r3, [r2, #8]
 8001796:	60d3      	str	r3, [r2, #12]
 8001798:	6113      	str	r3, [r2, #16]
 800179a:	6153      	str	r3, [r2, #20]
 800179c:	6193      	str	r3, [r2, #24]
 800179e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80017a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017a6:	4a94      	ldr	r2, [pc, #592]	; (80019f8 <PWM_GEN+0xd38>)
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80017ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017b2:	2204      	movs	r2, #4
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80017ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017be:	2202      	movs	r2, #2
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80017c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017ca:	2202      	movs	r2, #2
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80017d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017d6:	2202      	movs	r2, #2
 80017d8:	619a      	str	r2, [r3, #24]
								   .pin_no = 4, .outSpeed = HighSpeed};
				GPIO_Init(&TIM3_CH1);
 80017da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fd2e 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR1 |= (0b110 << 4);
 80017e4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80017e8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80017f4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80017f8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	619a      	str	r2, [r3, #24]
				//Output compare preload enable.
				TIMER->CCMR1 |= (1 << 3);
 8001800:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001804:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f043 0208 	orr.w	r2, r3, #8
 8001810:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001814:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	619a      	str	r2, [r3, #24]
				//Capture/Compare 1 output enable.
				TIMER->CCER  |= (1 << 0);
 800181c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001820:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001830:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit CC1P: Capture/Compare 1 output polarity).
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 8001838:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800183c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800184c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60da      	str	r2, [r3, #12]
				//Capture/Compare 1 interrupt enable [CC1E]
				TIMER->DIER  |= (1 << 1);
 8001854:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001858:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f043 0202 	orr.w	r2, r3, #2
 8001864:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001868:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR1].
				TIMER->CCR1   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 8001870:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001874:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fdf1 	bl	800046c <__aeabi_ui2d>
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <PWM_GEN+0xd3c>)
 8001890:	f7fe ff90 	bl	80007b4 <__aeabi_ddiv>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f872 	bl	8000984 <__aeabi_d2uiz>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80018a6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	635a      	str	r2, [r3, #52]	; 0x34
 80018ae:	f000 bc81 	b.w	80021b4 <PWM_GEN+0x14f4>
			}
			else if(PWM_cfg->ch == CH2)
 80018b2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80018b6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	f040 809e 	bne.w	8001a00 <PWM_GEN+0xd40>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM3_CH2 ={.Gpio = GPIOB, .mode = AltFunction, .altFunc = AF2,
 80018c4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80018c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018cc:	461a      	mov	r2, r3
 80018ce:	2300      	movs	r3, #0
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	6053      	str	r3, [r2, #4]
 80018d4:	6093      	str	r3, [r2, #8]
 80018d6:	60d3      	str	r3, [r2, #12]
 80018d8:	6113      	str	r3, [r2, #16]
 80018da:	6153      	str	r3, [r2, #20]
 80018dc:	6193      	str	r3, [r2, #24]
 80018de:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80018e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018e6:	4a44      	ldr	r2, [pc, #272]	; (80019f8 <PWM_GEN+0xd38>)
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80018ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018f2:	2205      	movs	r2, #5
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80018fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018fe:	2202      	movs	r2, #2
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001906:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800190a:	2202      	movs	r2, #2
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001912:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001916:	2202      	movs	r2, #2
 8001918:	619a      	str	r2, [r3, #24]
								   .pin_no = 5, .outSpeed = HighSpeed};
				GPIO_Init(&TIM3_CH2);
 800191a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fc8e 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR1 |= (0b110 << 12);
 8001924:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001928:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001934:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001938:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	619a      	str	r2, [r3, #24]
				//Output compare preload enable.
				TIMER->CCMR1 |= (1 << 11);
 8001940:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001944:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001950:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001954:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	619a      	str	r2, [r3, #24]
				//Capture/Compare 2 output enable.
				TIMER->CCER  |= (1 << 4);
 800195c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001960:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	f043 0210 	orr.w	r2, r3, #16
 800196c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001970:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit CC2P: Capture/Compare 1 output polarity).
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 8001978:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800197c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f043 0201 	orr.w	r2, r3, #1
 8001988:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800198c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60da      	str	r2, [r3, #12]
				//Capture/Compare 2 interrupt enable [CC2E]
				TIMER->DIER  |= (1 << 2);
 8001994:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001998:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f043 0204 	orr.w	r2, r3, #4
 80019a4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80019a8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR2].
				TIMER->CCR2   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 80019b0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80019b4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fd51 	bl	800046c <__aeabi_ui2d>
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <PWM_GEN+0xd3c>)
 80019d0:	f7fe fef0 	bl	80007b4 <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7fe ffd2 	bl	8000984 <__aeabi_d2uiz>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80019e6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	639a      	str	r2, [r3, #56]	; 0x38
 80019ee:	e3e1      	b.n	80021b4 <PWM_GEN+0x14f4>
 80019f0:	40000400 	.word	0x40000400
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020400 	.word	0x40020400
 80019fc:	408f4000 	.word	0x408f4000
			}
			else if(PWM_cfg->ch == CH3)
 8001a00:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001a04:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	f040 8090 	bne.w	8001b32 <PWM_GEN+0xe72>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM3_CH3 ={.Gpio = GPIOB, .mode = AltFunction, .altFunc = AF2,
 8001a12:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001a16:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	6053      	str	r3, [r2, #4]
 8001a22:	6093      	str	r3, [r2, #8]
 8001a24:	60d3      	str	r3, [r2, #12]
 8001a26:	6113      	str	r3, [r2, #16]
 8001a28:	6153      	str	r3, [r2, #20]
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001a30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a34:	4a8f      	ldr	r2, [pc, #572]	; (8001c74 <PWM_GEN+0xfb4>)
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001a3c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a40:	2202      	movs	r2, #2
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001a48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001a54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a58:	2202      	movs	r2, #2
 8001a5a:	619a      	str	r2, [r3, #24]
								   .pin_no = 0, .outSpeed = HighSpeed};
				GPIO_Init(&TIM3_CH3);
 8001a5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fbed 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR2 |= (0b110 << 4);
 8001a66:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001a6a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001a76:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001a7a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61da      	str	r2, [r3, #28]
				//Output compare preload enable.
				TIMER->CCMR2 |= (1 << 3);
 8001a82:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001a86:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f043 0208 	orr.w	r2, r3, #8
 8001a92:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001a96:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	61da      	str	r2, [r3, #28]
				//Capture/Compare 3 output enable.
				TIMER->CCER  |= (1 << 8);
 8001a9e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001aa2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aae:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ab2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit CC3P: Capture/Compare 1 output polarity).
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 8001aba:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001abe:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ace:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60da      	str	r2, [r3, #12]
				//Capture/Compare 1 interrupt enable [CC3E]
				TIMER->DIER  |= (1 << 3);
 8001ad6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ada:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f043 0208 	orr.w	r2, r3, #8
 8001ae6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001aea:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR3].
				TIMER->CCR3   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 8001af2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001af6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fcb0 	bl	800046c <__aeabi_ui2d>
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b59      	ldr	r3, [pc, #356]	; (8001c78 <PWM_GEN+0xfb8>)
 8001b12:	f7fe fe4f 	bl	80007b4 <__aeabi_ddiv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7fe ff31 	bl	8000984 <__aeabi_d2uiz>
 8001b22:	4602      	mov	r2, r0
 8001b24:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001b28:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b30:	e340      	b.n	80021b4 <PWM_GEN+0x14f4>
			}
			else if(PWM_cfg->ch == CH4)
 8001b32:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001b36:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	f040 8096 	bne.w	8001c70 <PWM_GEN+0xfb0>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM3_CH4 ={.Gpio = GPIOB, .mode = AltFunction, .altFunc = AF2,
 8001b44:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001b48:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2300      	movs	r3, #0
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	6053      	str	r3, [r2, #4]
 8001b54:	6093      	str	r3, [r2, #8]
 8001b56:	60d3      	str	r3, [r2, #12]
 8001b58:	6113      	str	r3, [r2, #16]
 8001b5a:	6153      	str	r3, [r2, #20]
 8001b5c:	6193      	str	r3, [r2, #24]
 8001b5e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001b62:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001b66:	4a43      	ldr	r2, [pc, #268]	; (8001c74 <PWM_GEN+0xfb4>)
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001b6e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001b72:	2201      	movs	r2, #1
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001b7a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001b7e:	2202      	movs	r2, #2
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001b86:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001b92:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001b96:	2202      	movs	r2, #2
 8001b98:	619a      	str	r2, [r3, #24]
								   .pin_no = 1, .outSpeed = HighSpeed};
				GPIO_Init(&TIM3_CH4);
 8001b9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fb4e 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR2 |= (0b110 << 12);
 8001ba4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ba8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001bb4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001bb8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	61da      	str	r2, [r3, #28]
				//Output compare preload enable.
				TIMER->CCMR2 |= (1 << 11);
 8001bc0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001bc4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001bd0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001bd4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	61da      	str	r2, [r3, #28]
				//Capture/Compare 4 output enable.
				TIMER->CCER  |= (1 << 12);
 8001bdc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001be0:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bec:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001bf0:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit 1 CC4P: Capture/Compare 1 output polarity).
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 8001bf8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001bfc:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f043 0201 	orr.w	r2, r3, #1
 8001c08:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c0c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	60da      	str	r2, [r3, #12]
				//Capture/Compare 2 interrupt enable [CC4E]
				TIMER->DIER  |= (1 << 4);
 8001c14:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c18:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f043 0210 	orr.w	r2, r3, #16
 8001c24:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c28:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR4].
				TIMER->CCR4   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 8001c30:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c34:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc11 	bl	800046c <__aeabi_ui2d>
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <PWM_GEN+0xfb8>)
 8001c50:	f7fe fdb0 	bl	80007b4 <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe fe92 	bl	8000984 <__aeabi_d2uiz>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c66:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c6e:	e2a1      	b.n	80021b4 <PWM_GEN+0x14f4>
			}
			else{return E_NOK;}
 8001c70:	2300      	movs	r3, #0
 8001c72:	e2dc      	b.n	800222e <PWM_GEN+0x156e>
 8001c74:	40020400 	.word	0x40020400
 8001c78:	408f4000 	.word	0x408f4000
		}
		else if(TIMER == TIM4)
 8001c7c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c80:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4aa7      	ldr	r2, [pc, #668]	; (8001f24 <PWM_GEN+0x1264>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	f040 8293 	bne.w	80021b4 <PWM_GEN+0x14f4>
		{
			//Enable Timer1 RCC clock and GPIOA clock
			TIM4_ENABLE();
 8001c8e:	4ba6      	ldr	r3, [pc, #664]	; (8001f28 <PWM_GEN+0x1268>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	4aa5      	ldr	r2, [pc, #660]	; (8001f28 <PWM_GEN+0x1268>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6413      	str	r3, [r2, #64]	; 0x40
			GPIOB_ENABLE();
 8001c9a:	4ba3      	ldr	r3, [pc, #652]	; (8001f28 <PWM_GEN+0x1268>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4aa2      	ldr	r2, [pc, #648]	; (8001f28 <PWM_GEN+0x1268>)
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
			//configure the timer according to the chosen channel.
			if(PWM_cfg->ch == CH1)
 8001ca6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001caa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f040 8096 	bne.w	8001de4 <PWM_GEN+0x1124>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM4_CH1 ={.Gpio = GPIOB, .mode = AltFunction, .altFunc = AF2,
 8001cb8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001cbc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	6053      	str	r3, [r2, #4]
 8001cc8:	6093      	str	r3, [r2, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
 8001ccc:	6113      	str	r3, [r2, #16]
 8001cce:	6153      	str	r3, [r2, #20]
 8001cd0:	6193      	str	r3, [r2, #24]
 8001cd2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001cd6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cda:	4a94      	ldr	r2, [pc, #592]	; (8001f2c <PWM_GEN+0x126c>)
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ce2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ce6:	2206      	movs	r2, #6
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001cee:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001cfa:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cfe:	2202      	movs	r2, #2
 8001d00:	611a      	str	r2, [r3, #16]
 8001d02:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d06:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	619a      	str	r2, [r3, #24]
								   .pin_no = 6, .outSpeed = HighSpeed};
				GPIO_Init(&TIM4_CH1);
 8001d0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 fa94 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR1 |= (0b110 << 4);
 8001d18:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d1c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001d28:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d2c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	619a      	str	r2, [r3, #24]
				//Output compare preload enable.
				TIMER->CCMR1 |= (1 << 3);
 8001d34:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d38:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f043 0208 	orr.w	r2, r3, #8
 8001d44:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d48:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	619a      	str	r2, [r3, #24]
				//Capture/Compare 1 output enable.
				TIMER->CCER  |= (1 << 0);
 8001d50:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d54:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d64:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit CC1P: Capture/Compare 1 output polarity).
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 8001d6c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d70:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d80:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60da      	str	r2, [r3, #12]
				//Capture/Compare 1 interrupt enable [CC1E]
				TIMER->DIER  |= (1 << 1);
 8001d88:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d8c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f043 0202 	orr.w	r2, r3, #2
 8001d98:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d9c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR1].
				TIMER->CCR1   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 8001da4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001da8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001db4:	fb02 f303 	mul.w	r3, r2, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fb57 	bl	800046c <__aeabi_ui2d>
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <PWM_GEN+0x1270>)
 8001dc4:	f7fe fcf6 	bl	80007b4 <__aeabi_ddiv>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f7fe fdd8 	bl	8000984 <__aeabi_d2uiz>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001dda:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	635a      	str	r2, [r3, #52]	; 0x34
 8001de2:	e1e7      	b.n	80021b4 <PWM_GEN+0x14f4>
			}
			else if(PWM_cfg->ch == CH2)
 8001de4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001de8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	f040 809f 	bne.w	8001f34 <PWM_GEN+0x1274>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM4_CH2 ={.Gpio = GPIOB, .mode = AltFunction, .altFunc = AF2,
 8001df6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001dfa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2300      	movs	r3, #0
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	6053      	str	r3, [r2, #4]
 8001e06:	6093      	str	r3, [r2, #8]
 8001e08:	60d3      	str	r3, [r2, #12]
 8001e0a:	6113      	str	r3, [r2, #16]
 8001e0c:	6153      	str	r3, [r2, #20]
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e14:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e18:	4a44      	ldr	r2, [pc, #272]	; (8001f2c <PWM_GEN+0x126c>)
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e20:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e24:	2207      	movs	r2, #7
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e2c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e30:	2202      	movs	r2, #2
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e38:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	611a      	str	r2, [r3, #16]
 8001e40:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e44:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e48:	2202      	movs	r2, #2
 8001e4a:	619a      	str	r2, [r3, #24]
								   .pin_no = 7, .outSpeed = HighSpeed};
				GPIO_Init(&TIM4_CH2);
 8001e4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 f9f5 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR1 |= (0b110 << 12);
 8001e56:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e5a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001e66:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e6a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	619a      	str	r2, [r3, #24]
				//Output compare preload enable.
				TIMER->CCMR1 |= (1 << 11);
 8001e72:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e76:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001e82:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e86:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	619a      	str	r2, [r3, #24]
				//Capture/Compare 2 output enable.
				TIMER->CCER  |= (1 << 4);
 8001e8e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e92:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	f043 0210 	orr.w	r2, r3, #16
 8001e9e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ea2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit CC2P: Capture/Compare 1 output polarity).
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 8001eaa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001eae:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ebe:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60da      	str	r2, [r3, #12]
				//Capture/Compare 2 interrupt enable [CC2E]
				TIMER->DIER  |= (1 << 2);
 8001ec6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001eca:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f043 0204 	orr.w	r2, r3, #4
 8001ed6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001eda:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR2].
				TIMER->CCR2   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 8001ee2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ee6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001ef2:	fb02 f303 	mul.w	r3, r2, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fab8 	bl	800046c <__aeabi_ui2d>
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <PWM_GEN+0x1270>)
 8001f02:	f7fe fc57 	bl	80007b4 <__aeabi_ddiv>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f7fe fd39 	bl	8000984 <__aeabi_d2uiz>
 8001f12:	4602      	mov	r2, r0
 8001f14:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f18:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	639a      	str	r2, [r3, #56]	; 0x38
 8001f20:	e148      	b.n	80021b4 <PWM_GEN+0x14f4>
 8001f22:	bf00      	nop
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	408f4000 	.word	0x408f4000
			}
			else if(PWM_cfg->ch == CH3)
 8001f34:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f38:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	f040 8096 	bne.w	8002072 <PWM_GEN+0x13b2>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM4_CH3 ={.Gpio = GPIOB, .mode = AltFunction, .altFunc = AF2,
 8001f46:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f4a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2300      	movs	r3, #0
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	6053      	str	r3, [r2, #4]
 8001f56:	6093      	str	r3, [r2, #8]
 8001f58:	60d3      	str	r3, [r2, #12]
 8001f5a:	6113      	str	r3, [r2, #16]
 8001f5c:	6153      	str	r3, [r2, #20]
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f64:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f68:	4ab3      	ldr	r2, [pc, #716]	; (8002238 <PWM_GEN+0x1578>)
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f70:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f74:	2208      	movs	r2, #8
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f7c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f80:	2202      	movs	r2, #2
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f88:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	611a      	str	r2, [r3, #16]
 8001f90:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f94:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f98:	2202      	movs	r2, #2
 8001f9a:	619a      	str	r2, [r3, #24]
								   .pin_no = 8, .outSpeed = HighSpeed};
				GPIO_Init(&TIM4_CH3);
 8001f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f94d 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR2 |= (0b110 << 4);
 8001fa6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001faa:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001fb6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001fba:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61da      	str	r2, [r3, #28]
				//Output compare preload enable.
				TIMER->CCMR2 |= (1 << 3);
 8001fc2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001fc6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f043 0208 	orr.w	r2, r3, #8
 8001fd2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001fd6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	61da      	str	r2, [r3, #28]
				//Capture/Compare 3 output enable.
				TIMER->CCER  |= (1 << 8);
 8001fde:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001fe2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fee:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ff2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit CC3P: Capture/Compare 1 output polarity).
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 8001ffa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ffe:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800200e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60da      	str	r2, [r3, #12]
				//Capture/Compare 1 interrupt enable [CC3E]
				TIMER->DIER  |= (1 << 3);
 8002016:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800201a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f043 0208 	orr.w	r2, r3, #8
 8002026:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800202a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR3].
				TIMER->CCR3   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 8002032:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002036:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa10 	bl	800046c <__aeabi_ui2d>
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	4b7a      	ldr	r3, [pc, #488]	; (800223c <PWM_GEN+0x157c>)
 8002052:	f7fe fbaf 	bl	80007b4 <__aeabi_ddiv>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	f7fe fc91 	bl	8000984 <__aeabi_d2uiz>
 8002062:	4602      	mov	r2, r0
 8002064:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002068:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002070:	e0a0      	b.n	80021b4 <PWM_GEN+0x14f4>
			}
			else if(PWM_cfg->ch == CH4)
 8002072:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002076:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b03      	cmp	r3, #3
 8002080:	f040 8096 	bne.w	80021b0 <PWM_GEN+0x14f0>
			{
				//Configure the channel pin and initialize it.
				Pin_cfg TIM4_CH4 ={.Gpio = GPIOB, .mode = AltFunction, .altFunc = AF2,
 8002084:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002088:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800208c:	461a      	mov	r2, r3
 800208e:	2300      	movs	r3, #0
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	6053      	str	r3, [r2, #4]
 8002094:	6093      	str	r3, [r2, #8]
 8002096:	60d3      	str	r3, [r2, #12]
 8002098:	6113      	str	r3, [r2, #16]
 800209a:	6153      	str	r3, [r2, #20]
 800209c:	6193      	str	r3, [r2, #24]
 800209e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80020a2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80020a6:	4a64      	ldr	r2, [pc, #400]	; (8002238 <PWM_GEN+0x1578>)
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80020ae:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80020b2:	2209      	movs	r2, #9
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80020ba:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80020be:	2202      	movs	r2, #2
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80020c6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80020ca:	2202      	movs	r2, #2
 80020cc:	611a      	str	r2, [r3, #16]
 80020ce:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80020d2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80020d6:	2202      	movs	r2, #2
 80020d8:	619a      	str	r2, [r3, #24]
								   .pin_no = 9, .outSpeed = HighSpeed};
				GPIO_Init(&TIM4_CH4);
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f8ae 	bl	8002240 <GPIO_Init>
				 * Start of timer registers configurations *
				 *                                         *
				 *******************************************
				 */
				//Choose PWM mode 1.
				TIMER->CCMR2 |= (0b110 << 12);
 80020e4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80020e8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80020f4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80020f8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	61da      	str	r2, [r3, #28]
				//Output compare preload enable.
				TIMER->CCMR2 |= (1 << 11);
 8002100:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002104:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002110:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002114:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	61da      	str	r2, [r3, #28]
				//Capture/Compare 4 output enable.
				TIMER->CCER  |= (1 << 12);
 800211c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002120:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800212c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002130:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	621a      	str	r2, [r3, #32]
				//active high is the default in (Bit 1 CC4P: Capture/Compare 1 output polarity).
				//Edge align mode is the default in TIMx_CR1 register [CMS].
				//Update interrupt enable [UIE].
				TIMER->DIER  |= (1 << 0);
 8002138:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800213c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800214c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60da      	str	r2, [r3, #12]
				//Capture/Compare 2 interrupt enable [CC4E]
				TIMER->DIER  |= (1 << 4);
 8002154:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002158:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f043 0210 	orr.w	r2, r3, #16
 8002164:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002168:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60da      	str	r2, [r3, #12]
				//Put the capture value [CCR4].
				TIMER->CCR4   = temp_ARR * PWM_cfg->duty_cycle / 1000.0;
 8002170:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002174:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f971 	bl	800046c <__aeabi_ui2d>
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	4b2b      	ldr	r3, [pc, #172]	; (800223c <PWM_GEN+0x157c>)
 8002190:	f7fe fb10 	bl	80007b4 <__aeabi_ddiv>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f7fe fbf2 	bl	8000984 <__aeabi_d2uiz>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021a6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
 80021ae:	e001      	b.n	80021b4 <PWM_GEN+0x14f4>
			}
			else{return E_NOK;}
 80021b0:	2300      	movs	r3, #0
 80021b2:	e03c      	b.n	800222e <PWM_GEN+0x156e>
		}

		//Enable Auto reload pre-load.
		TIMER->CR1 |= (1 << 7);
 80021b4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021b8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80021c4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021c8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	601a      	str	r2, [r3, #0]
		//ARR value.
		TIMER->ARR  = temp_ARR - 1;
 80021d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80021d4:	1e5a      	subs	r2, r3, #1
 80021d6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021da:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	62da      	str	r2, [r3, #44]	; 0x2c
		//PSC value.
		TIMER->PSC  = temp_PSC - 1;
 80021e2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80021e6:	1e5a      	subs	r2, r3, #1
 80021e8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021ec:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
		//Update generation
		TIMER->EGR |= TIM_EGR_UG;
 80021f4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021f8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002208:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	615a      	str	r2, [r3, #20]
		//Enable the timer (CEN = 0).
		TIMER->CR1 |= (1 << 0);
 8002210:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002214:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002224:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	601a      	str	r2, [r3, #0]

		return E_OK;
 800222c:	2301      	movs	r3, #1
	}
}
 800222e:	4618      	mov	r0, r3
 8002230:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40020400 	.word	0x40020400
 800223c:	408f4000 	.word	0x408f4000

08002240 <GPIO_Init>:
 * 		  behavior.
 * 		  E_OK -> everything is OK.
 * 		  E_NOK-> something wrong happened.
 */
Std_ReturnStatus GPIO_Init(Pin_cfg *pin)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	if((NULL == pin) || (pin->pin_no < 0))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <GPIO_Init+0x12>
	{
		return E_NOK;
 800224e:	2300      	movs	r3, #0
 8002250:	e0c9      	b.n	80023e6 <GPIO_Init+0x1a6>
	}
	else
	{
		//Clear existing configuration.
		pin->Gpio->MODER &= ~(0x3 << (pin->pin_no * 2));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2103      	movs	r1, #3
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	4619      	mov	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	400a      	ands	r2, r1
 800226e:	601a      	str	r2, [r3, #0]
		//Set the new configuration
		pin->Gpio->MODER |= (pin->mode << (pin->pin_no * 2));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6819      	ldr	r1, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	409a      	lsls	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	601a      	str	r2, [r3, #0]
		if((pin->mode == Output) || (pin->mode == AltFunction))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d003      	beq.n	800229a <GPIO_Init+0x5a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d13f      	bne.n	800231a <GPIO_Init+0xda>
		{
			if(pin->outType == PushPull)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10e      	bne.n	80022c0 <GPIO_Init+0x80>
			{
				pin->Gpio->OTYPER &= ~(1 << pin->pin_no);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2101      	movs	r1, #1
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	400a      	ands	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	e010      	b.n	80022e2 <GPIO_Init+0xa2>
			}
			else if(pin->outType == OpenDrain)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d10c      	bne.n	80022e2 <GPIO_Init+0xa2>
			{
				pin->Gpio->OTYPER |=  (1 << pin->pin_no);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2101      	movs	r1, #1
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	605a      	str	r2, [r3, #4]
			}
			//Clear existing output speed configurations.
			pin->Gpio->OSPEEDR &= ~(0x3 << (pin->pin_no * 2));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2103      	movs	r1, #3
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	400a      	ands	r2, r1
 80022fe:	609a      	str	r2, [r3, #8]
			//Set new output speed configurations.
			pin->Gpio->OSPEEDR |= (pin->outSpeed << (pin->pin_no * 2));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	409a      	lsls	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	609a      	str	r2, [r3, #8]
		}
		if(pin->mode != Analog)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d01b      	beq.n	800235a <GPIO_Init+0x11a>
		{
			//Clear existing Pull configurations.
			pin->Gpio->PUPDR &= ~(0x3 << (pin->pin_no * 2));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2103      	movs	r1, #3
 8002330:	fa01 f303 	lsl.w	r3, r1, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	4619      	mov	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	400a      	ands	r2, r1
 800233e:	60da      	str	r2, [r3, #12]
			//Set new Pull configurations.
			pin->Gpio->PUPDR |= (pin->pull << (pin->pin_no * 2));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68d9      	ldr	r1, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	409a      	lsls	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	60da      	str	r2, [r3, #12]
		}
		if(pin->mode == AltFunction)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d140      	bne.n	80023e4 <GPIO_Init+0x1a4>
		{
			if(pin->pin_no <= 7)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b07      	cmp	r3, #7
 8002368:	d81c      	bhi.n	80023a4 <GPIO_Init+0x164>
			{
				//Clear existing alternate function configuration.
				pin->Gpio->AFR[0] &= ~(0xF << (pin->pin_no * 4));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6a1a      	ldr	r2, [r3, #32]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	210f      	movs	r1, #15
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	4619      	mov	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	400a      	ands	r2, r1
 8002386:	621a      	str	r2, [r3, #32]
				//Set new alternate function configuration.
				pin->Gpio->AFR[0] |= (pin->altFunc << (pin->pin_no * 4));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6a19      	ldr	r1, [r3, #32]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	409a      	lsls	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	621a      	str	r2, [r3, #32]
 80023a2:	e01f      	b.n	80023e4 <GPIO_Init+0x1a4>
			}
			else
			{
				//Clear existing alternate function configuration.
				pin->Gpio->AFR[1] &= ~(0xF << ((8 - pin->pin_no) * 4));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f1c3 0308 	rsb	r3, r3, #8
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	210f      	movs	r1, #15
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	4619      	mov	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	400a      	ands	r2, r1
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24
				//Set new alternate function configuration.
				pin->Gpio->AFR[1] |= (pin->altFunc << ((8 - pin->pin_no) * 4));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f1c3 0308 	rsb	r3, r3, #8
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	409a      	lsls	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}
		return E_OK;
 80023e4:	2301      	movs	r3, #1
	}
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <GPIO_Write_Pin>:
 * 		  behavior.
 * 		  E_OK -> everything is OK.
 * 		  E_NOK-> something wrong happened.
 */
Std_ReturnStatus GPIO_Write_Pin(GPIO_TypeDef *Gpio,uint16_t pin, Logic_t logic)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
 80023fc:	4613      	mov	r3, r2
 80023fe:	707b      	strb	r3, [r7, #1]
	if((NULL == Gpio) || (pin < 0))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <GPIO_Write_Pin+0x1a>
	{
		return E_NOK;
 8002406:	2300      	movs	r3, #0
 8002408:	e017      	b.n	800243a <GPIO_Write_Pin+0x4a>
	}
	else
	{
		if(logic == GPIO_HIGH)
 800240a:	787b      	ldrb	r3, [r7, #1]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d109      	bne.n	8002424 <GPIO_Write_Pin+0x34>
		{
			Gpio->BSRR |= (1 << pin);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	887a      	ldrh	r2, [r7, #2]
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f202 	lsl.w	r2, r1, r2
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	619a      	str	r2, [r3, #24]
 8002422:	e009      	b.n	8002438 <GPIO_Write_Pin+0x48>
		}
		else
		{
			Gpio->BSRR |= (1 << pin << 16);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	887a      	ldrh	r2, [r7, #2]
 800242a:	2101      	movs	r1, #1
 800242c:	fa01 f202 	lsl.w	r2, r1, r2
 8002430:	0412      	lsls	r2, r2, #16
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	619a      	str	r2, [r3, #24]
		}
		return E_OK;
 8002438:	2301      	movs	r3, #1
	}
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <GPIO_Read_Pin>:
 * @ret   return pin status:
 * 		  GPIO_HIGH -> 1
 * 		  GPIO_LOW  -> 0
 */
Logic_t GPIO_Read_Pin(GPIO_TypeDef *Gpio,uint16_t pin)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
	if((Gpio->IDR & (1 << pin)) == (1 << pin))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	887a      	ldrh	r2, [r7, #2]
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	4013      	ands	r3, r2
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	2101      	movs	r1, #1
 8002462:	fa01 f202 	lsl.w	r2, r1, r2
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <GPIO_Read_Pin+0x2a>
	{
		return GPIO_HIGH;
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <GPIO_Read_Pin+0x2c>
	}
	else
	{
		return GPIO_LOW;
 800246e:	2300      	movs	r3, #0
	}
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
	...

0800247c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002482:	f003 fccf 	bl	8005e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002486:	f000 f995 	bl	80027b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800248a:	f000 fa53 	bl	8002934 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800248e:	f000 fa29 	bl	80028e4 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 8002492:	f000 f9f9 	bl	8002888 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 8002496:	f002 fb4f 	bl	8004b38 <setup>
  pins_init();
 800249a:	f000 fc83 	bl	8002da4 <_Z9pins_initv>
  ext_pin();
 800249e:	f000 fd21 	bl	8002ee4 <_Z7ext_pinv>
  while (1)
  {
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  loop();
 80024a2:	f002 fb65 	bl	8004b70 <loop>
//	  PWM_GEN(TIM2, &pwm3, 16000000);
//	  pwm4.duty_cycle = pid_calc(speeds[3], (int)speed4);
//	  PWM_GEN(TIM2, &pwm4, 16000000);

	  /* ====================== WebMode ===================== */
	  if (received_value==1){
 80024a6:	4b96      	ldr	r3, [pc, #600]	; (8002700 <main+0x284>)
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d010      	beq.n	80024dc <main+0x60>
		  pwm1.duty_cycle = 250;
 80024ba:	4b92      	ldr	r3, [pc, #584]	; (8002704 <main+0x288>)
 80024bc:	22fa      	movs	r2, #250	; 0xfa
 80024be:	609a      	str	r2, [r3, #8]
		  pwm2.duty_cycle = 250;
 80024c0:	4b91      	ldr	r3, [pc, #580]	; (8002708 <main+0x28c>)
 80024c2:	22fa      	movs	r2, #250	; 0xfa
 80024c4:	609a      	str	r2, [r3, #8]
		  pwm3.duty_cycle = 250;
 80024c6:	4b91      	ldr	r3, [pc, #580]	; (800270c <main+0x290>)
 80024c8:	22fa      	movs	r2, #250	; 0xfa
 80024ca:	609a      	str	r2, [r3, #8]
		  pwm4.duty_cycle = 250;
 80024cc:	4b90      	ldr	r3, [pc, #576]	; (8002710 <main+0x294>)
 80024ce:	22fa      	movs	r2, #250	; 0xfa
 80024d0:	609a      	str	r2, [r3, #8]
		  forward(0, 0);
 80024d2:	2100      	movs	r1, #0
 80024d4:	2000      	movs	r0, #0
 80024d6:	f000 fdb9 	bl	800304c <forward>
 80024da:	e7e2      	b.n	80024a2 <main+0x26>
	  }
	  else if (received_value==2) {
 80024dc:	4b88      	ldr	r3, [pc, #544]	; (8002700 <main+0x284>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	bf0c      	ite	eq
 80024e6:	2301      	moveq	r3, #1
 80024e8:	2300      	movne	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d010      	beq.n	8002512 <main+0x96>
		  pwm1.duty_cycle = 250;
 80024f0:	4b84      	ldr	r3, [pc, #528]	; (8002704 <main+0x288>)
 80024f2:	22fa      	movs	r2, #250	; 0xfa
 80024f4:	609a      	str	r2, [r3, #8]
		  pwm2.duty_cycle = 250;
 80024f6:	4b84      	ldr	r3, [pc, #528]	; (8002708 <main+0x28c>)
 80024f8:	22fa      	movs	r2, #250	; 0xfa
 80024fa:	609a      	str	r2, [r3, #8]
		  pwm3.duty_cycle = 250;
 80024fc:	4b83      	ldr	r3, [pc, #524]	; (800270c <main+0x290>)
 80024fe:	22fa      	movs	r2, #250	; 0xfa
 8002500:	609a      	str	r2, [r3, #8]
		  pwm4.duty_cycle = 250;
 8002502:	4b83      	ldr	r3, [pc, #524]	; (8002710 <main+0x294>)
 8002504:	22fa      	movs	r2, #250	; 0xfa
 8002506:	609a      	str	r2, [r3, #8]
		  backward(0, 0);
 8002508:	2100      	movs	r1, #0
 800250a:	2000      	movs	r0, #0
 800250c:	f000 fd7c 	bl	8003008 <backward>
 8002510:	e7c7      	b.n	80024a2 <main+0x26>
	  }
	  else if (received_value==3) {
 8002512:	4b7b      	ldr	r3, [pc, #492]	; (8002700 <main+0x284>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	b21b      	sxth	r3, r3
 8002518:	2b03      	cmp	r3, #3
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <main+0xcc>
		  pwm1.duty_cycle = 250;
 8002526:	4b77      	ldr	r3, [pc, #476]	; (8002704 <main+0x288>)
 8002528:	22fa      	movs	r2, #250	; 0xfa
 800252a:	609a      	str	r2, [r3, #8]
		  pwm2.duty_cycle = 250;
 800252c:	4b76      	ldr	r3, [pc, #472]	; (8002708 <main+0x28c>)
 800252e:	22fa      	movs	r2, #250	; 0xfa
 8002530:	609a      	str	r2, [r3, #8]
		  pwm3.duty_cycle = 250;
 8002532:	4b76      	ldr	r3, [pc, #472]	; (800270c <main+0x290>)
 8002534:	22fa      	movs	r2, #250	; 0xfa
 8002536:	609a      	str	r2, [r3, #8]
		  pwm4.duty_cycle = 250;
 8002538:	4b75      	ldr	r3, [pc, #468]	; (8002710 <main+0x294>)
 800253a:	22fa      	movs	r2, #250	; 0xfa
 800253c:	609a      	str	r2, [r3, #8]
		  side_right(0, 0);
 800253e:	2100      	movs	r1, #0
 8002540:	2000      	movs	r0, #0
 8002542:	f000 fdc7 	bl	80030d4 <side_right>
 8002546:	e7ac      	b.n	80024a2 <main+0x26>
	  }
	  else if (received_value==4) {
 8002548:	4b6d      	ldr	r3, [pc, #436]	; (8002700 <main+0x284>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b21b      	sxth	r3, r3
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf0c      	ite	eq
 8002552:	2301      	moveq	r3, #1
 8002554:	2300      	movne	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d010      	beq.n	800257e <main+0x102>
		  pwm1.duty_cycle = 250;
 800255c:	4b69      	ldr	r3, [pc, #420]	; (8002704 <main+0x288>)
 800255e:	22fa      	movs	r2, #250	; 0xfa
 8002560:	609a      	str	r2, [r3, #8]
		  pwm2.duty_cycle = 250;
 8002562:	4b69      	ldr	r3, [pc, #420]	; (8002708 <main+0x28c>)
 8002564:	22fa      	movs	r2, #250	; 0xfa
 8002566:	609a      	str	r2, [r3, #8]
		  pwm3.duty_cycle = 250;
 8002568:	4b68      	ldr	r3, [pc, #416]	; (800270c <main+0x290>)
 800256a:	22fa      	movs	r2, #250	; 0xfa
 800256c:	609a      	str	r2, [r3, #8]
		  pwm4.duty_cycle = 250;
 800256e:	4b68      	ldr	r3, [pc, #416]	; (8002710 <main+0x294>)
 8002570:	22fa      	movs	r2, #250	; 0xfa
 8002572:	609a      	str	r2, [r3, #8]
		  side_left(0, 0);
 8002574:	2100      	movs	r1, #0
 8002576:	2000      	movs	r0, #0
 8002578:	f000 fd8a 	bl	8003090 <side_left>
 800257c:	e791      	b.n	80024a2 <main+0x26>
	  }
	  else if (received_value==5) {
 800257e:	4b60      	ldr	r3, [pc, #384]	; (8002700 <main+0x284>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b21b      	sxth	r3, r3
 8002584:	2b05      	cmp	r3, #5
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d02e      	beq.n	80025f0 <main+0x174>
		  pwm1.duty_cycle = 0;
 8002592:	4b5c      	ldr	r3, [pc, #368]	; (8002704 <main+0x288>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
		  pwm2.duty_cycle = 0;
 8002598:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <main+0x28c>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
		  pwm3.duty_cycle = 0;
 800259e:	4b5b      	ldr	r3, [pc, #364]	; (800270c <main+0x290>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
		  pwm4.duty_cycle = 0;
 80025a4:	4b5a      	ldr	r3, [pc, #360]	; (8002710 <main+0x294>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
		  //M1
		  PWM_GEN(TIM2, &pwm1, 16000000);
 80025aa:	4a5a      	ldr	r2, [pc, #360]	; (8002714 <main+0x298>)
 80025ac:	4955      	ldr	r1, [pc, #340]	; (8002704 <main+0x288>)
 80025ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80025b2:	f7fe fb85 	bl	8000cc0 <PWM_GEN>
		  //M2
		  PWM_GEN(TIM2, &pwm2, 16000000);
 80025b6:	4a57      	ldr	r2, [pc, #348]	; (8002714 <main+0x298>)
 80025b8:	4953      	ldr	r1, [pc, #332]	; (8002708 <main+0x28c>)
 80025ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80025be:	f7fe fb7f 	bl	8000cc0 <PWM_GEN>
		  //M3
		  PWM_GEN(TIM2, &pwm3, 16000000);
 80025c2:	4a54      	ldr	r2, [pc, #336]	; (8002714 <main+0x298>)
 80025c4:	4951      	ldr	r1, [pc, #324]	; (800270c <main+0x290>)
 80025c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80025ca:	f7fe fb79 	bl	8000cc0 <PWM_GEN>
		  //M4
		  PWM_GEN(TIM2, &pwm4, 16000000);
 80025ce:	4a51      	ldr	r2, [pc, #324]	; (8002714 <main+0x298>)
 80025d0:	494f      	ldr	r1, [pc, #316]	; (8002710 <main+0x294>)
 80025d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80025d6:	f7fe fb73 	bl	8000cc0 <PWM_GEN>

		  GPIO_Write_Pin(GPIOB, 7, GPIO_LOW);
 80025da:	2200      	movs	r2, #0
 80025dc:	2107      	movs	r1, #7
 80025de:	484e      	ldr	r0, [pc, #312]	; (8002718 <main+0x29c>)
 80025e0:	f7ff ff06 	bl	80023f0 <GPIO_Write_Pin>
		  GPIO_Write_Pin(GPIOB, 8, GPIO_LOW);
 80025e4:	2200      	movs	r2, #0
 80025e6:	2108      	movs	r1, #8
 80025e8:	484b      	ldr	r0, [pc, #300]	; (8002718 <main+0x29c>)
 80025ea:	f7ff ff01 	bl	80023f0 <GPIO_Write_Pin>
 80025ee:	e758      	b.n	80024a2 <main+0x26>
	  }
	  else if(received_value==6)
 80025f0:	4b43      	ldr	r3, [pc, #268]	; (8002700 <main+0x284>)
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	bf0c      	ite	eq
 80025fa:	2301      	moveq	r3, #1
 80025fc:	2300      	movne	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d010      	beq.n	8002626 <main+0x1aa>
	  {
		  pwm1.duty_cycle = 250;
 8002604:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <main+0x288>)
 8002606:	22fa      	movs	r2, #250	; 0xfa
 8002608:	609a      	str	r2, [r3, #8]
		  pwm2.duty_cycle = 250;
 800260a:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <main+0x28c>)
 800260c:	22fa      	movs	r2, #250	; 0xfa
 800260e:	609a      	str	r2, [r3, #8]
		  pwm3.duty_cycle = 250;
 8002610:	4b3e      	ldr	r3, [pc, #248]	; (800270c <main+0x290>)
 8002612:	22fa      	movs	r2, #250	; 0xfa
 8002614:	609a      	str	r2, [r3, #8]
		  pwm4.duty_cycle = 250;
 8002616:	4b3e      	ldr	r3, [pc, #248]	; (8002710 <main+0x294>)
 8002618:	22fa      	movs	r2, #250	; 0xfa
 800261a:	609a      	str	r2, [r3, #8]
		  rotate_left(0, 0);
 800261c:	2100      	movs	r1, #0
 800261e:	2000      	movs	r0, #0
 8002620:	f000 fd7a 	bl	8003118 <rotate_left>
 8002624:	e73d      	b.n	80024a2 <main+0x26>
	  }
	  else if(received_value==7)
 8002626:	4b36      	ldr	r3, [pc, #216]	; (8002700 <main+0x284>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	b21b      	sxth	r3, r3
 800262c:	2b07      	cmp	r3, #7
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d010      	beq.n	800265c <main+0x1e0>
	  {
		  pwm1.duty_cycle = 250;
 800263a:	4b32      	ldr	r3, [pc, #200]	; (8002704 <main+0x288>)
 800263c:	22fa      	movs	r2, #250	; 0xfa
 800263e:	609a      	str	r2, [r3, #8]
		  pwm2.duty_cycle = 250;
 8002640:	4b31      	ldr	r3, [pc, #196]	; (8002708 <main+0x28c>)
 8002642:	22fa      	movs	r2, #250	; 0xfa
 8002644:	609a      	str	r2, [r3, #8]
		  pwm3.duty_cycle = 250;
 8002646:	4b31      	ldr	r3, [pc, #196]	; (800270c <main+0x290>)
 8002648:	22fa      	movs	r2, #250	; 0xfa
 800264a:	609a      	str	r2, [r3, #8]
		  pwm4.duty_cycle = 250;
 800264c:	4b30      	ldr	r3, [pc, #192]	; (8002710 <main+0x294>)
 800264e:	22fa      	movs	r2, #250	; 0xfa
 8002650:	609a      	str	r2, [r3, #8]
		  rotate_right(0, 0);
 8002652:	2100      	movs	r1, #0
 8002654:	2000      	movs	r0, #0
 8002656:	f000 fd81 	bl	800315c <rotate_right>
 800265a:	e722      	b.n	80024a2 <main+0x26>
	  }
	  else if(received_value==8)
 800265c:	4b28      	ldr	r3, [pc, #160]	; (8002700 <main+0x284>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	b21b      	sxth	r3, r3
 8002662:	2b08      	cmp	r3, #8
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <main+0x216>
	  {
		  pwm1.duty_cycle = 250;
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <main+0x288>)
 8002672:	22fa      	movs	r2, #250	; 0xfa
 8002674:	609a      	str	r2, [r3, #8]
		  pwm2.duty_cycle = 250;
 8002676:	4b24      	ldr	r3, [pc, #144]	; (8002708 <main+0x28c>)
 8002678:	22fa      	movs	r2, #250	; 0xfa
 800267a:	609a      	str	r2, [r3, #8]
		  pwm3.duty_cycle = 250;
 800267c:	4b23      	ldr	r3, [pc, #140]	; (800270c <main+0x290>)
 800267e:	22fa      	movs	r2, #250	; 0xfa
 8002680:	609a      	str	r2, [r3, #8]
		  pwm4.duty_cycle = 250;
 8002682:	4b23      	ldr	r3, [pc, #140]	; (8002710 <main+0x294>)
 8002684:	22fa      	movs	r2, #250	; 0xfa
 8002686:	609a      	str	r2, [r3, #8]
		  diagonal_left_fw(0, 0);
 8002688:	2100      	movs	r1, #0
 800268a:	2000      	movs	r0, #0
 800268c:	f000 fde0 	bl	8003250 <diagonal_left_fw>
 8002690:	e707      	b.n	80024a2 <main+0x26>
	  }
	  else if(received_value==9)
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <main+0x284>)
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b21b      	sxth	r3, r3
 8002698:	2b09      	cmp	r3, #9
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d010      	beq.n	80026c8 <main+0x24c>
	  {
		  pwm1.duty_cycle = 250;
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <main+0x288>)
 80026a8:	22fa      	movs	r2, #250	; 0xfa
 80026aa:	609a      	str	r2, [r3, #8]
		  pwm2.duty_cycle = 250;
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <main+0x28c>)
 80026ae:	22fa      	movs	r2, #250	; 0xfa
 80026b0:	609a      	str	r2, [r3, #8]
		  pwm3.duty_cycle = 250;
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <main+0x290>)
 80026b4:	22fa      	movs	r2, #250	; 0xfa
 80026b6:	609a      	str	r2, [r3, #8]
		  pwm4.duty_cycle = 250;
 80026b8:	4b15      	ldr	r3, [pc, #84]	; (8002710 <main+0x294>)
 80026ba:	22fa      	movs	r2, #250	; 0xfa
 80026bc:	609a      	str	r2, [r3, #8]
		  diagonal_left_bw(0, 0);
 80026be:	2100      	movs	r1, #0
 80026c0:	2000      	movs	r0, #0
 80026c2:	f000 fdf1 	bl	80032a8 <diagonal_left_bw>
 80026c6:	e6ec      	b.n	80024a2 <main+0x26>
	  }
	  else if(received_value==10)
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <main+0x284>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	2b0a      	cmp	r3, #10
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01f      	beq.n	800271c <main+0x2a0>
	  {
		  pwm1.duty_cycle = 250;
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <main+0x288>)
 80026de:	22fa      	movs	r2, #250	; 0xfa
 80026e0:	609a      	str	r2, [r3, #8]
		  pwm2.duty_cycle = 250;
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <main+0x28c>)
 80026e4:	22fa      	movs	r2, #250	; 0xfa
 80026e6:	609a      	str	r2, [r3, #8]
		  pwm3.duty_cycle = 250;
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <main+0x290>)
 80026ea:	22fa      	movs	r2, #250	; 0xfa
 80026ec:	609a      	str	r2, [r3, #8]
		  pwm4.duty_cycle = 250;
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <main+0x294>)
 80026f0:	22fa      	movs	r2, #250	; 0xfa
 80026f2:	609a      	str	r2, [r3, #8]
		  diagonal_right_fw(0, 0);
 80026f4:	2100      	movs	r1, #0
 80026f6:	2000      	movs	r0, #0
 80026f8:	f000 fd52 	bl	80031a0 <diagonal_right_fw>
 80026fc:	e6d1      	b.n	80024a2 <main+0x26>
 80026fe:	bf00      	nop
 8002700:	200001b0 	.word	0x200001b0
 8002704:	20000000 	.word	0x20000000
 8002708:	2000000c 	.word	0x2000000c
 800270c:	20000018 	.word	0x20000018
 8002710:	20000024 	.word	0x20000024
 8002714:	00f42400 	.word	0x00f42400
 8002718:	40020400 	.word	0x40020400
	  }
	  else if(received_value==11)
 800271c:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <main+0x31c>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	b21b      	sxth	r3, r3
 8002722:	2b0b      	cmp	r3, #11
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d010      	beq.n	8002752 <main+0x2d6>
	  {
		  pwm1.duty_cycle = 250;
 8002730:	4b1a      	ldr	r3, [pc, #104]	; (800279c <main+0x320>)
 8002732:	22fa      	movs	r2, #250	; 0xfa
 8002734:	609a      	str	r2, [r3, #8]
		  pwm2.duty_cycle = 250;
 8002736:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <main+0x324>)
 8002738:	22fa      	movs	r2, #250	; 0xfa
 800273a:	609a      	str	r2, [r3, #8]
		  pwm3.duty_cycle = 250;
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <main+0x328>)
 800273e:	22fa      	movs	r2, #250	; 0xfa
 8002740:	609a      	str	r2, [r3, #8]
		  pwm4.duty_cycle = 250;
 8002742:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <main+0x32c>)
 8002744:	22fa      	movs	r2, #250	; 0xfa
 8002746:	609a      	str	r2, [r3, #8]
		  diagonal_right_bw(0, 0);
 8002748:	2100      	movs	r1, #0
 800274a:	2000      	movs	r0, #0
 800274c:	f000 fd54 	bl	80031f8 <diagonal_right_bw>
 8002750:	e6a7      	b.n	80024a2 <main+0x26>
	  }
	  else if(received_value==12)
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <main+0x31c>)
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b21b      	sxth	r3, r3
 8002758:	2b0c      	cmp	r3, #12
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	f43f ae9d 	beq.w	80024a2 <main+0x26>
	  {
		  GPIO_Write_Pin(GPIOB, 7, GPIO_HIGH);
 8002768:	2201      	movs	r2, #1
 800276a:	2107      	movs	r1, #7
 800276c:	480f      	ldr	r0, [pc, #60]	; (80027ac <main+0x330>)
 800276e:	f7ff fe3f 	bl	80023f0 <GPIO_Write_Pin>
		  for(int i = 0; i < 1600000;i++);
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	e002      	b.n	800277e <main+0x302>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3301      	adds	r3, #1
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a0b      	ldr	r2, [pc, #44]	; (80027b0 <main+0x334>)
 8002782:	4293      	cmp	r3, r2
 8002784:	ddf8      	ble.n	8002778 <main+0x2fc>
		  GPIO_Write_Pin(GPIOB, 7, GPIO_LOW);
 8002786:	2200      	movs	r2, #0
 8002788:	2107      	movs	r1, #7
 800278a:	4808      	ldr	r0, [pc, #32]	; (80027ac <main+0x330>)
 800278c:	f7ff fe30 	bl	80023f0 <GPIO_Write_Pin>
		  received_value = 5;
 8002790:	4b01      	ldr	r3, [pc, #4]	; (8002798 <main+0x31c>)
 8002792:	2205      	movs	r2, #5
 8002794:	801a      	strh	r2, [r3, #0]
	  }

  }
 8002796:	e684      	b.n	80024a2 <main+0x26>
 8002798:	200001b0 	.word	0x200001b0
 800279c:	20000000 	.word	0x20000000
 80027a0:	2000000c 	.word	0x2000000c
 80027a4:	20000018 	.word	0x20000018
 80027a8:	20000024 	.word	0x20000024
 80027ac:	40020400 	.word	0x40020400
 80027b0:	001869ff 	.word	0x001869ff

080027b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b094      	sub	sp, #80	; 0x50
 80027b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ba:	f107 0320 	add.w	r3, r7, #32
 80027be:	2230      	movs	r2, #48	; 0x30
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f006 f903 	bl	80089ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	4b28      	ldr	r3, [pc, #160]	; (8002880 <_Z18SystemClock_Configv+0xcc>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	4a27      	ldr	r2, [pc, #156]	; (8002880 <_Z18SystemClock_Configv+0xcc>)
 80027e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6413      	str	r3, [r2, #64]	; 0x40
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <_Z18SystemClock_Configv+0xcc>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80027f4:	2300      	movs	r3, #0
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	4b22      	ldr	r3, [pc, #136]	; (8002884 <_Z18SystemClock_Configv+0xd0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002800:	4a20      	ldr	r2, [pc, #128]	; (8002884 <_Z18SystemClock_Configv+0xd0>)
 8002802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <_Z18SystemClock_Configv+0xd0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002814:	2302      	movs	r3, #2
 8002816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002818:	2301      	movs	r3, #1
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800281c:	2310      	movs	r3, #16
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002820:	2300      	movs	r3, #0
 8002822:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002824:	f107 0320 	add.w	r3, r7, #32
 8002828:	4618      	mov	r0, r3
 800282a:	f004 fa65 	bl	8006cf8 <HAL_RCC_OscConfig>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800283e:	f000 fbb7 	bl	8002fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002842:	230f      	movs	r3, #15
 8002844:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002856:	f107 030c 	add.w	r3, r7, #12
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f004 fcc3 	bl	80071e8 <HAL_RCC_ClockConfig>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf14      	ite	ne
 8002868:	2301      	movne	r3, #1
 800286a:	2300      	moveq	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8002872:	f000 fb9d 	bl	8002fb0 <Error_Handler>
  }
}
 8002876:	bf00      	nop
 8002878:	3750      	adds	r7, #80	; 0x50
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40007000 	.word	0x40007000

08002888 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800288c:	4b13      	ldr	r3, [pc, #76]	; (80028dc <_ZL19MX_USART1_UART_Initv+0x54>)
 800288e:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <_ZL19MX_USART1_UART_Initv+0x54>)
 8002894:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <_ZL19MX_USART1_UART_Initv+0x54>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <_ZL19MX_USART1_UART_Initv+0x54>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028a6:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <_ZL19MX_USART1_UART_Initv+0x54>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <_ZL19MX_USART1_UART_Initv+0x54>)
 80028ae:	220c      	movs	r2, #12
 80028b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <_ZL19MX_USART1_UART_Initv+0x54>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <_ZL19MX_USART1_UART_Initv+0x54>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028be:	4807      	ldr	r0, [pc, #28]	; (80028dc <_ZL19MX_USART1_UART_Initv+0x54>)
 80028c0:	f004 fe70 	bl	80075a4 <HAL_UART_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bf14      	ite	ne
 80028ca:	2301      	movne	r3, #1
 80028cc:	2300      	moveq	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80028d4:	f000 fb6c 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	200000ac 	.word	0x200000ac
 80028e0:	40011000 	.word	0x40011000

080028e4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <_ZL11MX_DMA_Initv+0x4c>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a0f      	ldr	r2, [pc, #60]	; (8002930 <_ZL11MX_DMA_Initv+0x4c>)
 80028f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <_ZL11MX_DMA_Initv+0x4c>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002906:	2200      	movs	r2, #0
 8002908:	2100      	movs	r1, #0
 800290a:	203a      	movs	r0, #58	; 0x3a
 800290c:	f003 fbf3 	bl	80060f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002910:	203a      	movs	r0, #58	; 0x3a
 8002912:	f003 fc0c 	bl	800612e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	2046      	movs	r0, #70	; 0x46
 800291c:	f003 fbeb 	bl	80060f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002920:	2046      	movs	r0, #70	; 0x46
 8002922:	f003 fc04 	bl	800612e <HAL_NVIC_EnableIRQ>

}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800

08002934 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <_ZL12MX_GPIO_Initv+0x110>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a3c      	ldr	r2, [pc, #240]	; (8002a44 <_ZL12MX_GPIO_Initv+0x110>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b3a      	ldr	r3, [pc, #232]	; (8002a44 <_ZL12MX_GPIO_Initv+0x110>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <_ZL12MX_GPIO_Initv+0x110>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a35      	ldr	r2, [pc, #212]	; (8002a44 <_ZL12MX_GPIO_Initv+0x110>)
 8002970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b33      	ldr	r3, [pc, #204]	; (8002a44 <_ZL12MX_GPIO_Initv+0x110>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	4b2f      	ldr	r3, [pc, #188]	; (8002a44 <_ZL12MX_GPIO_Initv+0x110>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a2e      	ldr	r2, [pc, #184]	; (8002a44 <_ZL12MX_GPIO_Initv+0x110>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <_ZL12MX_GPIO_Initv+0x110>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <_ZL12MX_GPIO_Initv+0x110>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <_ZL12MX_GPIO_Initv+0x110>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <_ZL12MX_GPIO_Initv+0x110>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80029ba:	2201      	movs	r2, #1
 80029bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029c0:	4821      	ldr	r0, [pc, #132]	; (8002a48 <_ZL12MX_GPIO_Initv+0x114>)
 80029c2:	f004 f94f 	bl	8006c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80029c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029cc:	2301      	movs	r3, #1
 80029ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	4619      	mov	r1, r3
 80029de:	481a      	ldr	r0, [pc, #104]	; (8002a48 <_ZL12MX_GPIO_Initv+0x114>)
 80029e0:	f003 ffbe 	bl	8006960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_8;
 80029e4:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 80029e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80029ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029f0:	2301      	movs	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	4814      	ldr	r0, [pc, #80]	; (8002a4c <_ZL12MX_GPIO_Initv+0x118>)
 80029fc:	f003 ffb0 	bl	8006960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4619      	mov	r1, r3
 8002a16:	480e      	ldr	r0, [pc, #56]	; (8002a50 <_ZL12MX_GPIO_Initv+0x11c>)
 8002a18:	f003 ffa2 	bl	8006960 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2017      	movs	r0, #23
 8002a22:	f003 fb68 	bl	80060f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a26:	2017      	movs	r0, #23
 8002a28:	f003 fb81 	bl	800612e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2100      	movs	r1, #0
 8002a30:	2028      	movs	r0, #40	; 0x28
 8002a32:	f003 fb60 	bl	80060f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a36:	2028      	movs	r0, #40	; 0x28
 8002a38:	f003 fb79 	bl	800612e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a3c:	bf00      	nop
 8002a3e:	3728      	adds	r7, #40	; 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40020800 	.word	0x40020800
 8002a4c:	40020400 	.word	0x40020400
 8002a50:	40020000 	.word	0x40020000
 8002a54:	00000000 	.word	0x00000000

08002a58 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8)
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a68:	d156      	bne.n	8002b18 <HAL_GPIO_EXTI_Callback+0xc0>
	{
		if(GPIO_Read_Pin(GPIOB, 9) == 0)
 8002a6a:	2109      	movs	r1, #9
 8002a6c:	489e      	ldr	r0, [pc, #632]	; (8002ce8 <HAL_GPIO_EXTI_Callback+0x290>)
 8002a6e:	f7ff fce9 	bl	8002444 <GPIO_Read_Pin>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01d      	beq.n	8002abe <HAL_GPIO_EXTI_Callback+0x66>
		{
			position1++;
 8002a82:	4b9a      	ldr	r3, [pc, #616]	; (8002cec <HAL_GPIO_EXTI_Callback+0x294>)
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b21b      	sxth	r3, r3
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	b21a      	sxth	r2, r3
 8002a90:	4b96      	ldr	r3, [pc, #600]	; (8002cec <HAL_GPIO_EXTI_Callback+0x294>)
 8002a92:	801a      	strh	r2, [r3, #0]
			speed1 = 1000.0/(c_millis - prev_t1);
 8002a94:	4b96      	ldr	r3, [pc, #600]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x298>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b96      	ldr	r3, [pc, #600]	; (8002cf4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd fce4 	bl	800046c <__aeabi_ui2d>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	f04f 0000 	mov.w	r0, #0
 8002aac:	4992      	ldr	r1, [pc, #584]	; (8002cf8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002aae:	f7fd fe81 	bl	80007b4 <__aeabi_ddiv>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4991      	ldr	r1, [pc, #580]	; (8002cfc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002ab8:	e9c1 2300 	strd	r2, r3, [r1]
 8002abc:	e028      	b.n	8002b10 <HAL_GPIO_EXTI_Callback+0xb8>
		}
		else if(GPIO_Read_Pin(GPIOB, 9) == 1)
 8002abe:	2109      	movs	r1, #9
 8002ac0:	4889      	ldr	r0, [pc, #548]	; (8002ce8 <HAL_GPIO_EXTI_Callback+0x290>)
 8002ac2:	f7ff fcbf 	bl	8002444 <GPIO_Read_Pin>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01c      	beq.n	8002b10 <HAL_GPIO_EXTI_Callback+0xb8>
		{
			position1--;
 8002ad6:	4b85      	ldr	r3, [pc, #532]	; (8002cec <HAL_GPIO_EXTI_Callback+0x294>)
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	b21b      	sxth	r3, r3
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	b21a      	sxth	r2, r3
 8002ae4:	4b81      	ldr	r3, [pc, #516]	; (8002cec <HAL_GPIO_EXTI_Callback+0x294>)
 8002ae6:	801a      	strh	r2, [r3, #0]
			speed1 = -1000.0/(c_millis - prev_t1);
 8002ae8:	4b81      	ldr	r3, [pc, #516]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x298>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4b81      	ldr	r3, [pc, #516]	; (8002cf4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd fcba 	bl	800046c <__aeabi_ui2d>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	a178      	add	r1, pc, #480	; (adr r1, 8002ce0 <HAL_GPIO_EXTI_Callback+0x288>)
 8002afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b02:	f7fd fe57 	bl	80007b4 <__aeabi_ddiv>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	497c      	ldr	r1, [pc, #496]	; (8002cfc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002b0c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		prev_t1 = c_millis;
 8002b10:	4b77      	ldr	r3, [pc, #476]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x298>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a77      	ldr	r2, [pc, #476]	; (8002cf4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8002b16:	6013      	str	r3, [r2, #0]
	}

	if(GPIO_Pin == GPIO_PIN_11)
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b1e:	d156      	bne.n	8002bce <HAL_GPIO_EXTI_Callback+0x176>
	{
		if(GPIO_Read_Pin(GPIOA, 12) == 0)
 8002b20:	210c      	movs	r1, #12
 8002b22:	4877      	ldr	r0, [pc, #476]	; (8002d00 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002b24:	f7ff fc8e 	bl	8002444 <GPIO_Read_Pin>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf0c      	ite	eq
 8002b2e:	2301      	moveq	r3, #1
 8002b30:	2300      	movne	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01d      	beq.n	8002b74 <HAL_GPIO_EXTI_Callback+0x11c>
		{
			position2++;
 8002b38:	4b72      	ldr	r3, [pc, #456]	; (8002d04 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b21b      	sxth	r3, r3
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	b21a      	sxth	r2, r3
 8002b46:	4b6f      	ldr	r3, [pc, #444]	; (8002d04 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002b48:	801a      	strh	r2, [r3, #0]
			speed2 = 1000.0/(c_millis - prev_t2);
 8002b4a:	4b69      	ldr	r3, [pc, #420]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x298>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b6e      	ldr	r3, [pc, #440]	; (8002d08 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fc89 	bl	800046c <__aeabi_ui2d>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	f04f 0000 	mov.w	r0, #0
 8002b62:	4965      	ldr	r1, [pc, #404]	; (8002cf8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002b64:	f7fd fe26 	bl	80007b4 <__aeabi_ddiv>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4967      	ldr	r1, [pc, #412]	; (8002d0c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002b6e:	e9c1 2300 	strd	r2, r3, [r1]
 8002b72:	e028      	b.n	8002bc6 <HAL_GPIO_EXTI_Callback+0x16e>
		}
		else if(GPIO_Read_Pin(GPIOA, 12) == 1)
 8002b74:	210c      	movs	r1, #12
 8002b76:	4862      	ldr	r0, [pc, #392]	; (8002d00 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002b78:	f7ff fc64 	bl	8002444 <GPIO_Read_Pin>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01c      	beq.n	8002bc6 <HAL_GPIO_EXTI_Callback+0x16e>
		{
			position2--;
 8002b8c:	4b5d      	ldr	r3, [pc, #372]	; (8002d04 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	b21a      	sxth	r2, r3
 8002b9a:	4b5a      	ldr	r3, [pc, #360]	; (8002d04 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002b9c:	801a      	strh	r2, [r3, #0]
			speed2 = -1000.0/(c_millis - prev_t2);
 8002b9e:	4b54      	ldr	r3, [pc, #336]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x298>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd fc5f 	bl	800046c <__aeabi_ui2d>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	a14b      	add	r1, pc, #300	; (adr r1, 8002ce0 <HAL_GPIO_EXTI_Callback+0x288>)
 8002bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bb8:	f7fd fdfc 	bl	80007b4 <__aeabi_ddiv>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4952      	ldr	r1, [pc, #328]	; (8002d0c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002bc2:	e9c1 2300 	strd	r2, r3, [r1]
		}
		prev_t2 = c_millis;
 8002bc6:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x298>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a4f      	ldr	r2, [pc, #316]	; (8002d08 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002bcc:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin == GPIO_PIN_10)
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd4:	d156      	bne.n	8002c84 <HAL_GPIO_EXTI_Callback+0x22c>
	{
		if(GPIO_Read_Pin(GPIOB, 0) == 0)
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4843      	ldr	r0, [pc, #268]	; (8002ce8 <HAL_GPIO_EXTI_Callback+0x290>)
 8002bda:	f7ff fc33 	bl	8002444 <GPIO_Read_Pin>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01d      	beq.n	8002c2a <HAL_GPIO_EXTI_Callback+0x1d2>
		{
			position3--;
 8002bee:	4b48      	ldr	r3, [pc, #288]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	b21a      	sxth	r2, r3
 8002bfc:	4b44      	ldr	r3, [pc, #272]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002bfe:	801a      	strh	r2, [r3, #0]
			speed3 = -1.0*1000.0/(c_millis - prev_t3);
 8002c00:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x298>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b43      	ldr	r3, [pc, #268]	; (8002d14 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fc2e 	bl	800046c <__aeabi_ui2d>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	a132      	add	r1, pc, #200	; (adr r1, 8002ce0 <HAL_GPIO_EXTI_Callback+0x288>)
 8002c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c1a:	f7fd fdcb 	bl	80007b4 <__aeabi_ddiv>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	493d      	ldr	r1, [pc, #244]	; (8002d18 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002c24:	e9c1 2300 	strd	r2, r3, [r1]
 8002c28:	e028      	b.n	8002c7c <HAL_GPIO_EXTI_Callback+0x224>
		}
		else if(GPIO_Read_Pin(GPIOB, 0) == 1)
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	482e      	ldr	r0, [pc, #184]	; (8002ce8 <HAL_GPIO_EXTI_Callback+0x290>)
 8002c2e:	f7ff fc09 	bl	8002444 <GPIO_Read_Pin>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01c      	beq.n	8002c7c <HAL_GPIO_EXTI_Callback+0x224>
		{
			position3++;
 8002c42:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	b21b      	sxth	r3, r3
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	b21a      	sxth	r2, r3
 8002c50:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002c52:	801a      	strh	r2, [r3, #0]
			speed3 = 1000.0/(c_millis - prev_t3);
 8002c54:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x298>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b2e      	ldr	r3, [pc, #184]	; (8002d14 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fc04 	bl	800046c <__aeabi_ui2d>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	f04f 0000 	mov.w	r0, #0
 8002c6c:	4922      	ldr	r1, [pc, #136]	; (8002cf8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002c6e:	f7fd fda1 	bl	80007b4 <__aeabi_ddiv>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4928      	ldr	r1, [pc, #160]	; (8002d18 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002c78:	e9c1 2300 	strd	r2, r3, [r1]
		}
		prev_t3 = c_millis;
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x298>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002c82:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin == GPIO_PIN_13)
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8a:	d17a      	bne.n	8002d82 <HAL_GPIO_EXTI_Callback+0x32a>
	{
		if(GPIO_Read_Pin(GPIOB, 14) == 0)
 8002c8c:	210e      	movs	r1, #14
 8002c8e:	4816      	ldr	r0, [pc, #88]	; (8002ce8 <HAL_GPIO_EXTI_Callback+0x290>)
 8002c90:	f7ff fbd8 	bl	8002444 <GPIO_Read_Pin>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d041      	beq.n	8002d28 <HAL_GPIO_EXTI_Callback+0x2d0>
		{
			position4--;
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	b21b      	sxth	r3, r3
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	b21a      	sxth	r2, r3
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002cb4:	801a      	strh	r2, [r3, #0]
			speed4 = -1000.0/(c_millis - prev_t4);
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x298>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fbd3 	bl	800046c <__aeabi_ui2d>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	a105      	add	r1, pc, #20	; (adr r1, 8002ce0 <HAL_GPIO_EXTI_Callback+0x288>)
 8002ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cd0:	f7fd fd70 	bl	80007b4 <__aeabi_ddiv>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4912      	ldr	r1, [pc, #72]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002cda:	e9c1 2300 	strd	r2, r3, [r1]
 8002cde:	e04c      	b.n	8002d7a <HAL_GPIO_EXTI_Callback+0x322>
 8002ce0:	00000000 	.word	0x00000000
 8002ce4:	c08f4000 	.word	0xc08f4000
 8002ce8:	40020400 	.word	0x40020400
 8002cec:	200001b2 	.word	0x200001b2
 8002cf0:	200001bc 	.word	0x200001bc
 8002cf4:	200001c0 	.word	0x200001c0
 8002cf8:	408f4000 	.word	0x408f4000
 8002cfc:	200001d0 	.word	0x200001d0
 8002d00:	40020000 	.word	0x40020000
 8002d04:	200001b4 	.word	0x200001b4
 8002d08:	200001c4 	.word	0x200001c4
 8002d0c:	200001d8 	.word	0x200001d8
 8002d10:	200001b6 	.word	0x200001b6
 8002d14:	200001c8 	.word	0x200001c8
 8002d18:	200001e0 	.word	0x200001e0
 8002d1c:	200001b8 	.word	0x200001b8
 8002d20:	200001cc 	.word	0x200001cc
 8002d24:	200001e8 	.word	0x200001e8
		}
		else if(GPIO_Read_Pin(GPIOB, 14) == 1)
 8002d28:	210e      	movs	r1, #14
 8002d2a:	4818      	ldr	r0, [pc, #96]	; (8002d8c <HAL_GPIO_EXTI_Callback+0x334>)
 8002d2c:	f7ff fb8a 	bl	8002444 <GPIO_Read_Pin>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01c      	beq.n	8002d7a <HAL_GPIO_EXTI_Callback+0x322>
		{
			position4++;
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_GPIO_EXTI_Callback+0x338>)
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	b21b      	sxth	r3, r3
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	b21a      	sxth	r2, r3
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <HAL_GPIO_EXTI_Callback+0x338>)
 8002d50:	801a      	strh	r2, [r3, #0]
			speed4 = 1000.0/(c_millis - prev_t4);
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_GPIO_EXTI_Callback+0x33c>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <HAL_GPIO_EXTI_Callback+0x340>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fb85 	bl	800046c <__aeabi_ui2d>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	f04f 0000 	mov.w	r0, #0
 8002d6a:	490c      	ldr	r1, [pc, #48]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x344>)
 8002d6c:	f7fd fd22 	bl	80007b4 <__aeabi_ddiv>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	490a      	ldr	r1, [pc, #40]	; (8002da0 <HAL_GPIO_EXTI_Callback+0x348>)
 8002d76:	e9c1 2300 	strd	r2, r3, [r1]
		}
		prev_t4 = c_millis;
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_GPIO_EXTI_Callback+0x33c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a06      	ldr	r2, [pc, #24]	; (8002d98 <HAL_GPIO_EXTI_Callback+0x340>)
 8002d80:	6013      	str	r3, [r2, #0]
	}
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	200001b8 	.word	0x200001b8
 8002d94:	200001bc 	.word	0x200001bc
 8002d98:	200001cc 	.word	0x200001cc
 8002d9c:	408f4000 	.word	0x408f4000
 8002da0:	200001e8 	.word	0x200001e8

08002da4 <_Z9pins_initv>:


void pins_init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b0a4      	sub	sp, #144	; 0x90
 8002da8:	af00      	add	r7, sp, #0
	GPIOA_ENABLE();
 8002daa:	4b4c      	ldr	r3, [pc, #304]	; (8002edc <_Z9pins_initv+0x138>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4a4b      	ldr	r2, [pc, #300]	; (8002edc <_Z9pins_initv+0x138>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB_ENABLE();
 8002db6:	4b49      	ldr	r3, [pc, #292]	; (8002edc <_Z9pins_initv+0x138>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a48      	ldr	r2, [pc, #288]	; (8002edc <_Z9pins_initv+0x138>)
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
	Pin_cfg direction_1 = {0};
 8002dc2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	60da      	str	r2, [r3, #12]
 8002dd0:	611a      	str	r2, [r3, #16]
 8002dd2:	615a      	str	r2, [r3, #20]
 8002dd4:	619a      	str	r2, [r3, #24]
	direction_1.Gpio = GPIOB;
 8002dd6:	4b42      	ldr	r3, [pc, #264]	; (8002ee0 <_Z9pins_initv+0x13c>)
 8002dd8:	677b      	str	r3, [r7, #116]	; 0x74
	direction_1.mode = Output;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
	direction_1.outSpeed = HighSpeed;
 8002dde:	2302      	movs	r3, #2
 8002de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	direction_1.outType = PushPull;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	direction_1.pin_no = 1;
 8002dea:	2301      	movs	r3, #1
 8002dec:	67bb      	str	r3, [r7, #120]	; 0x78
	direction_1.pull = None;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	GPIO_Init(&direction_1);
 8002df4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fa21 	bl	8002240 <GPIO_Init>

	Pin_cfg direction_2 = {0};
 8002dfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	60da      	str	r2, [r3, #12]
 8002e0c:	611a      	str	r2, [r3, #16]
 8002e0e:	615a      	str	r2, [r3, #20]
 8002e10:	619a      	str	r2, [r3, #24]
	direction_2.Gpio = GPIOB;
 8002e12:	4b33      	ldr	r3, [pc, #204]	; (8002ee0 <_Z9pins_initv+0x13c>)
 8002e14:	65bb      	str	r3, [r7, #88]	; 0x58
	direction_2.mode = Output;
 8002e16:	2301      	movs	r3, #1
 8002e18:	663b      	str	r3, [r7, #96]	; 0x60
	direction_2.outSpeed = HighSpeed;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	66bb      	str	r3, [r7, #104]	; 0x68
	direction_2.outType = PushPull;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	667b      	str	r3, [r7, #100]	; 0x64
	direction_2.pin_no = 2;
 8002e22:	2302      	movs	r3, #2
 8002e24:	65fb      	str	r3, [r7, #92]	; 0x5c
	direction_2.pull = None;
 8002e26:	2300      	movs	r3, #0
 8002e28:	66fb      	str	r3, [r7, #108]	; 0x6c
	GPIO_Init(&direction_2);
 8002e2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fa06 	bl	8002240 <GPIO_Init>

	Pin_cfg direction_3 = {0};
 8002e34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
 8002e44:	615a      	str	r2, [r3, #20]
 8002e46:	619a      	str	r2, [r3, #24]
	direction_3.Gpio = GPIOB;
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <_Z9pins_initv+0x13c>)
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	direction_3.mode = Output;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	647b      	str	r3, [r7, #68]	; 0x44
	direction_3.outSpeed = HighSpeed;
 8002e50:	2302      	movs	r3, #2
 8002e52:	64fb      	str	r3, [r7, #76]	; 0x4c
	direction_3.outType = PushPull;
 8002e54:	2300      	movs	r3, #0
 8002e56:	64bb      	str	r3, [r7, #72]	; 0x48
	direction_3.pin_no = 3;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	643b      	str	r3, [r7, #64]	; 0x40
	direction_3.pull = None;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_Init(&direction_3);
 8002e60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff f9eb 	bl	8002240 <GPIO_Init>

	Pin_cfg direction_4 = {0};
 8002e6a:	f107 0320 	add.w	r3, r7, #32
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	60da      	str	r2, [r3, #12]
 8002e78:	611a      	str	r2, [r3, #16]
 8002e7a:	615a      	str	r2, [r3, #20]
 8002e7c:	619a      	str	r2, [r3, #24]
	direction_4.Gpio = GPIOB;
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <_Z9pins_initv+0x13c>)
 8002e80:	623b      	str	r3, [r7, #32]
	direction_4.mode = Output;
 8002e82:	2301      	movs	r3, #1
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
	direction_4.outSpeed = HighSpeed;
 8002e86:	2302      	movs	r3, #2
 8002e88:	633b      	str	r3, [r7, #48]	; 0x30
	direction_4.outType = PushPull;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	direction_4.pin_no = 4;
 8002e8e:	2304      	movs	r3, #4
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
	direction_4.pull = None;
 8002e92:	2300      	movs	r3, #0
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_Init(&direction_4);
 8002e96:	f107 0320 	add.w	r3, r7, #32
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff f9d0 	bl	8002240 <GPIO_Init>

	Pin_cfg arduino1 = {0};
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	611a      	str	r2, [r3, #16]
 8002eae:	615a      	str	r2, [r3, #20]
 8002eb0:	619a      	str	r2, [r3, #24]
	arduino1.Gpio = GPIOB;
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <_Z9pins_initv+0x13c>)
 8002eb4:	607b      	str	r3, [r7, #4]
	arduino1.mode = Output;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
	arduino1.outSpeed = HighSpeed;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	617b      	str	r3, [r7, #20]
	arduino1.outType = PushPull;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
	arduino1.pin_no = 7;
 8002ec2:	2307      	movs	r3, #7
 8002ec4:	60bb      	str	r3, [r7, #8]
	arduino1.pull = None;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
	GPIO_Init(&arduino1);
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff f9b7 	bl	8002240 <GPIO_Init>


}
 8002ed2:	bf00      	nop
 8002ed4:	3790      	adds	r7, #144	; 0x90
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40020400 	.word	0x40020400

08002ee4 <_Z7ext_pinv>:

void ext_pin(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b09c      	sub	sp, #112	; 0x70
 8002ee8:	af00      	add	r7, sp, #0
//	ext_pin2.mode = Input;
//	ext_pin2.pin_no = 9;
//	ext_pin2.pull = PullUp;
//	GPIO_Init(&ext_pin2);

	Pin_cfg ext_pin1 = {0};
 8002eea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]
 8002efa:	615a      	str	r2, [r3, #20]
 8002efc:	619a      	str	r2, [r3, #24]
	ext_pin1.Gpio = GPIOB;
 8002efe:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <_Z7ext_pinv+0xc4>)
 8002f00:	657b      	str	r3, [r7, #84]	; 0x54
	ext_pin1.mode = Input;
 8002f02:	2300      	movs	r3, #0
 8002f04:	65fb      	str	r3, [r7, #92]	; 0x5c
	ext_pin1.pin_no = 9;
 8002f06:	2309      	movs	r3, #9
 8002f08:	65bb      	str	r3, [r7, #88]	; 0x58
	ext_pin1.pull = PullUp;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	66bb      	str	r3, [r7, #104]	; 0x68
	GPIO_Init(&ext_pin1);
 8002f0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff f994 	bl	8002240 <GPIO_Init>

	Pin_cfg ext_pin2 = {0};
 8002f18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
 8002f28:	615a      	str	r2, [r3, #20]
 8002f2a:	619a      	str	r2, [r3, #24]
	ext_pin2.Gpio = GPIOA;
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <_Z7ext_pinv+0xc8>)
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
	ext_pin2.mode = Input;
 8002f30:	2300      	movs	r3, #0
 8002f32:	643b      	str	r3, [r7, #64]	; 0x40
	ext_pin2.pin_no = 12;
 8002f34:	230c      	movs	r3, #12
 8002f36:	63fb      	str	r3, [r7, #60]	; 0x3c
    ext_pin2.pull = PullUp;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_Init(&ext_pin2);
 8002f3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff f97d 	bl	8002240 <GPIO_Init>

	Pin_cfg ext_pin3 = {0};
 8002f46:	f107 031c 	add.w	r3, r7, #28
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	60da      	str	r2, [r3, #12]
 8002f54:	611a      	str	r2, [r3, #16]
 8002f56:	615a      	str	r2, [r3, #20]
 8002f58:	619a      	str	r2, [r3, #24]
	ext_pin3.Gpio = GPIOB;
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <_Z7ext_pinv+0xc4>)
 8002f5c:	61fb      	str	r3, [r7, #28]
	ext_pin3.mode = Input;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
	ext_pin3.pin_no = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	623b      	str	r3, [r7, #32]
	ext_pin3.pull = PullUp;
 8002f66:	2301      	movs	r3, #1
 8002f68:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_Init(&ext_pin3);
 8002f6a:	f107 031c 	add.w	r3, r7, #28
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff f966 	bl	8002240 <GPIO_Init>

	Pin_cfg ext_pin4 = {0};
 8002f74:	463b      	mov	r3, r7
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	60da      	str	r2, [r3, #12]
 8002f80:	611a      	str	r2, [r3, #16]
 8002f82:	615a      	str	r2, [r3, #20]
 8002f84:	619a      	str	r2, [r3, #24]
	ext_pin4.Gpio = GPIOB;
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <_Z7ext_pinv+0xc4>)
 8002f88:	603b      	str	r3, [r7, #0]
	ext_pin4.mode = Input;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
	ext_pin4.pin_no = 14;
 8002f8e:	230e      	movs	r3, #14
 8002f90:	607b      	str	r3, [r7, #4]
	ext_pin4.pull = PullUp;
 8002f92:	2301      	movs	r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
	GPIO_Init(&ext_pin4);
 8002f96:	463b      	mov	r3, r7
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff f951 	bl	8002240 <GPIO_Init>
}
 8002f9e:	bf00      	nop
 8002fa0:	3770      	adds	r7, #112	; 0x70
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40020400 	.word	0x40020400
 8002fac:	40020000 	.word	0x40020000

08002fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb4:	b672      	cpsid	i
}
 8002fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <Error_Handler+0x8>
	...

08002fbc <pwm_>:
extern PWM_config pwm4;

int read = 0;

static void pwm_(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	//M1
	PWM_GEN(TIM2, &pwm1, 16000000);
 8002fc0:	4a0c      	ldr	r2, [pc, #48]	; (8002ff4 <pwm_+0x38>)
 8002fc2:	490d      	ldr	r1, [pc, #52]	; (8002ff8 <pwm_+0x3c>)
 8002fc4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002fc8:	f7fd fe7a 	bl	8000cc0 <PWM_GEN>
	//M2
	PWM_GEN(TIM2, &pwm2, 16000000);
 8002fcc:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <pwm_+0x38>)
 8002fce:	490b      	ldr	r1, [pc, #44]	; (8002ffc <pwm_+0x40>)
 8002fd0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002fd4:	f7fd fe74 	bl	8000cc0 <PWM_GEN>
	//M3
	PWM_GEN(TIM2, &pwm3, 16000000);
 8002fd8:	4a06      	ldr	r2, [pc, #24]	; (8002ff4 <pwm_+0x38>)
 8002fda:	4909      	ldr	r1, [pc, #36]	; (8003000 <pwm_+0x44>)
 8002fdc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002fe0:	f7fd fe6e 	bl	8000cc0 <PWM_GEN>
	//M4
	PWM_GEN(TIM2, &pwm4, 16000000);
 8002fe4:	4a03      	ldr	r2, [pc, #12]	; (8002ff4 <pwm_+0x38>)
 8002fe6:	4907      	ldr	r1, [pc, #28]	; (8003004 <pwm_+0x48>)
 8002fe8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002fec:	f7fd fe68 	bl	8000cc0 <PWM_GEN>
}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	00f42400 	.word	0x00f42400
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	2000000c 	.word	0x2000000c
 8003000:	20000018 	.word	0x20000018
 8003004:	20000024 	.word	0x20000024

08003008 <backward>:

void backward(int target, int position)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]

	//M2 and M4 same direciton
	GPIO_Write_Pin(GPIOB, 3, GPIO_HIGH);
 8003012:	2201      	movs	r2, #1
 8003014:	2103      	movs	r1, #3
 8003016:	480c      	ldr	r0, [pc, #48]	; (8003048 <backward+0x40>)
 8003018:	f7ff f9ea 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 4, GPIO_HIGH);
 800301c:	2201      	movs	r2, #1
 800301e:	2104      	movs	r1, #4
 8003020:	4809      	ldr	r0, [pc, #36]	; (8003048 <backward+0x40>)
 8003022:	f7ff f9e5 	bl	80023f0 <GPIO_Write_Pin>
	//M1 and M3 same direction
	GPIO_Write_Pin(GPIOB, 1, GPIO_LOW);
 8003026:	2200      	movs	r2, #0
 8003028:	2101      	movs	r1, #1
 800302a:	4807      	ldr	r0, [pc, #28]	; (8003048 <backward+0x40>)
 800302c:	f7ff f9e0 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 2, GPIO_LOW);
 8003030:	2200      	movs	r2, #0
 8003032:	2102      	movs	r1, #2
 8003034:	4804      	ldr	r0, [pc, #16]	; (8003048 <backward+0x40>)
 8003036:	f7ff f9db 	bl	80023f0 <GPIO_Write_Pin>
//	pwm1.duty_cycle = read;
////	pwm2.duty_cycle = read;
////	pwm3.duty_cycle = read;
////	pwm4.duty_cycle = read;
//
	pwm_();
 800303a:	f7ff ffbf 	bl	8002fbc <pwm_>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40020400 	.word	0x40020400

0800304c <forward>:
void forward(int target, int position)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
	//M2 and M4 same direciton
	GPIO_Write_Pin(GPIOB, 3, GPIO_LOW);
 8003056:	2200      	movs	r2, #0
 8003058:	2103      	movs	r1, #3
 800305a:	480c      	ldr	r0, [pc, #48]	; (800308c <forward+0x40>)
 800305c:	f7ff f9c8 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 4, GPIO_LOW);
 8003060:	2200      	movs	r2, #0
 8003062:	2104      	movs	r1, #4
 8003064:	4809      	ldr	r0, [pc, #36]	; (800308c <forward+0x40>)
 8003066:	f7ff f9c3 	bl	80023f0 <GPIO_Write_Pin>
	//M1 and M3 same direction
	GPIO_Write_Pin(GPIOB, 1, GPIO_HIGH);
 800306a:	2201      	movs	r2, #1
 800306c:	2101      	movs	r1, #1
 800306e:	4807      	ldr	r0, [pc, #28]	; (800308c <forward+0x40>)
 8003070:	f7ff f9be 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 2, GPIO_HIGH);
 8003074:	2201      	movs	r2, #1
 8003076:	2102      	movs	r1, #2
 8003078:	4804      	ldr	r0, [pc, #16]	; (800308c <forward+0x40>)
 800307a:	f7ff f9b9 	bl	80023f0 <GPIO_Write_Pin>
//	pwm1.duty_cycle = read;
////	pwm2.duty_cycle = read;
////	pwm3.duty_cycle = read;
////	pwm4.duty_cycle = read;
//
	pwm_();
 800307e:	f7ff ff9d 	bl	8002fbc <pwm_>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40020400 	.word	0x40020400

08003090 <side_left>:

void side_left(int target, int position)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
	//M2 and M1 same direciton
	GPIO_Write_Pin(GPIOB, 1, GPIO_HIGH);
 800309a:	2201      	movs	r2, #1
 800309c:	2101      	movs	r1, #1
 800309e:	480c      	ldr	r0, [pc, #48]	; (80030d0 <side_left+0x40>)
 80030a0:	f7ff f9a6 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 4, GPIO_HIGH);
 80030a4:	2201      	movs	r2, #1
 80030a6:	2104      	movs	r1, #4
 80030a8:	4809      	ldr	r0, [pc, #36]	; (80030d0 <side_left+0x40>)
 80030aa:	f7ff f9a1 	bl	80023f0 <GPIO_Write_Pin>
	//M4 and M3 same direction
	GPIO_Write_Pin(GPIOB, 3, GPIO_HIGH);
 80030ae:	2201      	movs	r2, #1
 80030b0:	2103      	movs	r1, #3
 80030b2:	4807      	ldr	r0, [pc, #28]	; (80030d0 <side_left+0x40>)
 80030b4:	f7ff f99c 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 2, GPIO_HIGH);
 80030b8:	2201      	movs	r2, #1
 80030ba:	2102      	movs	r1, #2
 80030bc:	4804      	ldr	r0, [pc, #16]	; (80030d0 <side_left+0x40>)
 80030be:	f7ff f997 	bl	80023f0 <GPIO_Write_Pin>
//	pwm1.duty_cycle = read;
////	pwm2.duty_cycle = read;
////	pwm3.duty_cycle = read;
////	pwm4.duty_cycle = read;
//
	pwm_();
 80030c2:	f7ff ff7b 	bl	8002fbc <pwm_>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40020400 	.word	0x40020400

080030d4 <side_right>:

void side_right(int target, int position)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
	//M2 and M1 same direciton
	GPIO_Write_Pin(GPIOB, 1, GPIO_LOW);
 80030de:	2200      	movs	r2, #0
 80030e0:	2101      	movs	r1, #1
 80030e2:	480c      	ldr	r0, [pc, #48]	; (8003114 <side_right+0x40>)
 80030e4:	f7ff f984 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 4, GPIO_LOW);
 80030e8:	2200      	movs	r2, #0
 80030ea:	2104      	movs	r1, #4
 80030ec:	4809      	ldr	r0, [pc, #36]	; (8003114 <side_right+0x40>)
 80030ee:	f7ff f97f 	bl	80023f0 <GPIO_Write_Pin>
	//M4 and M3 same direction
	GPIO_Write_Pin(GPIOB, 3, GPIO_LOW);
 80030f2:	2200      	movs	r2, #0
 80030f4:	2103      	movs	r1, #3
 80030f6:	4807      	ldr	r0, [pc, #28]	; (8003114 <side_right+0x40>)
 80030f8:	f7ff f97a 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 2, GPIO_LOW);
 80030fc:	2200      	movs	r2, #0
 80030fe:	2102      	movs	r1, #2
 8003100:	4804      	ldr	r0, [pc, #16]	; (8003114 <side_right+0x40>)
 8003102:	f7ff f975 	bl	80023f0 <GPIO_Write_Pin>
//	pwm1.duty_cycle = read;
////	pwm2.duty_cycle = read;
////	pwm3.duty_cycle = read;
////	pwm4.duty_cycle = read;
//
	pwm_();
 8003106:	f7ff ff59 	bl	8002fbc <pwm_>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40020400 	.word	0x40020400

08003118 <rotate_left>:

void rotate_left(int target, int position)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
	//all same direciton
	GPIO_Write_Pin(GPIOB, 1, GPIO_LOW);
 8003122:	2200      	movs	r2, #0
 8003124:	2101      	movs	r1, #1
 8003126:	480c      	ldr	r0, [pc, #48]	; (8003158 <rotate_left+0x40>)
 8003128:	f7ff f962 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 4, GPIO_LOW);
 800312c:	2200      	movs	r2, #0
 800312e:	2104      	movs	r1, #4
 8003130:	4809      	ldr	r0, [pc, #36]	; (8003158 <rotate_left+0x40>)
 8003132:	f7ff f95d 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 3, GPIO_HIGH);
 8003136:	2201      	movs	r2, #1
 8003138:	2103      	movs	r1, #3
 800313a:	4807      	ldr	r0, [pc, #28]	; (8003158 <rotate_left+0x40>)
 800313c:	f7ff f958 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 2, GPIO_HIGH);
 8003140:	2201      	movs	r2, #1
 8003142:	2102      	movs	r1, #2
 8003144:	4804      	ldr	r0, [pc, #16]	; (8003158 <rotate_left+0x40>)
 8003146:	f7ff f953 	bl	80023f0 <GPIO_Write_Pin>
//	pwm1.duty_cycle = read;
////	pwm2.duty_cycle = read;
////	pwm3.duty_cycle = read;
////	pwm4.duty_cycle = read;
//
	pwm_();
 800314a:	f7ff ff37 	bl	8002fbc <pwm_>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40020400 	.word	0x40020400

0800315c <rotate_right>:

void rotate_right(int target, int position)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
	//all same direciton
	GPIO_Write_Pin(GPIOB, 1, GPIO_HIGH);
 8003166:	2201      	movs	r2, #1
 8003168:	2101      	movs	r1, #1
 800316a:	480c      	ldr	r0, [pc, #48]	; (800319c <rotate_right+0x40>)
 800316c:	f7ff f940 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 4, GPIO_HIGH);
 8003170:	2201      	movs	r2, #1
 8003172:	2104      	movs	r1, #4
 8003174:	4809      	ldr	r0, [pc, #36]	; (800319c <rotate_right+0x40>)
 8003176:	f7ff f93b 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 3, GPIO_LOW);
 800317a:	2200      	movs	r2, #0
 800317c:	2103      	movs	r1, #3
 800317e:	4807      	ldr	r0, [pc, #28]	; (800319c <rotate_right+0x40>)
 8003180:	f7ff f936 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 2, GPIO_LOW);
 8003184:	2200      	movs	r2, #0
 8003186:	2102      	movs	r1, #2
 8003188:	4804      	ldr	r0, [pc, #16]	; (800319c <rotate_right+0x40>)
 800318a:	f7ff f931 	bl	80023f0 <GPIO_Write_Pin>
//	pwm1.duty_cycle = read;
////	pwm2.duty_cycle = read;
////	pwm3.duty_cycle = read;
////	pwm4.duty_cycle = read;
//
	pwm_();
 800318e:	f7ff ff15 	bl	8002fbc <pwm_>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40020400 	.word	0x40020400

080031a0 <diagonal_right_fw>:

void diagonal_right_fw(int target, int position)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
	//2 motors off
	GPIO_Write_Pin(GPIOB, 1, GPIO_LOW);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2101      	movs	r1, #1
 80031ae:	480f      	ldr	r0, [pc, #60]	; (80031ec <diagonal_right_fw+0x4c>)
 80031b0:	f7ff f91e 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 2, GPIO_LOW);
 80031b4:	2200      	movs	r2, #0
 80031b6:	2102      	movs	r1, #2
 80031b8:	480c      	ldr	r0, [pc, #48]	; (80031ec <diagonal_right_fw+0x4c>)
 80031ba:	f7ff f919 	bl	80023f0 <GPIO_Write_Pin>
	pwm1.duty_cycle = 0;
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <diagonal_right_fw+0x50>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
	pwm2.duty_cycle = 0;
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <diagonal_right_fw+0x54>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
	//2 motors on
	GPIO_Write_Pin(GPIOB, 4, GPIO_LOW);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2104      	movs	r1, #4
 80031ce:	4807      	ldr	r0, [pc, #28]	; (80031ec <diagonal_right_fw+0x4c>)
 80031d0:	f7ff f90e 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 3, GPIO_LOW);
 80031d4:	2200      	movs	r2, #0
 80031d6:	2103      	movs	r1, #3
 80031d8:	4804      	ldr	r0, [pc, #16]	; (80031ec <diagonal_right_fw+0x4c>)
 80031da:	f7ff f909 	bl	80023f0 <GPIO_Write_Pin>

	pwm_();
 80031de:	f7ff feed 	bl	8002fbc <pwm_>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40020400 	.word	0x40020400
 80031f0:	20000000 	.word	0x20000000
 80031f4:	2000000c 	.word	0x2000000c

080031f8 <diagonal_right_bw>:

void diagonal_right_bw(int target, int position)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	//2 motors off
	GPIO_Write_Pin(GPIOB, 1, GPIO_LOW);
 8003202:	2200      	movs	r2, #0
 8003204:	2101      	movs	r1, #1
 8003206:	480f      	ldr	r0, [pc, #60]	; (8003244 <diagonal_right_bw+0x4c>)
 8003208:	f7ff f8f2 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 4, GPIO_HIGH);
 800320c:	2201      	movs	r2, #1
 800320e:	2104      	movs	r1, #4
 8003210:	480c      	ldr	r0, [pc, #48]	; (8003244 <diagonal_right_bw+0x4c>)
 8003212:	f7ff f8ed 	bl	80023f0 <GPIO_Write_Pin>
	//2 motors on
	GPIO_Write_Pin(GPIOB, 2, GPIO_LOW);
 8003216:	2200      	movs	r2, #0
 8003218:	2102      	movs	r1, #2
 800321a:	480a      	ldr	r0, [pc, #40]	; (8003244 <diagonal_right_bw+0x4c>)
 800321c:	f7ff f8e8 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 3, GPIO_LOW);
 8003220:	2200      	movs	r2, #0
 8003222:	2103      	movs	r1, #3
 8003224:	4807      	ldr	r0, [pc, #28]	; (8003244 <diagonal_right_bw+0x4c>)
 8003226:	f7ff f8e3 	bl	80023f0 <GPIO_Write_Pin>
	pwm3.duty_cycle = 0;
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <diagonal_right_bw+0x50>)
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
	pwm4.duty_cycle = 0;
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <diagonal_right_bw+0x54>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]


	pwm_();
 8003236:	f7ff fec1 	bl	8002fbc <pwm_>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40020400 	.word	0x40020400
 8003248:	20000018 	.word	0x20000018
 800324c:	20000024 	.word	0x20000024

08003250 <diagonal_left_fw>:


void diagonal_left_fw(int target, int position)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
	//2 motors off
	GPIO_Write_Pin(GPIOB, 1, GPIO_HIGH);
 800325a:	2201      	movs	r2, #1
 800325c:	2101      	movs	r1, #1
 800325e:	480f      	ldr	r0, [pc, #60]	; (800329c <diagonal_left_fw+0x4c>)
 8003260:	f7ff f8c6 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 4, GPIO_LOW);
 8003264:	2200      	movs	r2, #0
 8003266:	2104      	movs	r1, #4
 8003268:	480c      	ldr	r0, [pc, #48]	; (800329c <diagonal_left_fw+0x4c>)
 800326a:	f7ff f8c1 	bl	80023f0 <GPIO_Write_Pin>
	//2 motors on
	GPIO_Write_Pin(GPIOB, 2, GPIO_HIGH);
 800326e:	2201      	movs	r2, #1
 8003270:	2102      	movs	r1, #2
 8003272:	480a      	ldr	r0, [pc, #40]	; (800329c <diagonal_left_fw+0x4c>)
 8003274:	f7ff f8bc 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 3, GPIO_LOW);
 8003278:	2200      	movs	r2, #0
 800327a:	2103      	movs	r1, #3
 800327c:	4807      	ldr	r0, [pc, #28]	; (800329c <diagonal_left_fw+0x4c>)
 800327e:	f7ff f8b7 	bl	80023f0 <GPIO_Write_Pin>
	pwm3.duty_cycle = 0;
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <diagonal_left_fw+0x50>)
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
	pwm4.duty_cycle = 0;
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <diagonal_left_fw+0x54>)
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]


	pwm_();
 800328e:	f7ff fe95 	bl	8002fbc <pwm_>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40020400 	.word	0x40020400
 80032a0:	20000018 	.word	0x20000018
 80032a4:	20000024 	.word	0x20000024

080032a8 <diagonal_left_bw>:

void diagonal_left_bw(int target, int position)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
	//2 motors off
	GPIO_Write_Pin(GPIOB, 1, GPIO_HIGH);
 80032b2:	2201      	movs	r2, #1
 80032b4:	2101      	movs	r1, #1
 80032b6:	480f      	ldr	r0, [pc, #60]	; (80032f4 <diagonal_left_bw+0x4c>)
 80032b8:	f7ff f89a 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 4, GPIO_LOW);
 80032bc:	2200      	movs	r2, #0
 80032be:	2104      	movs	r1, #4
 80032c0:	480c      	ldr	r0, [pc, #48]	; (80032f4 <diagonal_left_bw+0x4c>)
 80032c2:	f7ff f895 	bl	80023f0 <GPIO_Write_Pin>
	pwm1.duty_cycle = 0;
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <diagonal_left_bw+0x50>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
	pwm2.duty_cycle = 0;
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <diagonal_left_bw+0x54>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
	//2 motors on
	GPIO_Write_Pin(GPIOB, 2, GPIO_HIGH);
 80032d2:	2201      	movs	r2, #1
 80032d4:	2102      	movs	r1, #2
 80032d6:	4807      	ldr	r0, [pc, #28]	; (80032f4 <diagonal_left_bw+0x4c>)
 80032d8:	f7ff f88a 	bl	80023f0 <GPIO_Write_Pin>
	GPIO_Write_Pin(GPIOB, 3, GPIO_HIGH);
 80032dc:	2201      	movs	r2, #1
 80032de:	2103      	movs	r1, #3
 80032e0:	4804      	ldr	r0, [pc, #16]	; (80032f4 <diagonal_left_bw+0x4c>)
 80032e2:	f7ff f885 	bl	80023f0 <GPIO_Write_Pin>

	pwm_();
 80032e6:	f7ff fe69 	bl	8002fbc <pwm_>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40020400 	.word	0x40020400
 80032f8:	20000000 	.word	0x20000000
 80032fc:	2000000c 	.word	0x2000000c

08003300 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <_ZN3ros3MsgC1Ev+0x1c>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	08009008 	.word	0x08009008

08003340 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
      data()
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ffe8 	bl	8003320 <_ZN3ros3MsgC1Ev>
 8003350:	4a06      	ldr	r2, [pc, #24]	; (800336c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ffd0 	bl	8003300 <_ZN3ros4TimeC1Ev>
    {
    }
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	08008ff0 	.word	0x08008ff0

08003370 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	4413      	add	r3, r2
 8003388:	b2ca      	uxtb	r2, r1
 800338a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	0a19      	lsrs	r1, r3, #8
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3301      	adds	r3, #1
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	4413      	add	r3, r2
 800339a:	b2ca      	uxtb	r2, r1
 800339c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	0c19      	lsrs	r1, r3, #16
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3302      	adds	r3, #2
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	b2ca      	uxtb	r2, r1
 80033ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0e19      	lsrs	r1, r3, #24
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3303      	adds	r3, #3
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	4413      	add	r3, r2
 80033be:	b2ca      	uxtb	r2, r1
 80033c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3304      	adds	r3, #4
 80033c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6899      	ldr	r1, [r3, #8]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	4413      	add	r3, r2
 80033d2:	b2ca      	uxtb	r2, r1
 80033d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	0a19      	lsrs	r1, r3, #8
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3301      	adds	r3, #1
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	b2ca      	uxtb	r2, r1
 80033e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	0c19      	lsrs	r1, r3, #16
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3302      	adds	r3, #2
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	b2ca      	uxtb	r2, r1
 80033f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	0e19      	lsrs	r1, r3, #24
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3303      	adds	r3, #3
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	4413      	add	r3, r2
 8003408:	b2ca      	uxtb	r2, r1
 800340a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3304      	adds	r3, #4
 8003410:	60fb      	str	r3, [r7, #12]
      return offset;
 8003412:	68fb      	ldr	r3, [r7, #12]
    }
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr

0800341e <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800341e:	b480      	push	{r7}
 8003420:	b085      	sub	sp, #20
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	4413      	add	r3, r2
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3301      	adds	r3, #1
 8003442:	6839      	ldr	r1, [r7, #0]
 8003444:	440b      	add	r3, r1
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3302      	adds	r3, #2
 8003458:	6839      	ldr	r1, [r7, #0]
 800345a:	440b      	add	r3, r1
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	041b      	lsls	r3, r3, #16
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3303      	adds	r3, #3
 800346e:	6839      	ldr	r1, [r7, #0]
 8003470:	440b      	add	r3, r1
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	061b      	lsls	r3, r3, #24
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3304      	adds	r3, #4
 8003480:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	4413      	add	r3, r2
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3301      	adds	r3, #1
 8003498:	6839      	ldr	r1, [r7, #0]
 800349a:	440b      	add	r3, r1
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3302      	adds	r3, #2
 80034ae:	6839      	ldr	r1, [r7, #0]
 80034b0:	440b      	add	r3, r1
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3303      	adds	r3, #3
 80034c4:	6839      	ldr	r1, [r7, #0]
 80034c6:	440b      	add	r3, r1
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	061b      	lsls	r3, r3, #24
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
     return offset;
 80034d8:	68fb      	ldr	r3, [r7, #12]
    }
 80034da:	4618      	mov	r0, r3
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	4b02      	ldr	r3, [pc, #8]	; (80034f8 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr
 80034f8:	08008c88 	.word	0x08008c88

080034fc <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	08008c98 	.word	0x08008c98

08003514 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fefe 	bl	8003320 <_ZN3ros3MsgC1Ev>
 8003524:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003534:	609a      	str	r2, [r3, #8]
      message_type(""),
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a07      	ldr	r2, [pc, #28]	; (8003558 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800353a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a06      	ldr	r2, [pc, #24]	; (8003558 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003540:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	615a      	str	r2, [r3, #20]
    {
    }
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	08008fd8 	.word	0x08008fd8
 8003558:	08008cbc 	.word	0x08008cbc

0800355c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8899      	ldrh	r1, [r3, #4]
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	4413      	add	r3, r2
 8003574:	b2ca      	uxtb	r2, r1
 8003576:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	889b      	ldrh	r3, [r3, #4]
 800357c:	0a1b      	lsrs	r3, r3, #8
 800357e:	b299      	uxth	r1, r3
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	3301      	adds	r3, #1
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	4413      	add	r3, r2
 8003588:	b2ca      	uxtb	r2, r1
 800358a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	3302      	adds	r3, #2
 8003590:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fc fe1e 	bl	80001d8 <strlen>
 800359c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	4413      	add	r3, r2
 80035a4:	69b9      	ldr	r1, [r7, #24]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 fb18 	bl	8004bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	3304      	adds	r3, #4
 80035b0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	18d0      	adds	r0, r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4619      	mov	r1, r3
 80035c0:	f005 fa3a 	bl	8008a38 <memcpy>
      offset += length_topic_name;
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4413      	add	r3, r2
 80035ca:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc fe01 	bl	80001d8 <strlen>
 80035d6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	4413      	add	r3, r2
 80035de:	6979      	ldr	r1, [r7, #20]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f001 fafb 	bl	8004bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3304      	adds	r3, #4
 80035ea:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	18d0      	adds	r0, r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4619      	mov	r1, r3
 80035fa:	f005 fa1d 	bl	8008a38 <memcpy>
      offset += length_message_type;
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	4413      	add	r3, r2
 8003604:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fc fde4 	bl	80001d8 <strlen>
 8003610:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	4413      	add	r3, r2
 8003618:	6939      	ldr	r1, [r7, #16]
 800361a:	4618      	mov	r0, r3
 800361c:	f001 fade 	bl	8004bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	3304      	adds	r3, #4
 8003624:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	18d0      	adds	r0, r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4619      	mov	r1, r3
 8003634:	f005 fa00 	bl	8008a38 <memcpy>
      offset += length_md5sum;
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4413      	add	r3, r2
 800363e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003646:	68f9      	ldr	r1, [r7, #12]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	4413      	add	r3, r2
 800364e:	b2ca      	uxtb	r2, r1
 8003650:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	0a19      	lsrs	r1, r3, #8
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3301      	adds	r3, #1
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	4413      	add	r3, r2
 800365e:	b2ca      	uxtb	r2, r1
 8003660:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	0c19      	lsrs	r1, r3, #16
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3302      	adds	r3, #2
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	4413      	add	r3, r2
 800366e:	b2ca      	uxtb	r2, r1
 8003670:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	0e19      	lsrs	r1, r3, #24
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3303      	adds	r3, #3
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	4413      	add	r3, r2
 800367e:	b2ca      	uxtb	r2, r1
 8003680:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3304      	adds	r3, #4
 8003686:	61fb      	str	r3, [r7, #28]
      return offset;
 8003688:	69fb      	ldr	r3, [r7, #28]
    }
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003692:	b580      	push	{r7, lr}
 8003694:	b08a      	sub	sp, #40	; 0x28
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	4413      	add	r3, r2
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	889b      	ldrh	r3, [r3, #4]
 80036b2:	b21a      	sxth	r2, r3
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	3301      	adds	r3, #1
 80036b8:	6839      	ldr	r1, [r7, #0]
 80036ba:	440b      	add	r3, r1
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	b21b      	sxth	r3, r3
 80036c2:	4313      	orrs	r3, r2
 80036c4:	b21b      	sxth	r3, r3
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	3302      	adds	r3, #2
 80036d0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	441a      	add	r2, r3
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 fa9a 	bl	8004c18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	3304      	adds	r3, #4
 80036e8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
 80036ee:	e00b      	b.n	8003708 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	441a      	add	r2, r3
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	3b01      	subs	r3, #1
 80036fa:	6839      	ldr	r1, [r7, #0]
 80036fc:	440b      	add	r3, r1
 80036fe:	7812      	ldrb	r2, [r2, #0]
 8003700:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	3301      	adds	r3, #1
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	4413      	add	r3, r2
 800370e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003710:	429a      	cmp	r2, r3
 8003712:	d3ed      	bcc.n	80036f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	4413      	add	r3, r2
 800371a:	3b01      	subs	r3, #1
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	4413      	add	r3, r2
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	3b01      	subs	r3, #1
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	441a      	add	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	4413      	add	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	441a      	add	r2, r3
 800373e:	f107 0310 	add.w	r3, r7, #16
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f001 fa67 	bl	8004c18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	3304      	adds	r3, #4
 800374e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	623b      	str	r3, [r7, #32]
 8003754:	e00b      	b.n	800376e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	441a      	add	r2, r3
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	3b01      	subs	r3, #1
 8003760:	6839      	ldr	r1, [r7, #0]
 8003762:	440b      	add	r3, r1
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	3301      	adds	r3, #1
 800376c:	623b      	str	r3, [r7, #32]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	6a3a      	ldr	r2, [r7, #32]
 8003776:	429a      	cmp	r2, r3
 8003778:	d3ed      	bcc.n	8003756 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4413      	add	r3, r2
 8003780:	3b01      	subs	r3, #1
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	4413      	add	r3, r2
 8003786:	2200      	movs	r2, #0
 8003788:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	3b01      	subs	r3, #1
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	441a      	add	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4413      	add	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	441a      	add	r2, r3
 80037a4:	f107 030c 	add.w	r3, r7, #12
 80037a8:	4611      	mov	r1, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fa34 	bl	8004c18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	3304      	adds	r3, #4
 80037b4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e00b      	b.n	80037d4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	441a      	add	r2, r3
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	6839      	ldr	r1, [r7, #0]
 80037c8:	440b      	add	r3, r1
 80037ca:	7812      	ldrb	r2, [r2, #0]
 80037cc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3301      	adds	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4413      	add	r3, r2
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d3ed      	bcc.n	80037bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	3b01      	subs	r3, #1
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	4413      	add	r3, r2
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	441a      	add	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4413      	add	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	6839      	ldr	r1, [r7, #0]
 800380e:	440a      	add	r2, r1
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	3301      	adds	r3, #1
 800381c:	6839      	ldr	r1, [r7, #0]
 800381e:	440b      	add	r3, r1
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	4313      	orrs	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	3302      	adds	r3, #2
 800382e:	6839      	ldr	r1, [r7, #0]
 8003830:	440b      	add	r3, r1
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	4313      	orrs	r3, r2
 8003838:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	3303      	adds	r3, #3
 8003840:	6839      	ldr	r1, [r7, #0]
 8003842:	440b      	add	r3, r1
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	061b      	lsls	r3, r3, #24
 8003848:	4313      	orrs	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	3304      	adds	r3, #4
 8003856:	61bb      	str	r3, [r7, #24]
     return offset;
 8003858:	69bb      	ldr	r3, [r7, #24]
    }
 800385a:	4618      	mov	r0, r3
 800385c:	3728      	adds	r7, #40	; 0x28
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	4b02      	ldr	r3, [pc, #8]	; (8003878 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	08008cc0 	.word	0x08008cc0

0800387c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	4b02      	ldr	r3, [pc, #8]	; (8003890 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr
 8003890:	08008cdc 	.word	0x08008cdc

08003894 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fd3e 	bl	8003320 <_ZN3ros3MsgC1Ev>
 80038a4:	4a06      	ldr	r2, [pc, #24]	; (80038c0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	601a      	str	r2, [r3, #0]
      level(0),
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	711a      	strb	r2, [r3, #4]
      msg("")
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80038b4:	609a      	str	r2, [r3, #8]
    {
    }
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	08008fc0 	.word	0x08008fc0
 80038c4:	08008cbc 	.word	0x08008cbc

080038c8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	4413      	add	r3, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	7912      	ldrb	r2, [r2, #4]
 80038e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3301      	adds	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fc fc73 	bl	80001d8 <strlen>
 80038f2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	4413      	add	r3, r2
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 f96d 	bl	8004bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3304      	adds	r3, #4
 8003906:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	18d0      	adds	r0, r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	4619      	mov	r1, r3
 8003916:	f005 f88f 	bl	8008a38 <memcpy>
      offset += length_msg;
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4413      	add	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
      return offset;
 8003922:	68fb      	ldr	r3, [r7, #12]
    }
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	4413      	add	r3, r2
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	3301      	adds	r3, #1
 800394a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	441a      	add	r2, r3
 8003952:	f107 030c 	add.w	r3, r7, #12
 8003956:	4611      	mov	r1, r2
 8003958:	4618      	mov	r0, r3
 800395a:	f001 f95d 	bl	8004c18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	3304      	adds	r3, #4
 8003962:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e00b      	b.n	8003982 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	441a      	add	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	3b01      	subs	r3, #1
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	440b      	add	r3, r1
 8003978:	7812      	ldrb	r2, [r2, #0]
 800397a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	3301      	adds	r3, #1
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	429a      	cmp	r2, r3
 800398c:	d3ed      	bcc.n	800396a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	3b01      	subs	r3, #1
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	4413      	add	r3, r2
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
     return offset;
 80039b2:	693b      	ldr	r3, [r7, #16]
    }
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	08008d00 	.word	0x08008d00

080039d4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	4b02      	ldr	r3, [pc, #8]	; (80039e8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	08008d14 	.word	0x08008d14

080039ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fc92 	bl	8003320 <_ZN3ros3MsgC1Ev>
 80039fc:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	605a      	str	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	61da      	str	r2, [r3, #28]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	08008fa8 	.word	0x08008fa8

08003a34 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08a      	sub	sp, #40	; 0x28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6859      	ldr	r1, [r3, #4]
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	b2ca      	uxtb	r2, r1
 8003a4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	0a19      	lsrs	r1, r3, #8
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	3301      	adds	r3, #1
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	b2ca      	uxtb	r2, r1
 8003a60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	0c19      	lsrs	r1, r3, #16
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	4413      	add	r3, r2
 8003a70:	b2ca      	uxtb	r2, r1
 8003a72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	0e19      	lsrs	r1, r3, #24
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	3303      	adds	r3, #3
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4413      	add	r3, r2
 8003a82:	b2ca      	uxtb	r2, r1
 8003a84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	3304      	adds	r3, #4
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	e02a      	b.n	8003ae8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8003aa0:	6939      	ldr	r1, [r7, #16]
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	b2ca      	uxtb	r2, r1
 8003aaa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	0a19      	lsrs	r1, r3, #8
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	b2ca      	uxtb	r2, r1
 8003aba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	0c19      	lsrs	r1, r3, #16
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	b2ca      	uxtb	r2, r1
 8003aca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	0e19      	lsrs	r1, r3, #24
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	3303      	adds	r3, #3
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	b2ca      	uxtb	r2, r1
 8003ada:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	3304      	adds	r3, #4
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	6a3a      	ldr	r2, [r7, #32]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d3cf      	bcc.n	8003a92 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6919      	ldr	r1, [r3, #16]
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	4413      	add	r3, r2
 8003afc:	b2ca      	uxtb	r2, r1
 8003afe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	0a19      	lsrs	r1, r3, #8
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	3301      	adds	r3, #1
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	b2ca      	uxtb	r2, r1
 8003b10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	0c19      	lsrs	r1, r3, #16
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	3302      	adds	r3, #2
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	4413      	add	r3, r2
 8003b20:	b2ca      	uxtb	r2, r1
 8003b22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	0e19      	lsrs	r1, r3, #24
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	3303      	adds	r3, #3
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	4413      	add	r3, r2
 8003b32:	b2ca      	uxtb	r2, r1
 8003b34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	3304      	adds	r3, #4
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	e02a      	b.n	8003b98 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003b50:	68f9      	ldr	r1, [r7, #12]
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	4413      	add	r3, r2
 8003b58:	b2ca      	uxtb	r2, r1
 8003b5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	0a19      	lsrs	r1, r3, #8
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	3301      	adds	r3, #1
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	4413      	add	r3, r2
 8003b68:	b2ca      	uxtb	r2, r1
 8003b6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	0c19      	lsrs	r1, r3, #16
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	3302      	adds	r3, #2
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	b2ca      	uxtb	r2, r1
 8003b7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	0e19      	lsrs	r1, r3, #24
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	3303      	adds	r3, #3
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	4413      	add	r3, r2
 8003b88:	b2ca      	uxtb	r2, r1
 8003b8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	3304      	adds	r3, #4
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3301      	adds	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d3cf      	bcc.n	8003b42 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69d9      	ldr	r1, [r3, #28]
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	4413      	add	r3, r2
 8003bac:	b2ca      	uxtb	r2, r1
 8003bae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	0a19      	lsrs	r1, r3, #8
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	3301      	adds	r3, #1
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	b2ca      	uxtb	r2, r1
 8003bc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	0c19      	lsrs	r1, r3, #16
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	3302      	adds	r3, #2
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	4413      	add	r3, r2
 8003bd0:	b2ca      	uxtb	r2, r1
 8003bd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	0e19      	lsrs	r1, r3, #24
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	3303      	adds	r3, #3
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	4413      	add	r3, r2
 8003be2:	b2ca      	uxtb	r2, r1
 8003be4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	3304      	adds	r3, #4
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	e027      	b.n	8003c42 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fc faea 	bl	80001d8 <strlen>
 8003c04:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	6979      	ldr	r1, [r7, #20]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 ffe4 	bl	8004bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	3304      	adds	r3, #4
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	18d0      	adds	r0, r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	f004 ff02 	bl	8008a38 <memcpy>
      offset += length_stringsi;
 8003c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	4413      	add	r3, r2
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d3d2      	bcc.n	8003bf2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3728      	adds	r7, #40	; 0x28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b08e      	sub	sp, #56	; 0x38
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	4413      	add	r3, r2
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c70:	3301      	adds	r3, #1
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	4413      	add	r3, r2
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	6a3a      	ldr	r2, [r7, #32]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c82:	3302      	adds	r3, #2
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	4413      	add	r3, r2
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	041b      	lsls	r3, r3, #16
 8003c8c:	6a3a      	ldr	r2, [r7, #32]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c94:	3303      	adds	r3, #3
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	4413      	add	r3, r2
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	061b      	lsls	r3, r3, #24
 8003c9e:	6a3a      	ldr	r2, [r7, #32]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	6a3a      	ldr	r2, [r7, #32]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d90a      	bls.n	8003cca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f004 fe4e 	bl	8008960 <realloc>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a3a      	ldr	r2, [r7, #32]
 8003cce:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cd4:	e035      	b.n	8003d42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	440a      	add	r2, r1
 8003ce2:	7812      	ldrb	r2, [r2, #0]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cec:	3301      	adds	r3, #1
 8003cee:	6839      	ldr	r1, [r7, #0]
 8003cf0:	440b      	add	r3, r1
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfe:	3302      	adds	r3, #2
 8003d00:	6839      	ldr	r1, [r7, #0]
 8003d02:	440b      	add	r3, r1
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d10:	3303      	adds	r3, #3
 8003d12:	6839      	ldr	r1, [r7, #0]
 8003d14:	440b      	add	r3, r1
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d26:	3304      	adds	r3, #4
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	3208      	adds	r2, #8
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	3301      	adds	r3, #1
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d3c4      	bcc.n	8003cd6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d58:	3301      	adds	r3, #1
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	3302      	adds	r3, #2
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	4413      	add	r3, r2
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	041b      	lsls	r3, r3, #16
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7c:	3303      	adds	r3, #3
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	4413      	add	r3, r2
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8e:	3304      	adds	r3, #4
 8003d90:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d90a      	bls.n	8003db2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699a      	ldr	r2, [r3, #24]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f004 fdda 	bl	8008960 <realloc>
 8003dac:	4602      	mov	r2, r0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003db8:	2300      	movs	r3, #0
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dbc:	e035      	b.n	8003e2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dc6:	6839      	ldr	r1, [r7, #0]
 8003dc8:	440a      	add	r2, r1
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	440b      	add	r3, r1
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	021b      	lsls	r3, r3, #8
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de6:	3302      	adds	r3, #2
 8003de8:	6839      	ldr	r1, [r7, #0]
 8003dea:	440b      	add	r3, r1
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	041b      	lsls	r3, r3, #16
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df8:	3303      	adds	r3, #3
 8003dfa:	6839      	ldr	r1, [r7, #0]
 8003dfc:	440b      	add	r3, r1
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	061b      	lsls	r3, r3, #24
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0e:	3304      	adds	r3, #4
 8003e10:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	3214      	adds	r2, #20
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	3301      	adds	r3, #1
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d3c4      	bcc.n	8003dbe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	4413      	add	r3, r2
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	3301      	adds	r3, #1
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	4413      	add	r3, r2
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e52:	3302      	adds	r3, #2
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	4413      	add	r3, r2
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	041b      	lsls	r3, r3, #16
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e64:	3303      	adds	r3, #3
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	4413      	add	r3, r2
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	061b      	lsls	r3, r3, #24
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e76:	3304      	adds	r3, #4
 8003e78:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d90a      	bls.n	8003e9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f004 fd66 	bl	8008960 <realloc>
 8003e94:	4602      	mov	r2, r0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea4:	e03e      	b.n	8003f24 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	441a      	add	r2, r3
 8003eac:	f107 030c 	add.w	r3, r7, #12
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 feb0 	bl	8004c18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eba:	3304      	adds	r3, #4
 8003ebc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	e00b      	b.n	8003edc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	441a      	add	r2, r3
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	6839      	ldr	r1, [r7, #0]
 8003ed0:	440b      	add	r3, r1
 8003ed2:	7812      	ldrb	r2, [r2, #0]
 8003ed4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	3301      	adds	r3, #1
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
 8003edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d3ed      	bcc.n	8003ec4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efa:	3b01      	subs	r3, #1
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	441a      	add	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	3220      	adds	r2, #32
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	3301      	adds	r3, #1
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d3bb      	bcc.n	8003ea6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8003f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003f30:	4618      	mov	r0, r3
 8003f32:	3738      	adds	r7, #56	; 0x38
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	4b02      	ldr	r3, [pc, #8]	; (8003f4c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	08008eb4 	.word	0x08008eb4

08003f50 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	4b02      	ldr	r3, [pc, #8]	; (8003f64 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	08008d38 	.word	0x08008d38

08003f68 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	611a      	str	r2, [r3, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68d8      	ldr	r0, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6891      	ldr	r1, [r2, #8]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	4798      	blx	r3
 8003fb2:	4603      	mov	r3, r0
  };
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
  }
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>:
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fec:	2200      	movs	r2, #0
 8003fee:	805a      	strh	r2, [r3, #2]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	809a      	strh	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004000:	2200      	movs	r2, #0
 8004002:	80da      	strh	r2, [r3, #6]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400a:	461a      	mov	r2, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6093      	str	r3, [r2, #8]
	{
		//this->huart = huart;
	}
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402a:	689b      	ldr	r3, [r3, #8]
	}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr

08004036 <_ZN11SerialClass9start_dmaEv>:

	inline void start_dma(void)
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
		rx_tail = 0;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800404e:	2200      	movs	r2, #0
 8004050:	805a      	strh	r2, [r3, #2]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004058:	6898      	ldr	r0, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004064:	4619      	mov	r1, r3
 8004066:	f003 fb69 	bl	800773c <HAL_UART_Receive_DMA>
	}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <_ZN11SerialClass4readEv>:



	inline int read(void)
 8004072:	b480      	push	{r7}
 8004074:	b085      	sub	sp, #20
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
	{
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->NDTR)& buf_mask;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	b29b      	uxth	r3, r3
 800408a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800408e:	b29b      	uxth	r3, r3
 8004090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004094:	81fb      	strh	r3, [r7, #14]
		if (rx_tail == rx_head)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409c:	885b      	ldrh	r3, [r3, #2]
 800409e:	89fa      	ldrh	r2, [r7, #14]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d102      	bne.n	80040aa <_ZN11SerialClass4readEv+0x38>
		{
			return -1;
 80040a4:	f04f 33ff 	mov.w	r3, #4294967295
 80040a8:	e01b      	b.n	80040e2 <_ZN11SerialClass4readEv+0x70>
		}

		int c = (int) rx_buf[rx_tail++];
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b0:	885b      	ldrh	r3, [r3, #2]
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	b291      	uxth	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040bc:	8051      	strh	r1, [r2, #2]
 80040be:	461a      	mov	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4413      	add	r3, r2
 80040c4:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 80040c8:	60bb      	str	r3, [r7, #8]
		rx_tail &= buf_mask;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d0:	885b      	ldrh	r3, [r3, #2]
 80040d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040de:	805a      	strh	r2, [r3, #2]
		return c;
 80040e0:	68bb      	ldr	r3, [r7, #8]
	}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <_ZN11SerialClass5writeEPKhi>:

	inline void write(const uint8_t * const c, const int length)
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
	{
		if (length > BUF_SIZE || length < 1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040fe:	dc35      	bgt.n	800416c <_ZN11SerialClass5writeEPKhi+0x80>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	dd32      	ble.n	800416c <_ZN11SerialClass5writeEPKhi+0x80>
		{
			return;
		}

		while(!tx_cplt)
 8004106:	bf00      	nop
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	f083 0301 	eor.w	r3, r3, #1
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f6      	bne.n	8004108 <_ZN11SerialClass5writeEPKhi+0x1c>
		{

		}

		for (int i = 0; i < length; i++)
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e00b      	b.n	8004138 <_ZN11SerialClass5writeEPKhi+0x4c>
		{
			tx_buf[i] = c[i];
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	4413      	add	r3, r2
 8004126:	7819      	ldrb	r1, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	4413      	add	r3, r2
 800412e:	460a      	mov	r2, r1
 8004130:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	3301      	adds	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	dbef      	blt.n	8004120 <_ZN11SerialClass5writeEPKhi+0x34>
		}

		if(tx_cplt)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <_ZN11SerialClass5writeEPKhi+0x82>
		{
			tx_cplt = false;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	b292      	uxth	r2, r2
 8004164:	4618      	mov	r0, r3
 8004166:	f003 fa6b 	bl	8007640 <HAL_UART_Transmit_DMA>
 800416a:	e000      	b.n	800416e <_ZN11SerialClass5writeEPKhi+0x82>
			return;
 800416c:	bf00      	nop
		}
	}
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
	}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <_ZN11SerialClass10reset_rbufEv>:

    inline void reset_rbuf(void){
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419e:	6898      	ldr	r0, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041aa:	4619      	mov	r1, r3
 80041ac:	f003 fac6 	bl	800773c <HAL_UART_Receive_DMA>
    }
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_UART_TxCpltCallback>:
SerialClass serial(huart1);
//SerialClass serial(huart2);
//SerialClass serial(huart3);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681c      	ldr	r4, [r3, #0]
 80041c4:	4809      	ldr	r0, [pc, #36]	; (80041ec <HAL_UART_TxCpltCallback+0x34>)
 80041c6:	f7ff ff29 	bl	800401c <_ZN11SerialClass10get_handleEv>
 80041ca:	4603      	mov	r3, r0
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	429c      	cmp	r4, r3
 80041d0:	bf0c      	ite	eq
 80041d2:	2301      	moveq	r3, #1
 80041d4:	2300      	movne	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 80041dc:	4803      	ldr	r0, [pc, #12]	; (80041ec <HAL_UART_TxCpltCallback+0x34>)
 80041de:	f7ff ffc9 	bl	8004174 <_ZN11SerialClass16tx_cplt_callbackEv>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd90      	pop	{r4, r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200001f8 	.word	0x200001f8

080041f0 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	serial.reset_rbuf();
 80041f8:	4805      	ldr	r0, [pc, #20]	; (8004210 <HAL_UART_RxCpltCallback+0x20>)
 80041fa:	f7ff ffc9 	bl	8004190 <_ZN11SerialClass10reset_rbufEv>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80041fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004202:	4804      	ldr	r0, [pc, #16]	; (8004214 <HAL_UART_RxCpltCallback+0x24>)
 8004204:	f002 fd46 	bl	8006c94 <HAL_GPIO_TogglePin>

}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	200001f8 	.word	0x200001f8
 8004214:	40020800 	.word	0x40020800

08004218 <_ZN13STM32HardwareC1Ev>:
#include "SerialClass.h"

class STM32Hardware
{
public:
	STM32Hardware() :
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
			com(&serial)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a04      	ldr	r2, [pc, #16]	; (8004234 <_ZN13STM32HardwareC1Ev+0x1c>)
 8004224:	601a      	str	r2, [r3, #0]
	{

	}
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	200001f8 	.word	0x200001f8

08004238 <_ZN13STM32Hardware4initEv>:

	void init()
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
	{
		com->start_dma();
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff fef6 	bl	8004036 <_ZN11SerialClass9start_dmaEv>
	}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <_ZN13STM32Hardware4readEv>:

	int read()
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
	{
		return com->read();
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff ff07 	bl	8004072 <_ZN11SerialClass4readEv>
 8004264:	4603      	mov	r3, r0
	}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t* data, int length)
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
	{
		com->write(data, length);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff ff32 	bl	80040ec <_ZN11SerialClass5writeEPKhi>
	}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <_ZN13STM32Hardware4timeEv>:

	unsigned long time()
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 8004298:	f001 fe28 	bl	8005eec <HAL_GetTick>
 800429c:	4603      	mov	r3, r0
	}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
      data(0)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f834 	bl	8003320 <_ZN3ros3MsgC1Ev>
 80042b8:	4a05      	ldr	r2, [pc, #20]	; (80042d0 <_ZN8std_msgs5Int16C1Ev+0x28>)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	809a      	strh	r2, [r3, #4]
    {
    }
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	08008f64 	.word	0x08008f64

080042d4 <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80042e8:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80042ea:	8939      	ldrh	r1, [r7, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	b2ca      	uxtb	r2, r1
 80042f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80042f6:	893b      	ldrh	r3, [r7, #8]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	b299      	uxth	r1, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3301      	adds	r3, #1
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	4413      	add	r3, r2
 8004304:	b2ca      	uxtb	r2, r1
 8004306:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3302      	adds	r3, #2
 800430c:	60fb      	str	r3, [r7, #12]
      return offset;
 800430e:	68fb      	ldr	r3, [r7, #12]
    }
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr

0800431a <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800431a:	b480      	push	{r7}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800432c:	893a      	ldrh	r2, [r7, #8]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6839      	ldr	r1, [r7, #0]
 8004332:	440b      	add	r3, r1
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	4313      	orrs	r3, r2
 800433a:	b29b      	uxth	r3, r3
 800433c:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800433e:	893b      	ldrh	r3, [r7, #8]
 8004340:	b21a      	sxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	3301      	adds	r3, #1
 8004346:	6839      	ldr	r1, [r7, #0]
 8004348:	440b      	add	r3, r1
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	b21b      	sxth	r3, r3
 8004350:	4313      	orrs	r3, r2
 8004352:	b21b      	sxth	r3, r3
 8004354:	b29b      	uxth	r3, r3
 8004356:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8004358:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3302      	adds	r3, #2
 8004364:	60fb      	str	r3, [r7, #12]
     return offset;
 8004366:	68fb      	ldr	r3, [r7, #12]
    }
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
	...

08004374 <_ZN8std_msgs5Int167getTypeEv>:

    const char * getType(){ return "std_msgs/Int16"; };
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	4b02      	ldr	r3, [pc, #8]	; (8004388 <_ZN8std_msgs5Int167getTypeEv+0x14>)
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr
 8004388:	08008d5c 	.word	0x08008d5c

0800438c <_ZN8std_msgs5Int166getMD5Ev>:
    const char * getMD5(){ return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	4b02      	ldr	r3, [pc, #8]	; (80043a0 <_ZN8std_msgs5Int166getMD5Ev+0x14>)
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr
 80043a0:	08008d6c 	.word	0x08008d6c

080043a4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fe ffb6 	bl	8003320 <_ZN3ros3MsgC1Ev>
 80043b4:	4a08      	ldr	r2, [pc, #32]	; (80043d8 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	601a      	str	r2, [r3, #0]
      label(""),
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a07      	ldr	r2, [pc, #28]	; (80043dc <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 80043be:	605a      	str	r2, [r3, #4]
      size(0),
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	609a      	str	r2, [r3, #8]
      stride(0)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	60da      	str	r2, [r3, #12]
    {
    }
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	08008f4c 	.word	0x08008f4c
 80043dc:	08008cbc 	.word	0x08008cbc

080043e0 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fb fef0 	bl	80001d8 <strlen>
 80043f8:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	4413      	add	r3, r2
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fbea 	bl	8004bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3304      	adds	r3, #4
 800440c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	18d0      	adds	r0, r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	4619      	mov	r1, r3
 800441c:	f004 fb0c 	bl	8008a38 <memcpy>
      offset += length_label;
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4413      	add	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6899      	ldr	r1, [r3, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	4413      	add	r3, r2
 8004432:	b2ca      	uxtb	r2, r1
 8004434:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	0a19      	lsrs	r1, r3, #8
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3301      	adds	r3, #1
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	4413      	add	r3, r2
 8004444:	b2ca      	uxtb	r2, r1
 8004446:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	0c19      	lsrs	r1, r3, #16
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3302      	adds	r3, #2
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	4413      	add	r3, r2
 8004456:	b2ca      	uxtb	r2, r1
 8004458:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	0e19      	lsrs	r1, r3, #24
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3303      	adds	r3, #3
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	4413      	add	r3, r2
 8004468:	b2ca      	uxtb	r2, r1
 800446a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3304      	adds	r3, #4
 8004470:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68d9      	ldr	r1, [r3, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	4413      	add	r3, r2
 800447c:	b2ca      	uxtb	r2, r1
 800447e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	0a19      	lsrs	r1, r3, #8
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3301      	adds	r3, #1
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	4413      	add	r3, r2
 800448e:	b2ca      	uxtb	r2, r1
 8004490:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	0c19      	lsrs	r1, r3, #16
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3302      	adds	r3, #2
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	4413      	add	r3, r2
 80044a0:	b2ca      	uxtb	r2, r1
 80044a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	0e19      	lsrs	r1, r3, #24
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3303      	adds	r3, #3
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	4413      	add	r3, r2
 80044b2:	b2ca      	uxtb	r2, r1
 80044b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3304      	adds	r3, #4
 80044ba:	60fb      	str	r3, [r7, #12]
      return offset;
 80044bc:	68fb      	ldr	r3, [r7, #12]
    }
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b086      	sub	sp, #24
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	441a      	add	r2, r3
 80044da:	f107 030c 	add.w	r3, r7, #12
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fb99 	bl	8004c18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	3304      	adds	r3, #4
 80044ea:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e00b      	b.n	800450a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	441a      	add	r2, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	6839      	ldr	r1, [r7, #0]
 80044fe:	440b      	add	r3, r1
 8004500:	7812      	ldrb	r2, [r2, #0]
 8004502:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	3301      	adds	r3, #1
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	429a      	cmp	r2, r3
 8004514:	d3ed      	bcc.n	80044f2 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	3b01      	subs	r3, #1
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	4413      	add	r3, r2
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	3b01      	subs	r3, #1
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	441a      	add	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	4413      	add	r3, r2
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	3301      	adds	r3, #1
 8004550:	6839      	ldr	r1, [r7, #0]
 8004552:	440b      	add	r3, r1
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	3302      	adds	r3, #2
 8004566:	6839      	ldr	r1, [r7, #0]
 8004568:	440b      	add	r3, r1
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	3303      	adds	r3, #3
 800457c:	6839      	ldr	r1, [r7, #0]
 800457e:	440b      	add	r3, r1
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	061b      	lsls	r3, r3, #24
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	3304      	adds	r3, #4
 800458e:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	4413      	add	r3, r2
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	3301      	adds	r3, #1
 80045a6:	6839      	ldr	r1, [r7, #0]
 80045a8:	440b      	add	r3, r1
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	021b      	lsls	r3, r3, #8
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	3302      	adds	r3, #2
 80045bc:	6839      	ldr	r1, [r7, #0]
 80045be:	440b      	add	r3, r1
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	3303      	adds	r3, #3
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	440b      	add	r3, r1
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	3304      	adds	r3, #4
 80045e4:	613b      	str	r3, [r7, #16]
     return offset;
 80045e6:	693b      	ldr	r3, [r7, #16]
    }
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	4b02      	ldr	r3, [pc, #8]	; (8004604 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x14>)
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr
 8004604:	08008d90 	.word	0x08008d90

08004608 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	4b02      	ldr	r3, [pc, #8]	; (800461c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x14>)
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr
 800461c:	08008db0 	.word	0x08008db0

08004620 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe fe78 	bl	8003320 <_ZN3ros3MsgC1Ev>
 8004630:	4a0a      	ldr	r2, [pc, #40]	; (800465c <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
      dim_length(0), dim(NULL),
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	605a      	str	r2, [r3, #4]
      data_offset(0)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3308      	adds	r3, #8
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff feaf 	bl	80043a4 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
      dim_length(0), dim(NULL),
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	619a      	str	r2, [r3, #24]
      data_offset(0)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	61da      	str	r2, [r3, #28]
    {
    }
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	08008f34 	.word	0x08008f34

08004660 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6859      	ldr	r1, [r3, #4]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	4413      	add	r3, r2
 8004678:	b2ca      	uxtb	r2, r1
 800467a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	0a19      	lsrs	r1, r3, #8
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3301      	adds	r3, #1
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	4413      	add	r3, r2
 800468a:	b2ca      	uxtb	r2, r1
 800468c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	0c19      	lsrs	r1, r3, #16
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3302      	adds	r3, #2
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	4413      	add	r3, r2
 800469c:	b2ca      	uxtb	r2, r1
 800469e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	0e19      	lsrs	r1, r3, #24
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3303      	adds	r3, #3
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	4413      	add	r3, r2
 80046ae:	b2ca      	uxtb	r2, r1
 80046b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3304      	adds	r3, #4
 80046b6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80046b8:	2300      	movs	r3, #0
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	e017      	b.n	80046ee <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	18d0      	adds	r0, r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699a      	ldr	r2, [r3, #24]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	4413      	add	r3, r2
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	440a      	add	r2, r1
 80046dc:	4611      	mov	r1, r2
 80046de:	4798      	blx	r3
 80046e0:	4602      	mov	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d3e2      	bcc.n	80046be <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69d9      	ldr	r1, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	4413      	add	r3, r2
 8004702:	b2ca      	uxtb	r2, r1
 8004704:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	0a19      	lsrs	r1, r3, #8
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3301      	adds	r3, #1
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	4413      	add	r3, r2
 8004714:	b2ca      	uxtb	r2, r1
 8004716:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	0c19      	lsrs	r1, r3, #16
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3302      	adds	r3, #2
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	4413      	add	r3, r2
 8004726:	b2ca      	uxtb	r2, r1
 8004728:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	0e19      	lsrs	r1, r3, #24
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3303      	adds	r3, #3
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	4413      	add	r3, r2
 8004738:	b2ca      	uxtb	r2, r1
 800473a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3304      	adds	r3, #4
 8004740:	60fb      	str	r3, [r7, #12]
      return offset;
 8004742:	68fb      	ldr	r3, [r7, #12]
    }
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	4413      	add	r3, r2
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	3301      	adds	r3, #1
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	4413      	add	r3, r2
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	3302      	adds	r3, #2
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	4413      	add	r3, r2
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	3303      	adds	r3, #3
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	4413      	add	r3, r2
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	061b      	lsls	r3, r3, #24
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	3304      	adds	r3, #4
 800479e:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d90a      	bls.n	80047c0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f004 f8d3 	bl	8008960 <realloc>
 80047ba:	4602      	mov	r2, r0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 80047c6:	2300      	movs	r3, #0
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	e01a      	b.n	8004802 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f103 0008 	add.w	r0, r3, #8
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	4413      	add	r3, r2
 80047d8:	4619      	mov	r1, r3
 80047da:	f7ff fe74 	bl	80044c6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 80047de:	4602      	mov	r2, r0
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	4413      	add	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	18d0      	adds	r0, r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3308      	adds	r3, #8
 80047f4:	2210      	movs	r2, #16
 80047f6:	4619      	mov	r1, r3
 80047f8:	f004 f91e 	bl	8008a38 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	3301      	adds	r3, #1
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	429a      	cmp	r2, r3
 800480a:	d3df      	bcc.n	80047cc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	4413      	add	r3, r2
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	3301      	adds	r3, #1
 8004822:	6839      	ldr	r1, [r7, #0]
 8004824:	440b      	add	r3, r1
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	021b      	lsls	r3, r3, #8
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	3302      	adds	r3, #2
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	440b      	add	r3, r1
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69da      	ldr	r2, [r3, #28]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	3303      	adds	r3, #3
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	440b      	add	r3, r1
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	061b      	lsls	r3, r3, #24
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	3304      	adds	r3, #4
 8004860:	617b      	str	r3, [r7, #20]
     return offset;
 8004862:	697b      	ldr	r3, [r7, #20]
    }
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	4b02      	ldr	r3, [pc, #8]	; (8004880 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x14>)
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	08008dd4 	.word	0x08008dd4

08004884 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	4b02      	ldr	r3, [pc, #8]	; (8004898 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x14>)
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr
 8004898:	08008df0 	.word	0x08008df0

0800489c <_ZN8std_msgs15Int16MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int16_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int16MultiArray():
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe fd3a 	bl	8003320 <_ZN3ros3MsgC1Ev>
 80048ac:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <_ZN8std_msgs15Int16MultiArrayC1Ev+0x38>)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	601a      	str	r2, [r3, #0]
      layout(),
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3304      	adds	r3, #4
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff feb2 	bl	8004620 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), data(NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	08008f1c 	.word	0x08008f1c

080048d8 <_ZNK8std_msgs15Int16MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	1d18      	adds	r0, r3, #4
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	4413      	add	r3, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	f7ff feb5 	bl	8004660 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 80048f6:	4602      	mov	r2, r0
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	4413      	add	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	4413      	add	r3, r2
 8004908:	b2ca      	uxtb	r2, r1
 800490a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	0a19      	lsrs	r1, r3, #8
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	3301      	adds	r3, #1
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	4413      	add	r3, r2
 800491a:	b2ca      	uxtb	r2, r1
 800491c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	0c19      	lsrs	r1, r3, #16
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	3302      	adds	r3, #2
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	4413      	add	r3, r2
 800492c:	b2ca      	uxtb	r2, r1
 800492e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	0e19      	lsrs	r1, r3, #24
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	3303      	adds	r3, #3
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	4413      	add	r3, r2
 800493e:	b2ca      	uxtb	r2, r1
 8004940:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	3304      	adds	r3, #4
 8004946:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	e01c      	b.n	8004988 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0xb0>
      union {
        int16_t real;
        uint16_t base;
      } u_datai;
      u_datai.real = this->data[i];
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4413      	add	r3, r2
 8004958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800495c:	81bb      	strh	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 800495e:	89b9      	ldrh	r1, [r7, #12]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	4413      	add	r3, r2
 8004966:	b2ca      	uxtb	r2, r1
 8004968:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 800496a:	89bb      	ldrh	r3, [r7, #12]
 800496c:	0a1b      	lsrs	r3, r3, #8
 800496e:	b299      	uxth	r1, r3
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	3301      	adds	r3, #1
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	4413      	add	r3, r2
 8004978:	b2ca      	uxtb	r2, r1
 800497a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	3302      	adds	r3, #2
 8004980:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	3301      	adds	r3, #1
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	429a      	cmp	r2, r3
 8004990:	d3dd      	bcc.n	800494e <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0x76>
      }
      return offset;
 8004992:	697b      	ldr	r3, [r7, #20]
    }
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <_ZN8std_msgs15Int16MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	1d18      	adds	r0, r3, #4
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	4413      	add	r3, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	f7ff fec9 	bl	800474c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 80049ba:	4602      	mov	r2, r0
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	4413      	add	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	4413      	add	r3, r2
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	3301      	adds	r3, #1
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	4413      	add	r3, r2
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	3302      	adds	r3, #2
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	4413      	add	r3, r2
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	041b      	lsls	r3, r3, #16
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	3303      	adds	r3, #3
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	4413      	add	r3, r2
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	061b      	lsls	r3, r3, #24
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3304      	adds	r3, #4
 8004a06:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d90a      	bls.n	8004a28 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x8c>
        this->data = (int16_t*)realloc(this->data, data_lengthT * sizeof(int16_t));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f003 ff9f 	bl	8008960 <realloc>
 8004a22:	4602      	mov	r2, r0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8004a2e:	2300      	movs	r3, #0
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	e02b      	b.n	8004a8c <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0xf0>
      union {
        int16_t real;
        uint16_t base;
      } u_st_data;
      u_st_data.base = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004a38:	893a      	ldrh	r2, [r7, #8]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	6839      	ldr	r1, [r7, #0]
 8004a3e:	440b      	add	r3, r1
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	4313      	orrs	r3, r2
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004a4a:	893b      	ldrh	r3, [r7, #8]
 8004a4c:	b21a      	sxth	r2, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	3301      	adds	r3, #1
 8004a52:	6839      	ldr	r1, [r7, #0]
 8004a54:	440b      	add	r3, r1
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	b21b      	sxth	r3, r3
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	b21b      	sxth	r3, r3
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	813b      	strh	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8004a64:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	3302      	adds	r3, #2
 8004a70:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int16_t));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	4413      	add	r3, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	3228      	adds	r2, #40	; 0x28
 8004a80:	8812      	ldrh	r2, [r2, #0]
 8004a82:	b292      	uxth	r2, r2
 8004a84:	801a      	strh	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d3ce      	bcc.n	8004a34 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8004a96:	697b      	ldr	r3, [r7, #20]
    }
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <_ZN8std_msgs15Int16MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/Int16MultiArray"; };
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	4b02      	ldr	r3, [pc, #8]	; (8004ab4 <_ZN8std_msgs15Int16MultiArray7getTypeEv+0x14>)
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr
 8004ab4:	08008e14 	.word	0x08008e14

08004ab8 <_ZN8std_msgs15Int16MultiArray6getMD5Ev>:
    const char * getMD5(){ return "d9338d7f523fcb692fae9d0a0e9f067c"; };
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	4b02      	ldr	r3, [pc, #8]	; (8004acc <_ZN8std_msgs15Int16MultiArray6getMD5Ev+0x14>)
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr
 8004acc:	08008e30 	.word	0x08008e30

08004ad0 <_Z12RoboCallbackRKN8std_msgs5Int16E>:
#include "std_msgs/Int16MultiArray.h"

ros::NodeHandle nh;
std_msgs::Int16MultiArray arr_msg;
ros::Publisher pub("wheel_ticks", &arr_msg);
void RoboCallback(const std_msgs::Int16& msg) {
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]

  received_value = msg.data;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004ade:	4b03      	ldr	r3, [pc, #12]	; (8004aec <_Z12RoboCallbackRKN8std_msgs5Int16E+0x1c>)
 8004ae0:	801a      	strh	r2, [r3, #0]

}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	200001b0 	.word	0x200001b0

08004af0 <_Z12AutoCallbackRKN8std_msgs15Int16MultiArrayE>:

void AutoCallback(const std_msgs::Int16MultiArray& msg) {
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

	speeds[0] = msg.data[0];
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <_Z12AutoCallbackRKN8std_msgs15Int16MultiArrayE+0x44>)
 8004b02:	801a      	strh	r2, [r3, #0]
	speeds[1] = msg.data[1];
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <_Z12AutoCallbackRKN8std_msgs15Int16MultiArrayE+0x44>)
 8004b0e:	805a      	strh	r2, [r3, #2]
	speeds[2] = msg.data[2];
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <_Z12AutoCallbackRKN8std_msgs15Int16MultiArrayE+0x44>)
 8004b1a:	809a      	strh	r2, [r3, #4]
	speeds[3] = msg.data[3];
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004b24:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <_Z12AutoCallbackRKN8std_msgs15Int16MultiArrayE+0x44>)
 8004b26:	80da      	strh	r2, [r3, #6]

}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	200001f0 	.word	0x200001f0

08004b38 <setup>:


ros::Subscriber<std_msgs::Int16> sub("mode_topic", &RoboCallback);
ros::Subscriber<std_msgs::Int16MultiArray> sub_2("Auto_topic", &AutoCallback);

void setup() {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  nh.initNode();
 8004b3c:	4808      	ldr	r0, [pc, #32]	; (8004b60 <setup+0x28>)
 8004b3e:	f000 f98d 	bl	8004e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>
  nh.subscribe(sub);
 8004b42:	4908      	ldr	r1, [pc, #32]	; (8004b64 <setup+0x2c>)
 8004b44:	4806      	ldr	r0, [pc, #24]	; (8004b60 <setup+0x28>)
 8004b46:	f000 f9b2 	bl	8004eae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_>
  nh.subscribe(sub_2);
 8004b4a:	4907      	ldr	r1, [pc, #28]	; (8004b68 <setup+0x30>)
 8004b4c:	4804      	ldr	r0, [pc, #16]	; (8004b60 <setup+0x28>)
 8004b4e:	f000 f9da 	bl	8004f06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs15Int16MultiArrayEvEEEEbRT_>
  nh.advertise(pub);
 8004b52:	4906      	ldr	r1, [pc, #24]	; (8004b6c <setup+0x34>)
 8004b54:	4802      	ldr	r0, [pc, #8]	; (8004b60 <setup+0x28>)
 8004b56:	f000 fa02 	bl	8004f5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
}
 8004b5a:	bf00      	nop
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20001204 	.word	0x20001204
 8004b64:	20002378 	.word	0x20002378
 8004b68:	20002394 	.word	0x20002394
 8004b6c:	20002364 	.word	0x20002364

08004b70 <loop>:

void loop() {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0

  int16_t data[4];
  data[0]= position2;
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <loop+0x50>)
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b21b      	sxth	r3, r3
 8004b7c:	803b      	strh	r3, [r7, #0]
  data[1]= position1;
 8004b7e:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <loop+0x54>)
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b21b      	sxth	r3, r3
 8004b84:	807b      	strh	r3, [r7, #2]
  data[2]= position3;
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <loop+0x58>)
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b21b      	sxth	r3, r3
 8004b8c:	80bb      	strh	r3, [r7, #4]
  data[3]= position4;
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <loop+0x5c>)
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b21b      	sxth	r3, r3
 8004b94:	80fb      	strh	r3, [r7, #6]
  arr_msg.data_length = 4;
 8004b96:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <loop+0x60>)
 8004b98:	2204      	movs	r2, #4
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24
  arr_msg.data = data;
 8004b9c:	4a0c      	ldr	r2, [pc, #48]	; (8004bd0 <loop+0x60>)
 8004b9e:	463b      	mov	r3, r7
 8004ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
  pub.publish(&arr_msg);
 8004ba2:	490b      	ldr	r1, [pc, #44]	; (8004bd0 <loop+0x60>)
 8004ba4:	480b      	ldr	r0, [pc, #44]	; (8004bd4 <loop+0x64>)
 8004ba6:	f7ff f9f5 	bl	8003f94 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  HAL_Delay(10);
 8004baa:	200a      	movs	r0, #10
 8004bac:	f001 f9a8 	bl	8005f00 <HAL_Delay>

  nh.spinOnce();
 8004bb0:	4809      	ldr	r0, [pc, #36]	; (8004bd8 <loop+0x68>)
 8004bb2:	f000 fa01 	bl	8004fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>

}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	200001b4 	.word	0x200001b4
 8004bc4:	200001b2 	.word	0x200001b2
 8004bc8:	200001b6 	.word	0x200001b6
 8004bcc:	200001b8 	.word	0x200001b8
 8004bd0:	20002334 	.word	0x20002334
 8004bd4:	20002364 	.word	0x20002364
 8004bd8:	20001204 	.word	0x20001204

08004bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	e00c      	b.n	8004c06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	fa22 f103 	lsr.w	r1, r2, r3
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	b2ca      	uxtb	r2, r1
 8004bfe:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3301      	adds	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	d9ef      	bls.n	8004bec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8004c0c:	bf00      	nop
 8004c0e:	bf00      	nop
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	e010      	b.n	8004c50 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	440a      	add	r2, r1
 8004c38:	7812      	ldrb	r2, [r2, #0]
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	00d2      	lsls	r2, r2, #3
 8004c40:	fa01 f202 	lsl.w	r2, r1, r2
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d9eb      	bls.n	8004c2e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8004c56:	bf00      	nop
 8004c58:	bf00      	nop
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr
	...

08004c64 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	4a04      	ldr	r2, [pc, #16]	; (8004c80 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	08008f94 	.word	0x08008f94

08004c84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff ffe8 	bl	8004c64 <_ZN3ros15NodeHandleBase_C1Ev>
 8004c94:	4a44      	ldr	r2, [pc, #272]	; (8004da8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x124>)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff faba 	bl	8004218 <_ZN13STM32HardwareC1Ev>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe fe97 	bl	80039ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e009      	b.n	8004cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x54>
      publishers[i] = 0;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8004ccc:	2100      	movs	r1, #0
 8004cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2b18      	cmp	r3, #24
 8004cdc:	d9f2      	bls.n	8004cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	e00a      	b.n	8004cfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x76>
      subscribers[i] = 0;
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b18      	cmp	r3, #24
 8004cfe:	d9f1      	bls.n	8004ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	e008      	b.n	8004d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x94>
      message_in[i] = 0;
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	2200      	movs	r2, #0
 8004d10:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3301      	adds	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1e:	d3f2      	bcc.n	8004d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004d20:	2300      	movs	r3, #0
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	e009      	b.n	8004d3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0xb6>
      message_out[i] = 0;
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	3301      	adds	r3, #1
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d40:	d3f1      	bcc.n	8004d26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d48:	461a      	mov	r2, r3
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    req_param_resp.ints = NULL;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d56:	461a      	mov	r2, r3
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    req_param_resp.floats_length = 0;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d64:	461a      	mov	r2, r3
 8004d66:	2300      	movs	r3, #0
 8004d68:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.floats = NULL;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d72:	461a      	mov	r2, r3
 8004d74:	2300      	movs	r3, #0
 8004d76:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    req_param_resp.ints_length = 0;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d80:	461a      	mov	r2, r3
 8004d82:	2300      	movs	r3, #0
 8004d84:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    req_param_resp.ints = NULL;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d8e:	461a      	mov	r2, r3
 8004d90:	2300      	movs	r3, #0
 8004d92:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    spin_timeout_ = 0;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	615a      	str	r2, [r3, #20]
  }
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	08008f08 	.word	0x08008f08

08004dac <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	08008f7c 	.word	0x08008f7c

08004dcc <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff ffe5 	bl	8004dac <_ZN3ros11Subscriber_C1Ev>
 8004de2:	4a0b      	ldr	r2, [pc, #44]	; (8004e10 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	330c      	adds	r3, #12
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fa5b 	bl	80042a8 <_ZN8std_msgs5Int16C1Ev>
    cb_(cb),
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	609a      	str	r2, [r3, #8]
  };
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	08008ef0 	.word	0x08008ef0

08004e14 <_ZN3ros10SubscriberIN8std_msgs15Int16MultiArrayEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff ffc1 	bl	8004dac <_ZN3ros11Subscriber_C1Ev>
 8004e2a:	4a0b      	ldr	r2, [pc, #44]	; (8004e58 <_ZN3ros10SubscriberIN8std_msgs15Int16MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	330c      	adds	r3, #12
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fd31 	bl	800489c <_ZN8std_msgs15Int16MultiArrayC1Ev>
    cb_(cb),
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	63da      	str	r2, [r3, #60]	; 0x3c
    endpoint_(endpoint)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40
    topic_ = topic_name;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	609a      	str	r2, [r3, #8]
  };
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	08008ed8 	.word	0x08008ed8

08004e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff f9e5 	bl	8004238 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e74:	461a      	mov	r2, r3
 8004e76:	2300      	movs	r3, #0
 8004e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    bytes_ = 0;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e82:	461a      	mov	r2, r3
 8004e84:	2300      	movs	r3, #0
 8004e86:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    index_ = 0;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e90:	461a      	mov	r2, r3
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    topic_ = 0;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  };
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	e01a      	b.n	8004ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10e      	bne.n	8004eee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	605a      	str	r2, [r3, #4]
        return true;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e006      	b.n	8004efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b18      	cmp	r3, #24
 8004ef8:	dde1      	ble.n	8004ebe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x10>
      }
    }
    return false;
 8004efa:	2300      	movs	r3, #0
  }
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr

08004f06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs15Int16MultiArrayEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e01a      	b.n	8004f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs15Int16MultiArrayEvEEEEbRT_+0x46>
      if (subscribers[i] == 0) // empty slot
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10e      	bne.n	8004f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs15Int16MultiArrayEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	605a      	str	r2, [r3, #4]
        return true;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e006      	b.n	8004f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs15Int16MultiArrayEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b18      	cmp	r3, #24
 8004f50:	dde1      	ble.n	8004f16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs15Int16MultiArrayEvEEEEbRT_+0x10>
    return false;
 8004f52:	2300      	movs	r3, #0
  }
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr

08004f5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8004f5e:	b480      	push	{r7}
 8004f60:	b085      	sub	sp, #20
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e01b      	b.n	8004fa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x48>
      if (publishers[i] == 0) // empty slot
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8004f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d110      	bne.n	8004fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x42>
        publishers[i] = &p;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	60da      	str	r2, [r3, #12]
        return true;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e006      	b.n	8004fae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b18      	cmp	r3, #24
 8004faa:	dde0      	ble.n	8004f6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8004fac:	2300      	movs	r3, #0
  }
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>:
  virtual int spinOnce()
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff f963 	bl	8004290 <_ZN13STM32Hardware4timeEv>
 8004fca:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d905      	bls.n	8004fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x36>
      configured_ = false;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    if (mode_ != MODE_FIRST_FF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00e      	beq.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005002:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	429a      	cmp	r2, r3
 800500a:	d906      	bls.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005012:	461a      	mov	r2, r3
 8005014:	2300      	movs	r3, #0
 8005016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      if (spin_timeout_ > 0)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d013      	beq.n	800504a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x92>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3304      	adds	r3, #4
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff f932 	bl	8004290 <_ZN13STM32Hardware4timeEv>
 800502c:	4602      	mov	r2, r0
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1ad2      	subs	r2, r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	429a      	cmp	r2, r3
 8005038:	bf8c      	ite	hi
 800503a:	2301      	movhi	r3, #1
 800503c:	2300      	movls	r3, #0
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x92>
          return SPIN_TIMEOUT;
 8005044:	f06f 0301 	mvn.w	r3, #1
 8005048:	e21d      	b.n	8005486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4ce>
      int data = hardware_.read();
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3304      	adds	r3, #4
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff f8ff 	bl	8004252 <_ZN13STM32Hardware4readEv>
 8005054:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f2c0 81f6 	blt.w	800544a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x492>
      checksum_ += data;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005064:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4413      	add	r3, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005072:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005080:	2b07      	cmp	r3, #7
 8005082:	d12a      	bne.n	80050da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x122>
        message_in[index_++] = data;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8005096:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	b2d1      	uxtb	r1, r2
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	460a      	mov	r2, r1
 80050a4:	761a      	strb	r2, [r3, #24]
        bytes_--;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050b0:	3b01      	subs	r3, #1
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1a7      	bne.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d0:	461a      	mov	r2, r3
 80050d2:	2308      	movs	r3, #8
 80050d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050d8:	e79f      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d130      	bne.n	800514a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x192>
        if (data == 0xff)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2bff      	cmp	r3, #255	; 0xff
 80050ec:	d112      	bne.n	8005114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x15c>
          mode_++;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050f8:	3301      	adds	r3, #1
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005100:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3314      	adds	r3, #20
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800510e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8005112:	e782      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff f8b9 	bl	8004290 <_ZN13STM32Hardware4timeEv>
 800511e:	4602      	mov	r2, r0
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f241 3288 	movw	r2, #5000	; 0x1388
 8005128:	4293      	cmp	r3, r2
 800512a:	bf8c      	ite	hi
 800512c:	2301      	movhi	r3, #1
 800512e:	2300      	movls	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	f43f af71 	beq.w	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          configured_ = false;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513e:	2200      	movs	r2, #0
 8005140:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
          return SPIN_TIMEOUT;
 8005144:	f06f 0301 	mvn.w	r3, #1
 8005148:	e19d      	b.n	8005486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4ce>
      else if (mode_ == MODE_PROTOCOL_VER)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005154:	2b01      	cmp	r3, #1
 8005156:	d121      	bne.n	800519c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1e4>
        if (data == PROTOCOL_VER)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2bfe      	cmp	r3, #254	; 0xfe
 800515c:	d10b      	bne.n	8005176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1be>
          mode_++;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005168:	3301      	adds	r3, #1
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005174:	e751      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517c:	461a      	mov	r2, r3
 800517e:	2300      	movs	r3, #0
 8005180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
          if (configured_ == false)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800518a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800518e:	2b00      	cmp	r3, #0
 8005190:	f47f af43 	bne.w	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f97a 	bl	800548e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
 800519a:	e73e      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d120      	bne.n	80051ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x234>
        bytes_ = data;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b0:	461a      	mov	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
        index_ = 0;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051be:	461a      	mov	r2, r3
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        mode_++;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051d0:	3301      	adds	r3, #1
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
        checksum_ = data;               /* first byte for calculating size checksum */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e2:	461a      	mov	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80051ea:	e716      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d118      	bne.n	800522c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x274>
        bytes_ += data << 8;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005200:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	4413      	add	r3, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005210:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
        mode_++;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800521a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800521e:	3301      	adds	r3, #1
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800522a:	e6f6      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005236:	2b04      	cmp	r3, #4
 8005238:	d11f      	bne.n	800527a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2c2>
        if ((checksum_ % 256) == 255)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005244:	425a      	negs	r2, r3
 8005246:	b2db      	uxtb	r3, r3
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	bf58      	it	pl
 800524c:	4253      	negpl	r3, r2
 800524e:	2bff      	cmp	r3, #255	; 0xff
 8005250:	d10b      	bne.n	800526a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2b2>
          mode_++;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800525c:	3301      	adds	r3, #1
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005268:	e6d7      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005270:	461a      	mov	r2, r3
 8005272:	2300      	movs	r3, #0
 8005274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005278:	e6cf      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005284:	2b05      	cmp	r3, #5
 8005286:	d119      	bne.n	80052bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x304>
        topic_ = data;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800528e:	461a      	mov	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
        mode_++;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800529c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052a0:	3301      	adds	r3, #1
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
        checksum_ = data;               /* first byte included in checksum */
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b2:	461a      	mov	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80052ba:	e6ae      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	d123      	bne.n	8005312 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x35a>
        topic_ += data << 8;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	4413      	add	r3, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
        mode_ = MODE_MESSAGE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ea:	461a      	mov	r2, r3
 80052ec:	2307      	movs	r3, #7
 80052ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
        if (bytes_ == 0)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f47f ae8c 	bne.w	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005308:	461a      	mov	r2, r3
 800530a:	2308      	movs	r3, #8
 800530c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005310:	e683      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800531c:	2b08      	cmp	r3, #8
 800531e:	f47f ae7c 	bne.w	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005328:	461a      	mov	r2, r3
 800532a:	2300      	movs	r3, #0
 800532c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
        if ((checksum_ % 256) == 255)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800533a:	425a      	negs	r2, r3
 800533c:	b2db      	uxtb	r3, r3
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	bf58      	it	pl
 8005342:	4253      	negpl	r3, r2
 8005344:	2bff      	cmp	r3, #255	; 0xff
 8005346:	f47f ae68 	bne.w	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d116      	bne.n	8005386 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3ce>
            requestSyncTime();
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f898 	bl	800548e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
            negotiateTopics();
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f8b2 	bl	80054c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800536a:	461a      	mov	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
            last_sync_receive_time = c_time;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005378:	461a      	mov	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
            return SPIN_ERR;
 8005380:	f04f 33ff 	mov.w	r3, #4294967295
 8005384:	e07f      	b.n	8005486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4ce>
          else if (topic_ == TopicInfo::ID_TIME)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800538c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005390:	2b0a      	cmp	r3, #10
 8005392:	d106      	bne.n	80053a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3ea>
            syncTime(message_in);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3318      	adds	r3, #24
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f976 	bl	800568c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>
 80053a0:	e63b      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053ac:	2b06      	cmp	r3, #6
 80053ae:	d110      	bne.n	80053d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x41a>
            req_param_resp.deserialize(message_in);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80053b6:	3308      	adds	r3, #8
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	3218      	adds	r2, #24
 80053bc:	4611      	mov	r1, r2
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe fc49 	bl	8003c56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 80053d0:	e623      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053dc:	2b0b      	cmp	r3, #11
 80053de:	d106      	bne.n	80053ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x436>
            configured_ = false;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 80053ec:	e615      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053f8:	3b64      	subs	r3, #100	; 0x64
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f43f ae07 	beq.w	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005416:	3b64      	subs	r3, #100	; 0x64
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	6858      	ldr	r0, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800542e:	3b64      	subs	r3, #100	; 0x64
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	3218      	adds	r2, #24
 8005444:	4611      	mov	r1, r2
 8005446:	4798      	blx	r3
    while (true)
 8005448:	e5e7      	b.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        break;
 800544a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005452:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d014      	beq.n	8005484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4cc>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005460:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800546c:	4293      	cmp	r3, r2
 800546e:	d909      	bls.n	8005484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4cc>
      requestSyncTime();
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f80c 	bl	800548e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800547c:	461a      	mov	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    return SPIN_OK;
 8005484:	2300      	movs	r3, #0
  }
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>:
  void requestSyncTime()
 800548e:	b580      	push	{r7, lr}
 8005490:	b086      	sub	sp, #24
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005496:	f107 030c 	add.w	r3, r7, #12
 800549a:	4618      	mov	r0, r3
 800549c:	f7fd ff50 	bl	8003340 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f107 020c 	add.w	r2, r7, #12
 80054aa:	210a      	movs	r1, #10
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4798      	blx	r3
    rt_time = hardware_.time();
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fe feeb 	bl	8004290 <_ZN13STM32Hardware4timeEv>
 80054ba:	4602      	mov	r2, r0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	609a      	str	r2, [r3, #8]
  }
 80054c0:	bf00      	nop
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80054c8:	b590      	push	{r4, r7, lr}
 80054ca:	b08b      	sub	sp, #44	; 0x2c
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80054d0:	f107 030c 	add.w	r3, r7, #12
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fe f81d 	bl	8003514 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80054da:	2300      	movs	r3, #0
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
 80054de:	e05a      	b.n	8005596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e4:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80054e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d04f      	beq.n	8005590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f4:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80054f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	f202 4206 	addw	r2, r2, #1030	; 0x406
 800550a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005516:	f202 4206 	addw	r2, r2, #1030	; 0x406
 800551a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551e:	6859      	ldr	r1, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005524:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3308      	adds	r3, #8
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4608      	mov	r0, r1
 8005536:	4798      	blx	r3
 8005538:	4603      	mov	r3, r0
 800553a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005540:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005548:	6859      	ldr	r1, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554e:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	330c      	adds	r3, #12
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4608      	mov	r0, r1
 8005560:	4798      	blx	r3
 8005562:	4603      	mov	r3, r0
 8005564:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005566:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800556a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681c      	ldr	r4, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005576:	f202 4206 	addw	r2, r2, #1030	; 0x406
 800557a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557e:	4618      	mov	r0, r3
 8005580:	f7fe fd1c 	bl	8003fbc <_ZN3ros9Publisher15getEndpointTypeEv>
 8005584:	4601      	mov	r1, r0
 8005586:	f107 030c 	add.w	r3, r7, #12
 800558a:	461a      	mov	r2, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	3301      	adds	r3, #1
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	2b18      	cmp	r3, #24
 800559a:	dda1      	ble.n	80054e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800559c:	2300      	movs	r3, #0
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
 80055a0:	e067      	b.n	8005672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d05b      	beq.n	800566c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	6859      	ldr	r1, [r3, #4]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3308      	adds	r3, #8
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4608      	mov	r0, r1
 80055fe:	4798      	blx	r3
 8005600:	4603      	mov	r3, r0
 8005602:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	6859      	ldr	r1, [r3, #4]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4608      	mov	r0, r1
 8005628:	4798      	blx	r3
 800562a:	4603      	mov	r3, r0
 800562c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800562e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005632:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681c      	ldr	r4, [r3, #0]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	6859      	ldr	r1, [r3, #4]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3304      	adds	r3, #4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4608      	mov	r0, r1
 800565e:	4798      	blx	r3
 8005660:	4601      	mov	r1, r0
 8005662:	f107 030c 	add.w	r3, r7, #12
 8005666:	461a      	mov	r2, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	3301      	adds	r3, #1
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	2b18      	cmp	r3, #24
 8005676:	dd94      	ble.n	80055a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800567e:	2201      	movs	r2, #1
 8005680:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
  }
 8005684:	bf00      	nop
 8005686:	372c      	adds	r7, #44	; 0x2c
 8005688:	46bd      	mov	sp, r7
 800568a:	bd90      	pop	{r4, r7, pc}

0800568c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005696:	f107 0308 	add.w	r3, r7, #8
 800569a:	4618      	mov	r0, r3
 800569c:	f7fd fe50 	bl	8003340 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fe fdf3 	bl	8004290 <_ZN13STM32Hardware4timeEv>
 80056aa:	4602      	mov	r2, r0
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80056b4:	f107 0308 	add.w	r3, r7, #8
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fd feaf 	bl	800341e <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	4915      	ldr	r1, [pc, #84]	; (800571c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x90>)
 80056c6:	fba1 1303 	umull	r1, r3, r1, r3
 80056ca:	099b      	lsrs	r3, r3, #6
 80056cc:	4413      	add	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80056d0:	6939      	ldr	r1, [r7, #16]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4b11      	ldr	r3, [pc, #68]	; (800571c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x90>)
 80056d6:	fba3 0302 	umull	r0, r3, r3, r2
 80056da:	099b      	lsrs	r3, r3, #6
 80056dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056e0:	fb00 f303 	mul.w	r3, r0, r3
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	4a0e      	ldr	r2, [pc, #56]	; (8005720 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x94>)
 80056e8:	fb02 f303 	mul.w	r3, r2, r3
 80056ec:	440b      	add	r3, r1
 80056ee:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80056f0:	f107 0308 	add.w	r3, r7, #8
 80056f4:	3304      	adds	r3, #4
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f8a9 	bl	8005850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3304      	adds	r3, #4
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fdc4 	bl	8004290 <_ZN13STM32Hardware4timeEv>
 8005708:	4602      	mov	r2, r0
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005710:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  }
 8005714:	bf00      	nop
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	10624dd3 	.word	0x10624dd3
 8005720:	000f4240 	.word	0x000f4240

08005724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b63      	cmp	r3, #99	; 0x63
 8005734:	dd0b      	ble.n	800574e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800573c:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8005740:	f083 0301 	eor.w	r3, r3, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800574a:	2300      	movs	r3, #0
 800574c:	e079      	b.n	8005842 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800575a:	3207      	adds	r2, #7
 800575c:	4611      	mov	r1, r2
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	4798      	blx	r3
 8005762:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	22ff      	movs	r2, #255	; 0xff
 8005768:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
    message_out[1] = PROTOCOL_VER;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	22fe      	movs	r2, #254	; 0xfe
 8005770:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f883 281a 	strb.w	r2, [r3, #2074]	; 0x81a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	b29b      	uxth	r3, r3
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	b29b      	uxth	r3, r3
 8005786:	b2da      	uxtb	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 281a 	ldrb.w	r2, [r3, #2074]	; 0x81a
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 381b 	ldrb.w	r3, [r3, #2075]	; 0x81b
 800579a:	4413      	add	r3, r2
 800579c:	b2db      	uxtb	r3, r3
 800579e:	43db      	mvns	r3, r3
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f883 281d 	strb.w	r2, [r3, #2077]	; 0x81d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	b21b      	sxth	r3, r3
 80057b6:	121b      	asrs	r3, r3, #8
 80057b8:	b21b      	sxth	r3, r3
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f883 281e 	strb.w	r2, [r3, #2078]	; 0x81e

    /* calculate checksum */
    int chk = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80057c6:	2305      	movs	r3, #5
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	e00c      	b.n	80057e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xc2>
      chk += message_out[i];
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	4413      	add	r3, r2
 80057d2:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	4413      	add	r3, r2
 80057de:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	3301      	adds	r3, #1
 80057e4:	61bb      	str	r3, [r7, #24]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	3306      	adds	r3, #6
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	dded      	ble.n	80057cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xa8>
    l += 7;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	3307      	adds	r3, #7
 80057f4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	425a      	negs	r2, r3
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	bf58      	it	pl
 8005800:	4253      	negpl	r3, r2
 8005802:	b2da      	uxtb	r2, r3
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	1c59      	adds	r1, r3, #1
 8005808:	6179      	str	r1, [r7, #20]
 800580a:	43d2      	mvns	r2, r2
 800580c:	b2d1      	uxtb	r1, r2
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4413      	add	r3, r2
 8005812:	460a      	mov	r2, r1
 8005814:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818

    if (l <= OUTPUT_SIZE)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800581e:	dc0a      	bgt.n	8005836 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	1d18      	adds	r0, r3, #4
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4619      	mov	r1, r3
 800582e:	f7fe fd1e 	bl	800426e <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	e005      	b.n	8005842 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005836:	4905      	ldr	r1, [pc, #20]	; (800584c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x128>)
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f83d 	bl	80058b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>
      return -1;
 800583e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8005842:	4618      	mov	r0, r3
 8005844:	3720      	adds	r7, #32
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	08008e54 	.word	0x08008e54

08005850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3304      	adds	r3, #4
 800585e:	4618      	mov	r0, r3
 8005860:	f7fe fd16 	bl	8004290 <_ZN13STM32Hardware4timeEv>
 8005864:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	490f      	ldr	r1, [pc, #60]	; (80058ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x5c>)
 800586e:	fba1 1303 	umull	r1, r3, r1, r3
 8005872:	099b      	lsrs	r3, r3, #6
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	1e5a      	subs	r2, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	6859      	ldr	r1, [r3, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x5c>)
 8005884:	fba3 0302 	umull	r0, r3, r3, r2
 8005888:	099b      	lsrs	r3, r3, #6
 800588a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800588e:	fb00 f303 	mul.w	r3, r0, r3
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	4a06      	ldr	r2, [pc, #24]	; (80058b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x60>)
 8005896:	fb02 f303 	mul.w	r3, r2, r3
 800589a:	1aca      	subs	r2, r1, r3
 800589c:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x64>)
 800589e:	4413      	add	r3, r2
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6113      	str	r3, [r2, #16]
  }
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	10624dd3 	.word	0x10624dd3
 80058b0:	000f4240 	.word	0x000f4240
 80058b4:	3b9aca00 	.word	0x3b9aca00

080058b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	2103      	movs	r1, #3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f804 	bl	80058d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>
  }
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>:
  void log(char byte, const char * msg)
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	460b      	mov	r3, r1
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80058e2:	f107 0314 	add.w	r3, r7, #20
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fd ffd4 	bl	8003894 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80058ec:	7afb      	ldrb	r3, [r7, #11]
 80058ee:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f107 0214 	add.w	r2, r7, #20
 80058fe:	2107      	movs	r1, #7
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	4798      	blx	r3
  }
 8005904:	bf00      	nop
 8005906:	3720      	adds	r7, #32
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <_Z41__static_initialization_and_destruction_0ii>:
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d120      	bne.n	800595e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005922:	4293      	cmp	r3, r2
 8005924:	d11b      	bne.n	800595e <_Z41__static_initialization_and_destruction_0ii+0x52>
SerialClass serial(huart1);
 8005926:	4910      	ldr	r1, [pc, #64]	; (8005968 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005928:	4810      	ldr	r0, [pc, #64]	; (800596c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800592a:	f7fe fb52 	bl	8003fd2 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 800592e:	4810      	ldr	r0, [pc, #64]	; (8005970 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005930:	f7ff f9a8 	bl	8004c84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>
std_msgs::Int16MultiArray arr_msg;
 8005934:	480f      	ldr	r0, [pc, #60]	; (8005974 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8005936:	f7fe ffb1 	bl	800489c <_ZN8std_msgs15Int16MultiArrayC1Ev>
ros::Publisher pub("wheel_ticks", &arr_msg);
 800593a:	2300      	movs	r3, #0
 800593c:	4a0d      	ldr	r2, [pc, #52]	; (8005974 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800593e:	490e      	ldr	r1, [pc, #56]	; (8005978 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005940:	480e      	ldr	r0, [pc, #56]	; (800597c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005942:	f7fe fb11 	bl	8003f68 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int16> sub("mode_topic", &RoboCallback);
 8005946:	2301      	movs	r3, #1
 8005948:	4a0d      	ldr	r2, [pc, #52]	; (8005980 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800594a:	490e      	ldr	r1, [pc, #56]	; (8005984 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800594c:	480e      	ldr	r0, [pc, #56]	; (8005988 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800594e:	f7ff fa3d 	bl	8004dcc <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int16MultiArray> sub_2("Auto_topic", &AutoCallback);
 8005952:	2301      	movs	r3, #1
 8005954:	4a0d      	ldr	r2, [pc, #52]	; (800598c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005956:	490e      	ldr	r1, [pc, #56]	; (8005990 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005958:	480e      	ldr	r0, [pc, #56]	; (8005994 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800595a:	f7ff fa5b 	bl	8004e14 <_ZN3ros10SubscriberIN8std_msgs15Int16MultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 800595e:	bf00      	nop
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	200000ac 	.word	0x200000ac
 800596c:	200001f8 	.word	0x200001f8
 8005970:	20001204 	.word	0x20001204
 8005974:	20002334 	.word	0x20002334
 8005978:	08008e90 	.word	0x08008e90
 800597c:	20002364 	.word	0x20002364
 8005980:	08004ad1 	.word	0x08004ad1
 8005984:	08008e9c 	.word	0x08008e9c
 8005988:	20002378 	.word	0x20002378
 800598c:	08004af1 	.word	0x08004af1
 8005990:	08008ea8 	.word	0x08008ea8
 8005994:	20002394 	.word	0x20002394

08005998 <_ZN3ros10SubscriberIN8std_msgs15Int16MultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	330c      	adds	r3, #12
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe fff7 	bl	800499c <_ZN8std_msgs15Int16MultiArray11deserializeEPh>
    this->cb_(msg);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	320c      	adds	r2, #12
 80059b6:	4610      	mov	r0, r2
 80059b8:	4798      	blx	r3
  }
 80059ba:	bf00      	nop
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <_ZN3ros10SubscriberIN8std_msgs15Int16MultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <_ZN3ros10SubscriberIN8std_msgs15Int16MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	330c      	adds	r3, #12
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff f85b 	bl	8004aa0 <_ZN8std_msgs15Int16MultiArray7getTypeEv>
 80059ea:	4603      	mov	r3, r0
  }
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <_ZN3ros10SubscriberIN8std_msgs15Int16MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	330c      	adds	r3, #12
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff f859 	bl	8004ab8 <_ZN8std_msgs15Int16MultiArray6getMD5Ev>
 8005a06:	4603      	mov	r3, r0
  }
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	330c      	adds	r3, #12
 8005a1e:	6839      	ldr	r1, [r7, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe fc7a 	bl	800431a <_ZN8std_msgs5Int1611deserializeEPh>
    this->cb_(msg);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	320c      	adds	r2, #12
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4798      	blx	r3
  }
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <_ZN3ros10SubscriberIN8std_msgs5Int16EvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
  }
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr

08005a50 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fe fc89 	bl	8004374 <_ZN8std_msgs5Int167getTypeEv>
 8005a62:	4603      	mov	r3, r0
  }
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <_ZN3ros10SubscriberIN8std_msgs5Int16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	330c      	adds	r3, #12
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fe fc87 	bl	800438c <_ZN8std_msgs5Int166getMD5Ev>
 8005a7e:	4603      	mov	r3, r0
  }
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9connectedEv>:
  virtual bool connected()
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
    return configured_;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a96:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
  };
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr

08005aa4 <_GLOBAL__sub_I_serial>:
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005aac:	2001      	movs	r0, #1
 8005aae:	f7ff ff2d 	bl	800590c <_Z41__static_initialization_and_destruction_0ii>
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aba:	2300      	movs	r3, #0
 8005abc:	607b      	str	r3, [r7, #4]
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <HAL_MspInit+0x48>)
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac2:	4a0e      	ldr	r2, [pc, #56]	; (8005afc <HAL_MspInit+0x48>)
 8005ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8005aca:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <HAL_MspInit+0x48>)
 8005acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	4b08      	ldr	r3, [pc, #32]	; (8005afc <HAL_MspInit+0x48>)
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	4a07      	ldr	r2, [pc, #28]	; (8005afc <HAL_MspInit+0x48>)
 8005ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ae6:	4b05      	ldr	r3, [pc, #20]	; (8005afc <HAL_MspInit+0x48>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr
 8005afc:	40023800 	.word	0x40023800

08005b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	; 0x28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b08:	f107 0314 	add.w	r3, r7, #20
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	605a      	str	r2, [r3, #4]
 8005b12:	609a      	str	r2, [r3, #8]
 8005b14:	60da      	str	r2, [r3, #12]
 8005b16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a4d      	ldr	r2, [pc, #308]	; (8005c54 <HAL_UART_MspInit+0x154>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	f040 8093 	bne.w	8005c4a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b24:	2300      	movs	r3, #0
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	4b4b      	ldr	r3, [pc, #300]	; (8005c58 <HAL_UART_MspInit+0x158>)
 8005b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2c:	4a4a      	ldr	r2, [pc, #296]	; (8005c58 <HAL_UART_MspInit+0x158>)
 8005b2e:	f043 0310 	orr.w	r3, r3, #16
 8005b32:	6453      	str	r3, [r2, #68]	; 0x44
 8005b34:	4b48      	ldr	r3, [pc, #288]	; (8005c58 <HAL_UART_MspInit+0x158>)
 8005b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	4b44      	ldr	r3, [pc, #272]	; (8005c58 <HAL_UART_MspInit+0x158>)
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	4a43      	ldr	r2, [pc, #268]	; (8005c58 <HAL_UART_MspInit+0x158>)
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8005b50:	4b41      	ldr	r3, [pc, #260]	; (8005c58 <HAL_UART_MspInit+0x158>)
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005b5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b62:	2302      	movs	r3, #2
 8005b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b6e:	2307      	movs	r3, #7
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b72:	f107 0314 	add.w	r3, r7, #20
 8005b76:	4619      	mov	r1, r3
 8005b78:	4838      	ldr	r0, [pc, #224]	; (8005c5c <HAL_UART_MspInit+0x15c>)
 8005b7a:	f000 fef1 	bl	8006960 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005b7e:	4b38      	ldr	r3, [pc, #224]	; (8005c60 <HAL_UART_MspInit+0x160>)
 8005b80:	4a38      	ldr	r2, [pc, #224]	; (8005c64 <HAL_UART_MspInit+0x164>)
 8005b82:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005b84:	4b36      	ldr	r3, [pc, #216]	; (8005c60 <HAL_UART_MspInit+0x160>)
 8005b86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b8c:	4b34      	ldr	r3, [pc, #208]	; (8005c60 <HAL_UART_MspInit+0x160>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b92:	4b33      	ldr	r3, [pc, #204]	; (8005c60 <HAL_UART_MspInit+0x160>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b98:	4b31      	ldr	r3, [pc, #196]	; (8005c60 <HAL_UART_MspInit+0x160>)
 8005b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ba0:	4b2f      	ldr	r3, [pc, #188]	; (8005c60 <HAL_UART_MspInit+0x160>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ba6:	4b2e      	ldr	r3, [pc, #184]	; (8005c60 <HAL_UART_MspInit+0x160>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005bac:	4b2c      	ldr	r3, [pc, #176]	; (8005c60 <HAL_UART_MspInit+0x160>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005bb2:	4b2b      	ldr	r3, [pc, #172]	; (8005c60 <HAL_UART_MspInit+0x160>)
 8005bb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005bb8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005bba:	4b29      	ldr	r3, [pc, #164]	; (8005c60 <HAL_UART_MspInit+0x160>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005bc0:	4827      	ldr	r0, [pc, #156]	; (8005c60 <HAL_UART_MspInit+0x160>)
 8005bc2:	f000 facf 	bl	8006164 <HAL_DMA_Init>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8005bcc:	f7fd f9f0 	bl	8002fb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a23      	ldr	r2, [pc, #140]	; (8005c60 <HAL_UART_MspInit+0x160>)
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38
 8005bd6:	4a22      	ldr	r2, [pc, #136]	; (8005c60 <HAL_UART_MspInit+0x160>)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005bdc:	4b22      	ldr	r3, [pc, #136]	; (8005c68 <HAL_UART_MspInit+0x168>)
 8005bde:	4a23      	ldr	r2, [pc, #140]	; (8005c6c <HAL_UART_MspInit+0x16c>)
 8005be0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005be2:	4b21      	ldr	r3, [pc, #132]	; (8005c68 <HAL_UART_MspInit+0x168>)
 8005be4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005be8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bea:	4b1f      	ldr	r3, [pc, #124]	; (8005c68 <HAL_UART_MspInit+0x168>)
 8005bec:	2240      	movs	r2, #64	; 0x40
 8005bee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bf0:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <HAL_UART_MspInit+0x168>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005bf6:	4b1c      	ldr	r3, [pc, #112]	; (8005c68 <HAL_UART_MspInit+0x168>)
 8005bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bfc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bfe:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <HAL_UART_MspInit+0x168>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c04:	4b18      	ldr	r3, [pc, #96]	; (8005c68 <HAL_UART_MspInit+0x168>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005c0a:	4b17      	ldr	r3, [pc, #92]	; (8005c68 <HAL_UART_MspInit+0x168>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005c10:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <HAL_UART_MspInit+0x168>)
 8005c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c16:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c18:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <HAL_UART_MspInit+0x168>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005c1e:	4812      	ldr	r0, [pc, #72]	; (8005c68 <HAL_UART_MspInit+0x168>)
 8005c20:	f000 faa0 	bl	8006164 <HAL_DMA_Init>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8005c2a:	f7fd f9c1 	bl	8002fb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a0d      	ldr	r2, [pc, #52]	; (8005c68 <HAL_UART_MspInit+0x168>)
 8005c32:	635a      	str	r2, [r3, #52]	; 0x34
 8005c34:	4a0c      	ldr	r2, [pc, #48]	; (8005c68 <HAL_UART_MspInit+0x168>)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	2025      	movs	r0, #37	; 0x25
 8005c40:	f000 fa59 	bl	80060f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005c44:	2025      	movs	r0, #37	; 0x25
 8005c46:	f000 fa72 	bl	800612e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005c4a:	bf00      	nop
 8005c4c:	3728      	adds	r7, #40	; 0x28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40011000 	.word	0x40011000
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	40020000 	.word	0x40020000
 8005c60:	200000f0 	.word	0x200000f0
 8005c64:	40026440 	.word	0x40026440
 8005c68:	20000150 	.word	0x20000150
 8005c6c:	400264b8 	.word	0x400264b8

08005c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005c74:	e7fe      	b.n	8005c74 <NMI_Handler+0x4>

08005c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c76:	b480      	push	{r7}
 8005c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c7a:	e7fe      	b.n	8005c7a <HardFault_Handler+0x4>

08005c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c80:	e7fe      	b.n	8005c80 <MemManage_Handler+0x4>

08005c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c82:	b480      	push	{r7}
 8005c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c86:	e7fe      	b.n	8005c86 <BusFault_Handler+0x4>

08005c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c8c:	e7fe      	b.n	8005c8c <UsageFault_Handler+0x4>

08005c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c92:	bf00      	nop
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr

08005c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c9e:	bf00      	nop
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr

08005ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005caa:	bf00      	nop
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr

08005cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005cb6:	f000 f907 	bl	8005ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005cba:	bf00      	nop
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005cc2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005cc6:	f000 ffff 	bl	8006cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005cca:	bf00      	nop
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005cd4:	4802      	ldr	r0, [pc, #8]	; (8005ce0 <USART1_IRQHandler+0x10>)
 8005cd6:	f001 fd61 	bl	800779c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005cda:	bf00      	nop
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	200000ac 	.word	0x200000ac

08005ce4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005ce8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005cec:	f000 ffec 	bl	8006cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8005cf0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005cf4:	f000 ffe8 	bl	8006cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005cfc:	f000 ffe4 	bl	8006cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005d00:	bf00      	nop
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005d08:	4802      	ldr	r0, [pc, #8]	; (8005d14 <DMA2_Stream2_IRQHandler+0x10>)
 8005d0a:	f000 fbc3 	bl	8006494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005d0e:	bf00      	nop
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	200000f0 	.word	0x200000f0

08005d18 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005d1c:	4802      	ldr	r0, [pc, #8]	; (8005d28 <DMA2_Stream7_IRQHandler+0x10>)
 8005d1e:	f000 fbb9 	bl	8006494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005d22:	bf00      	nop
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000150 	.word	0x20000150

08005d2c <TIM4_IRQHandler>:

/* USER CODE BEGIN 1 */
void TIM4_IRQHandler(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8005d30:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <TIM4_IRQHandler+0x24>)
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	4a06      	ldr	r2, [pc, #24]	; (8005d50 <TIM4_IRQHandler+0x24>)
 8005d36:	f023 0301 	bic.w	r3, r3, #1
 8005d3a:	6113      	str	r3, [r2, #16]
	c_millis++;
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <TIM4_IRQHandler+0x28>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3301      	adds	r3, #1
 8005d42:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <TIM4_IRQHandler+0x28>)
 8005d44:	6013      	str	r3, [r2, #0]
}
 8005d46:	bf00      	nop
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40000800 	.word	0x40000800
 8005d54:	200001bc 	.word	0x200001bc

08005d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d60:	4a14      	ldr	r2, [pc, #80]	; (8005db4 <_sbrk+0x5c>)
 8005d62:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <_sbrk+0x60>)
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d6c:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <_sbrk+0x64>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d74:	4b11      	ldr	r3, [pc, #68]	; (8005dbc <_sbrk+0x64>)
 8005d76:	4a12      	ldr	r2, [pc, #72]	; (8005dc0 <_sbrk+0x68>)
 8005d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d7a:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <_sbrk+0x64>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4413      	add	r3, r2
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d207      	bcs.n	8005d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d88:	f002 fe2a 	bl	80089e0 <__errno>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	220c      	movs	r2, #12
 8005d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d92:	f04f 33ff 	mov.w	r3, #4294967295
 8005d96:	e009      	b.n	8005dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d98:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <_sbrk+0x64>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d9e:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <_sbrk+0x64>)
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4413      	add	r3, r2
 8005da6:	4a05      	ldr	r2, [pc, #20]	; (8005dbc <_sbrk+0x64>)
 8005da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005daa:	68fb      	ldr	r3, [r7, #12]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20010000 	.word	0x20010000
 8005db8:	00000400 	.word	0x00000400
 8005dbc:	200023d8 	.word	0x200023d8
 8005dc0:	20002528 	.word	0x20002528

08005dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005dc8:	bf00      	nop
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bc80      	pop	{r7}
 8005dce:	4770      	bx	lr

08005dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005dd4:	480d      	ldr	r0, [pc, #52]	; (8005e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005dd6:	490e      	ldr	r1, [pc, #56]	; (8005e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005dd8:	4a0e      	ldr	r2, [pc, #56]	; (8005e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ddc:	e002      	b.n	8005de4 <LoopCopyDataInit>

08005dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005de2:	3304      	adds	r3, #4

08005de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005de8:	d3f9      	bcc.n	8005dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005dea:	4a0b      	ldr	r2, [pc, #44]	; (8005e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005dec:	4c0b      	ldr	r4, [pc, #44]	; (8005e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8005dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005df0:	e001      	b.n	8005df6 <LoopFillZerobss>

08005df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005df4:	3204      	adds	r2, #4

08005df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005df8:	d3fb      	bcc.n	8005df2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005dfa:	f7ff ffe3 	bl	8005dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005dfe:	f002 fdf5 	bl	80089ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e02:	f7fc fb3b 	bl	800247c <main>
  bx  lr    
 8005e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005e08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e10:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8005e14:	0800904c 	.word	0x0800904c
  ldr r2, =_sbss
 8005e18:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8005e1c:	20002528 	.word	0x20002528

08005e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e20:	e7fe      	b.n	8005e20 <ADC_IRQHandler>
	...

08005e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e28:	4b0e      	ldr	r3, [pc, #56]	; (8005e64 <HAL_Init+0x40>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a0d      	ldr	r2, [pc, #52]	; (8005e64 <HAL_Init+0x40>)
 8005e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e34:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <HAL_Init+0x40>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a0a      	ldr	r2, [pc, #40]	; (8005e64 <HAL_Init+0x40>)
 8005e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e40:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <HAL_Init+0x40>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a07      	ldr	r2, [pc, #28]	; (8005e64 <HAL_Init+0x40>)
 8005e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e4c:	2003      	movs	r0, #3
 8005e4e:	f000 f947 	bl	80060e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e52:	200f      	movs	r0, #15
 8005e54:	f000 f808 	bl	8005e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e58:	f7ff fe2c 	bl	8005ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40023c00 	.word	0x40023c00

08005e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e70:	4b12      	ldr	r3, [pc, #72]	; (8005ebc <HAL_InitTick+0x54>)
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	4b12      	ldr	r3, [pc, #72]	; (8005ec0 <HAL_InitTick+0x58>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 f95f 	bl	800614a <HAL_SYSTICK_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e00e      	b.n	8005eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b0f      	cmp	r3, #15
 8005e9a:	d80a      	bhi.n	8005eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	f000 f927 	bl	80060f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ea8:	4a06      	ldr	r2, [pc, #24]	; (8005ec4 <HAL_InitTick+0x5c>)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e000      	b.n	8005eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20000030 	.word	0x20000030
 8005ec0:	20000038 	.word	0x20000038
 8005ec4:	20000034 	.word	0x20000034

08005ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <HAL_IncTick+0x1c>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <HAL_IncTick+0x20>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	4a03      	ldr	r2, [pc, #12]	; (8005ee8 <HAL_IncTick+0x20>)
 8005eda:	6013      	str	r3, [r2, #0]
}
 8005edc:	bf00      	nop
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr
 8005ee4:	20000038 	.word	0x20000038
 8005ee8:	200023dc 	.word	0x200023dc

08005eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  return uwTick;
 8005ef0:	4b02      	ldr	r3, [pc, #8]	; (8005efc <HAL_GetTick+0x10>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr
 8005efc:	200023dc 	.word	0x200023dc

08005f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f08:	f7ff fff0 	bl	8005eec <HAL_GetTick>
 8005f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f18:	d005      	beq.n	8005f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <HAL_Delay+0x44>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f26:	bf00      	nop
 8005f28:	f7ff ffe0 	bl	8005eec <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d8f7      	bhi.n	8005f28 <HAL_Delay+0x28>
  {
  }
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000038 	.word	0x20000038

08005f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f58:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <__NVIC_SetPriorityGrouping+0x44>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f64:	4013      	ands	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f7a:	4a04      	ldr	r2, [pc, #16]	; (8005f8c <__NVIC_SetPriorityGrouping+0x44>)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	60d3      	str	r3, [r2, #12]
}
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc80      	pop	{r7}
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	e000ed00 	.word	0xe000ed00

08005f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f94:	4b04      	ldr	r3, [pc, #16]	; (8005fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	f003 0307 	and.w	r3, r3, #7
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bc80      	pop	{r7}
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	e000ed00 	.word	0xe000ed00

08005fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	db0b      	blt.n	8005fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	f003 021f 	and.w	r2, r3, #31
 8005fc4:	4906      	ldr	r1, [pc, #24]	; (8005fe0 <__NVIC_EnableIRQ+0x34>)
 8005fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2001      	movs	r0, #1
 8005fce:	fa00 f202 	lsl.w	r2, r0, r2
 8005fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr
 8005fe0:	e000e100 	.word	0xe000e100

08005fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	6039      	str	r1, [r7, #0]
 8005fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	db0a      	blt.n	800600e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	490c      	ldr	r1, [pc, #48]	; (8006030 <__NVIC_SetPriority+0x4c>)
 8005ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006002:	0112      	lsls	r2, r2, #4
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	440b      	add	r3, r1
 8006008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800600c:	e00a      	b.n	8006024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	b2da      	uxtb	r2, r3
 8006012:	4908      	ldr	r1, [pc, #32]	; (8006034 <__NVIC_SetPriority+0x50>)
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	3b04      	subs	r3, #4
 800601c:	0112      	lsls	r2, r2, #4
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	440b      	add	r3, r1
 8006022:	761a      	strb	r2, [r3, #24]
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	e000e100 	.word	0xe000e100
 8006034:	e000ed00 	.word	0xe000ed00

08006038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006038:	b480      	push	{r7}
 800603a:	b089      	sub	sp, #36	; 0x24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f1c3 0307 	rsb	r3, r3, #7
 8006052:	2b04      	cmp	r3, #4
 8006054:	bf28      	it	cs
 8006056:	2304      	movcs	r3, #4
 8006058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	3304      	adds	r3, #4
 800605e:	2b06      	cmp	r3, #6
 8006060:	d902      	bls.n	8006068 <NVIC_EncodePriority+0x30>
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	3b03      	subs	r3, #3
 8006066:	e000      	b.n	800606a <NVIC_EncodePriority+0x32>
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800606c:	f04f 32ff 	mov.w	r2, #4294967295
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	43da      	mvns	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	401a      	ands	r2, r3
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006080:	f04f 31ff 	mov.w	r1, #4294967295
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	fa01 f303 	lsl.w	r3, r1, r3
 800608a:	43d9      	mvns	r1, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006090:	4313      	orrs	r3, r2
         );
}
 8006092:	4618      	mov	r0, r3
 8006094:	3724      	adds	r7, #36	; 0x24
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060ac:	d301      	bcc.n	80060b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060ae:	2301      	movs	r3, #1
 80060b0:	e00f      	b.n	80060d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060b2:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <SysTick_Config+0x40>)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060ba:	210f      	movs	r1, #15
 80060bc:	f04f 30ff 	mov.w	r0, #4294967295
 80060c0:	f7ff ff90 	bl	8005fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <SysTick_Config+0x40>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060ca:	4b04      	ldr	r3, [pc, #16]	; (80060dc <SysTick_Config+0x40>)
 80060cc:	2207      	movs	r2, #7
 80060ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	e000e010 	.word	0xe000e010

080060e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff ff2d 	bl	8005f48 <__NVIC_SetPriorityGrouping>
}
 80060ee:	bf00      	nop
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b086      	sub	sp, #24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	4603      	mov	r3, r0
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	607a      	str	r2, [r7, #4]
 8006102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006108:	f7ff ff42 	bl	8005f90 <__NVIC_GetPriorityGrouping>
 800610c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	6978      	ldr	r0, [r7, #20]
 8006114:	f7ff ff90 	bl	8006038 <NVIC_EncodePriority>
 8006118:	4602      	mov	r2, r0
 800611a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800611e:	4611      	mov	r1, r2
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff ff5f 	bl	8005fe4 <__NVIC_SetPriority>
}
 8006126:	bf00      	nop
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	4603      	mov	r3, r0
 8006136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800613c:	4618      	mov	r0, r3
 800613e:	f7ff ff35 	bl	8005fac <__NVIC_EnableIRQ>
}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff ffa2 	bl	800609c <SysTick_Config>
 8006158:	4603      	mov	r3, r0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006170:	f7ff febc 	bl	8005eec <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e099      	b.n	80062b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061a0:	e00f      	b.n	80061c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061a2:	f7ff fea3 	bl	8005eec <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b05      	cmp	r3, #5
 80061ae:	d908      	bls.n	80061c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2203      	movs	r2, #3
 80061ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e078      	b.n	80062b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e8      	bne.n	80061a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	4b38      	ldr	r3, [pc, #224]	; (80062bc <HAL_DMA_Init+0x158>)
 80061dc:	4013      	ands	r3, r2
 80061de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	2b04      	cmp	r3, #4
 800621a:	d107      	bne.n	800622c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006224:	4313      	orrs	r3, r2
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 0307 	bic.w	r3, r3, #7
 8006242:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	2b04      	cmp	r3, #4
 8006254:	d117      	bne.n	8006286 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00e      	beq.n	8006286 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 faff 	bl	800686c <DMA_CheckFifoParam>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2240      	movs	r2, #64	; 0x40
 8006278:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006282:	2301      	movs	r3, #1
 8006284:	e016      	b.n	80062b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fab8 	bl	8006804 <DMA_CalcBaseAndBitshift>
 8006294:	4603      	mov	r3, r0
 8006296:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629c:	223f      	movs	r2, #63	; 0x3f
 800629e:	409a      	lsls	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	f010803f 	.word	0xf010803f

080062c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d101      	bne.n	80062e6 <HAL_DMA_Start_IT+0x26>
 80062e2:	2302      	movs	r3, #2
 80062e4:	e040      	b.n	8006368 <HAL_DMA_Start_IT+0xa8>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d12f      	bne.n	800635a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2202      	movs	r2, #2
 80062fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 fa4a 	bl	80067a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006318:	223f      	movs	r2, #63	; 0x3f
 800631a:	409a      	lsls	r2, r3
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0216 	orr.w	r2, r2, #22
 800632e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0208 	orr.w	r2, r2, #8
 8006346:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	e005      	b.n	8006366 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006362:	2302      	movs	r3, #2
 8006364:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006366:	7dfb      	ldrb	r3, [r7, #23]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800637e:	f7ff fdb5 	bl	8005eec <HAL_GetTick>
 8006382:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d008      	beq.n	80063a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2280      	movs	r2, #128	; 0x80
 8006394:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e052      	b.n	8006448 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 0216 	bic.w	r2, r2, #22
 80063b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	695a      	ldr	r2, [r3, #20]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d103      	bne.n	80063d2 <HAL_DMA_Abort+0x62>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0208 	bic.w	r2, r2, #8
 80063e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0201 	bic.w	r2, r2, #1
 80063f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063f2:	e013      	b.n	800641c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063f4:	f7ff fd7a 	bl	8005eec <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b05      	cmp	r3, #5
 8006400:	d90c      	bls.n	800641c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2220      	movs	r2, #32
 8006406:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2203      	movs	r2, #3
 800640c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e015      	b.n	8006448 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e4      	bne.n	80063f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642e:	223f      	movs	r2, #63	; 0x3f
 8006430:	409a      	lsls	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d004      	beq.n	800646e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2280      	movs	r2, #128	; 0x80
 8006468:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e00c      	b.n	8006488 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2205      	movs	r2, #5
 8006472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0201 	bic.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	bc80      	pop	{r7}
 8006490:	4770      	bx	lr
	...

08006494 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064a0:	4b8e      	ldr	r3, [pc, #568]	; (80066dc <HAL_DMA_IRQHandler+0x248>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a8e      	ldr	r2, [pc, #568]	; (80066e0 <HAL_DMA_IRQHandler+0x24c>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	0a9b      	lsrs	r3, r3, #10
 80064ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064be:	2208      	movs	r2, #8
 80064c0:	409a      	lsls	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d01a      	beq.n	8006500 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d013      	beq.n	8006500 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0204 	bic.w	r2, r2, #4
 80064e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ec:	2208      	movs	r2, #8
 80064ee:	409a      	lsls	r2, r3
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f8:	f043 0201 	orr.w	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006504:	2201      	movs	r2, #1
 8006506:	409a      	lsls	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4013      	ands	r3, r2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d012      	beq.n	8006536 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00b      	beq.n	8006536 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006522:	2201      	movs	r2, #1
 8006524:	409a      	lsls	r2, r3
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652e:	f043 0202 	orr.w	r2, r3, #2
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653a:	2204      	movs	r2, #4
 800653c:	409a      	lsls	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4013      	ands	r3, r2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d012      	beq.n	800656c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00b      	beq.n	800656c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006558:	2204      	movs	r2, #4
 800655a:	409a      	lsls	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006564:	f043 0204 	orr.w	r2, r3, #4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006570:	2210      	movs	r2, #16
 8006572:	409a      	lsls	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4013      	ands	r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d043      	beq.n	8006604 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d03c      	beq.n	8006604 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658e:	2210      	movs	r2, #16
 8006590:	409a      	lsls	r2, r3
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d018      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d108      	bne.n	80065c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d024      	beq.n	8006604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
 80065c2:	e01f      	b.n	8006604 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01b      	beq.n	8006604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	4798      	blx	r3
 80065d4:	e016      	b.n	8006604 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d107      	bne.n	80065f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0208 	bic.w	r2, r2, #8
 80065f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006608:	2220      	movs	r2, #32
 800660a:	409a      	lsls	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4013      	ands	r3, r2
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 808f 	beq.w	8006734 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 8087 	beq.w	8006734 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662a:	2220      	movs	r2, #32
 800662c:	409a      	lsls	r2, r3
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b05      	cmp	r3, #5
 800663c:	d136      	bne.n	80066ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0216 	bic.w	r2, r2, #22
 800664c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695a      	ldr	r2, [r3, #20]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800665c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <HAL_DMA_IRQHandler+0x1da>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0208 	bic.w	r2, r2, #8
 800667c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006682:	223f      	movs	r2, #63	; 0x3f
 8006684:	409a      	lsls	r2, r3
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d07e      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	4798      	blx	r3
        }
        return;
 80066aa:	e079      	b.n	80067a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d01d      	beq.n	80066f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10d      	bne.n	80066e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d031      	beq.n	8006734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
 80066d8:	e02c      	b.n	8006734 <HAL_DMA_IRQHandler+0x2a0>
 80066da:	bf00      	nop
 80066dc:	20000030 	.word	0x20000030
 80066e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d023      	beq.n	8006734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	4798      	blx	r3
 80066f4:	e01e      	b.n	8006734 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10f      	bne.n	8006724 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0210 	bic.w	r2, r2, #16
 8006712:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006738:	2b00      	cmp	r3, #0
 800673a:	d032      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d022      	beq.n	800678e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2205      	movs	r2, #5
 800674c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0201 	bic.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	3301      	adds	r3, #1
 8006764:	60bb      	str	r3, [r7, #8]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	429a      	cmp	r2, r3
 800676a:	d307      	bcc.n	800677c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f2      	bne.n	8006760 <HAL_DMA_IRQHandler+0x2cc>
 800677a:	e000      	b.n	800677e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800677c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d005      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
 800679e:	e000      	b.n	80067a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80067a0:	bf00      	nop
    }
  }
}
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	2b40      	cmp	r3, #64	; 0x40
 80067d4:	d108      	bne.n	80067e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067e6:	e007      	b.n	80067f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	60da      	str	r2, [r3, #12]
}
 80067f8:	bf00      	nop
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr
	...

08006804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	3b10      	subs	r3, #16
 8006814:	4a13      	ldr	r2, [pc, #76]	; (8006864 <DMA_CalcBaseAndBitshift+0x60>)
 8006816:	fba2 2303 	umull	r2, r3, r2, r3
 800681a:	091b      	lsrs	r3, r3, #4
 800681c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800681e:	4a12      	ldr	r2, [pc, #72]	; (8006868 <DMA_CalcBaseAndBitshift+0x64>)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b03      	cmp	r3, #3
 8006830:	d909      	bls.n	8006846 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800683a:	f023 0303 	bic.w	r3, r3, #3
 800683e:	1d1a      	adds	r2, r3, #4
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	659a      	str	r2, [r3, #88]	; 0x58
 8006844:	e007      	b.n	8006856 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800684e:	f023 0303 	bic.w	r3, r3, #3
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr
 8006864:	aaaaaaab 	.word	0xaaaaaaab
 8006868:	08009030 	.word	0x08009030

0800686c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d11f      	bne.n	80068c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b03      	cmp	r3, #3
 800688a:	d856      	bhi.n	800693a <DMA_CheckFifoParam+0xce>
 800688c:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <DMA_CheckFifoParam+0x28>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	080068a5 	.word	0x080068a5
 8006898:	080068b7 	.word	0x080068b7
 800689c:	080068a5 	.word	0x080068a5
 80068a0:	0800693b 	.word	0x0800693b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d046      	beq.n	800693e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068b4:	e043      	b.n	800693e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068be:	d140      	bne.n	8006942 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068c4:	e03d      	b.n	8006942 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ce:	d121      	bne.n	8006914 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d837      	bhi.n	8006946 <DMA_CheckFifoParam+0xda>
 80068d6:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <DMA_CheckFifoParam+0x70>)
 80068d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068dc:	080068ed 	.word	0x080068ed
 80068e0:	080068f3 	.word	0x080068f3
 80068e4:	080068ed 	.word	0x080068ed
 80068e8:	08006905 	.word	0x08006905
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	73fb      	strb	r3, [r7, #15]
      break;
 80068f0:	e030      	b.n	8006954 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d025      	beq.n	800694a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006902:	e022      	b.n	800694a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800690c:	d11f      	bne.n	800694e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006912:	e01c      	b.n	800694e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d903      	bls.n	8006922 <DMA_CheckFifoParam+0xb6>
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b03      	cmp	r3, #3
 800691e:	d003      	beq.n	8006928 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006920:	e018      	b.n	8006954 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	73fb      	strb	r3, [r7, #15]
      break;
 8006926:	e015      	b.n	8006954 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00e      	beq.n	8006952 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	73fb      	strb	r3, [r7, #15]
      break;
 8006938:	e00b      	b.n	8006952 <DMA_CheckFifoParam+0xe6>
      break;
 800693a:	bf00      	nop
 800693c:	e00a      	b.n	8006954 <DMA_CheckFifoParam+0xe8>
      break;
 800693e:	bf00      	nop
 8006940:	e008      	b.n	8006954 <DMA_CheckFifoParam+0xe8>
      break;
 8006942:	bf00      	nop
 8006944:	e006      	b.n	8006954 <DMA_CheckFifoParam+0xe8>
      break;
 8006946:	bf00      	nop
 8006948:	e004      	b.n	8006954 <DMA_CheckFifoParam+0xe8>
      break;
 800694a:	bf00      	nop
 800694c:	e002      	b.n	8006954 <DMA_CheckFifoParam+0xe8>
      break;   
 800694e:	bf00      	nop
 8006950:	e000      	b.n	8006954 <DMA_CheckFifoParam+0xe8>
      break;
 8006952:	bf00      	nop
    }
  } 
  
  return status; 
 8006954:	7bfb      	ldrb	r3, [r7, #15]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	bc80      	pop	{r7}
 800695e:	4770      	bx	lr

08006960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006960:	b480      	push	{r7}
 8006962:	b089      	sub	sp, #36	; 0x24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800696a:	2300      	movs	r3, #0
 800696c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800696e:	2300      	movs	r3, #0
 8006970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006972:	2300      	movs	r3, #0
 8006974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006976:	2300      	movs	r3, #0
 8006978:	61fb      	str	r3, [r7, #28]
 800697a:	e159      	b.n	8006c30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800697c:	2201      	movs	r2, #1
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	fa02 f303 	lsl.w	r3, r2, r3
 8006984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4013      	ands	r3, r2
 800698e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	429a      	cmp	r2, r3
 8006996:	f040 8148 	bne.w	8006c2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d005      	beq.n	80069b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d130      	bne.n	8006a14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	2203      	movs	r2, #3
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
 80069c2:	43db      	mvns	r3, r3
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	4013      	ands	r3, r2
 80069c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	fa02 f303 	lsl.w	r3, r2, r3
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	4313      	orrs	r3, r2
 80069da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069e8:	2201      	movs	r2, #1
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	43db      	mvns	r3, r3
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	4013      	ands	r3, r2
 80069f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	091b      	lsrs	r3, r3, #4
 80069fe:	f003 0201 	and.w	r2, r3, #1
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	fa02 f303 	lsl.w	r3, r2, r3
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d017      	beq.n	8006a50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	2203      	movs	r2, #3
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	43db      	mvns	r3, r3
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	4013      	ands	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f003 0303 	and.w	r3, r3, #3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d123      	bne.n	8006aa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	08da      	lsrs	r2, r3, #3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3208      	adds	r2, #8
 8006a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	220f      	movs	r2, #15
 8006a74:	fa02 f303 	lsl.w	r3, r2, r3
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	691a      	ldr	r2, [r3, #16]
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	08da      	lsrs	r2, r3, #3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3208      	adds	r2, #8
 8006a9e:	69b9      	ldr	r1, [r7, #24]
 8006aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	2203      	movs	r2, #3
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f003 0203 	and.w	r2, r3, #3
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 80a2 	beq.w	8006c2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	4b56      	ldr	r3, [pc, #344]	; (8006c44 <HAL_GPIO_Init+0x2e4>)
 8006aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aee:	4a55      	ldr	r2, [pc, #340]	; (8006c44 <HAL_GPIO_Init+0x2e4>)
 8006af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006af4:	6453      	str	r3, [r2, #68]	; 0x44
 8006af6:	4b53      	ldr	r3, [pc, #332]	; (8006c44 <HAL_GPIO_Init+0x2e4>)
 8006af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b02:	4a51      	ldr	r2, [pc, #324]	; (8006c48 <HAL_GPIO_Init+0x2e8>)
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	089b      	lsrs	r3, r3, #2
 8006b08:	3302      	adds	r3, #2
 8006b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	220f      	movs	r2, #15
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	43db      	mvns	r3, r3
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	4013      	ands	r3, r2
 8006b24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a48      	ldr	r2, [pc, #288]	; (8006c4c <HAL_GPIO_Init+0x2ec>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d019      	beq.n	8006b62 <HAL_GPIO_Init+0x202>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a47      	ldr	r2, [pc, #284]	; (8006c50 <HAL_GPIO_Init+0x2f0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <HAL_GPIO_Init+0x1fe>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a46      	ldr	r2, [pc, #280]	; (8006c54 <HAL_GPIO_Init+0x2f4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00d      	beq.n	8006b5a <HAL_GPIO_Init+0x1fa>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a45      	ldr	r2, [pc, #276]	; (8006c58 <HAL_GPIO_Init+0x2f8>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d007      	beq.n	8006b56 <HAL_GPIO_Init+0x1f6>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a44      	ldr	r2, [pc, #272]	; (8006c5c <HAL_GPIO_Init+0x2fc>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d101      	bne.n	8006b52 <HAL_GPIO_Init+0x1f2>
 8006b4e:	2304      	movs	r3, #4
 8006b50:	e008      	b.n	8006b64 <HAL_GPIO_Init+0x204>
 8006b52:	2307      	movs	r3, #7
 8006b54:	e006      	b.n	8006b64 <HAL_GPIO_Init+0x204>
 8006b56:	2303      	movs	r3, #3
 8006b58:	e004      	b.n	8006b64 <HAL_GPIO_Init+0x204>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e002      	b.n	8006b64 <HAL_GPIO_Init+0x204>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <HAL_GPIO_Init+0x204>
 8006b62:	2300      	movs	r3, #0
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	f002 0203 	and.w	r2, r2, #3
 8006b6a:	0092      	lsls	r2, r2, #2
 8006b6c:	4093      	lsls	r3, r2
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b74:	4934      	ldr	r1, [pc, #208]	; (8006c48 <HAL_GPIO_Init+0x2e8>)
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	089b      	lsrs	r3, r3, #2
 8006b7a:	3302      	adds	r3, #2
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b82:	4b37      	ldr	r3, [pc, #220]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ba6:	4a2e      	ldr	r2, [pc, #184]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006bac:	4b2c      	ldr	r3, [pc, #176]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006bd0:	4a23      	ldr	r2, [pc, #140]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006bd6:	4b22      	ldr	r3, [pc, #136]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	43db      	mvns	r3, r3
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	4013      	ands	r3, r2
 8006be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bfa:	4a19      	ldr	r2, [pc, #100]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c00:	4b17      	ldr	r3, [pc, #92]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c24:	4a0e      	ldr	r2, [pc, #56]	; (8006c60 <HAL_GPIO_Init+0x300>)
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	2b0f      	cmp	r3, #15
 8006c34:	f67f aea2 	bls.w	800697c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	3724      	adds	r7, #36	; 0x24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr
 8006c44:	40023800 	.word	0x40023800
 8006c48:	40013800 	.word	0x40013800
 8006c4c:	40020000 	.word	0x40020000
 8006c50:	40020400 	.word	0x40020400
 8006c54:	40020800 	.word	0x40020800
 8006c58:	40020c00 	.word	0x40020c00
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	40013c00 	.word	0x40013c00

08006c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	807b      	strh	r3, [r7, #2]
 8006c70:	4613      	mov	r3, r2
 8006c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c74:	787b      	ldrb	r3, [r7, #1]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c7a:	887a      	ldrh	r2, [r7, #2]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c80:	e003      	b.n	8006c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c82:	887b      	ldrh	r3, [r7, #2]
 8006c84:	041a      	lsls	r2, r3, #16
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	619a      	str	r2, [r3, #24]
}
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr

08006c94 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ca6:	887a      	ldrh	r2, [r7, #2]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4013      	ands	r3, r2
 8006cac:	041a      	lsls	r2, r3, #16
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	43d9      	mvns	r1, r3
 8006cb2:	887b      	ldrh	r3, [r7, #2]
 8006cb4:	400b      	ands	r3, r1
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	619a      	str	r2, [r3, #24]
}
 8006cbc:	bf00      	nop
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr
	...

08006cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006cd2:	4b08      	ldr	r3, [pc, #32]	; (8006cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006cd4:	695a      	ldr	r2, [r3, #20]
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	4013      	ands	r3, r2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d006      	beq.n	8006cec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006cde:	4a05      	ldr	r2, [pc, #20]	; (8006cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ce0:	88fb      	ldrh	r3, [r7, #6]
 8006ce2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ce4:	88fb      	ldrh	r3, [r7, #6]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fb feb6 	bl	8002a58 <HAL_GPIO_EXTI_Callback>
  }
}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	40013c00 	.word	0x40013c00

08006cf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e267      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d075      	beq.n	8006e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d16:	4b88      	ldr	r3, [pc, #544]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 030c 	and.w	r3, r3, #12
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d00c      	beq.n	8006d3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d22:	4b85      	ldr	r3, [pc, #532]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d112      	bne.n	8006d54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d2e:	4b82      	ldr	r3, [pc, #520]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d3a:	d10b      	bne.n	8006d54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d3c:	4b7e      	ldr	r3, [pc, #504]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d05b      	beq.n	8006e00 <HAL_RCC_OscConfig+0x108>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d157      	bne.n	8006e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e242      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5c:	d106      	bne.n	8006d6c <HAL_RCC_OscConfig+0x74>
 8006d5e:	4b76      	ldr	r3, [pc, #472]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a75      	ldr	r2, [pc, #468]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	e01d      	b.n	8006da8 <HAL_RCC_OscConfig+0xb0>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d74:	d10c      	bne.n	8006d90 <HAL_RCC_OscConfig+0x98>
 8006d76:	4b70      	ldr	r3, [pc, #448]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a6f      	ldr	r2, [pc, #444]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	4b6d      	ldr	r3, [pc, #436]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a6c      	ldr	r2, [pc, #432]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	e00b      	b.n	8006da8 <HAL_RCC_OscConfig+0xb0>
 8006d90:	4b69      	ldr	r3, [pc, #420]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a68      	ldr	r2, [pc, #416]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	4b66      	ldr	r3, [pc, #408]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a65      	ldr	r2, [pc, #404]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d013      	beq.n	8006dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db0:	f7ff f89c 	bl	8005eec <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006db8:	f7ff f898 	bl	8005eec <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b64      	cmp	r3, #100	; 0x64
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e207      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dca:	4b5b      	ldr	r3, [pc, #364]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0f0      	beq.n	8006db8 <HAL_RCC_OscConfig+0xc0>
 8006dd6:	e014      	b.n	8006e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd8:	f7ff f888 	bl	8005eec <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006de0:	f7ff f884 	bl	8005eec <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b64      	cmp	r3, #100	; 0x64
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e1f3      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006df2:	4b51      	ldr	r3, [pc, #324]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f0      	bne.n	8006de0 <HAL_RCC_OscConfig+0xe8>
 8006dfe:	e000      	b.n	8006e02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d063      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e0e:	4b4a      	ldr	r3, [pc, #296]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 030c 	and.w	r3, r3, #12
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00b      	beq.n	8006e32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e1a:	4b47      	ldr	r3, [pc, #284]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e22:	2b08      	cmp	r3, #8
 8006e24:	d11c      	bne.n	8006e60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e26:	4b44      	ldr	r3, [pc, #272]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d116      	bne.n	8006e60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e32:	4b41      	ldr	r3, [pc, #260]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d005      	beq.n	8006e4a <HAL_RCC_OscConfig+0x152>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d001      	beq.n	8006e4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e1c7      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e4a:	4b3b      	ldr	r3, [pc, #236]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	4937      	ldr	r1, [pc, #220]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e5e:	e03a      	b.n	8006ed6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d020      	beq.n	8006eaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e68:	4b34      	ldr	r3, [pc, #208]	; (8006f3c <HAL_RCC_OscConfig+0x244>)
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6e:	f7ff f83d 	bl	8005eec <HAL_GetTick>
 8006e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e74:	e008      	b.n	8006e88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e76:	f7ff f839 	bl	8005eec <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d901      	bls.n	8006e88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e1a8      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e88:	4b2b      	ldr	r3, [pc, #172]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0f0      	beq.n	8006e76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e94:	4b28      	ldr	r3, [pc, #160]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	4925      	ldr	r1, [pc, #148]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	600b      	str	r3, [r1, #0]
 8006ea8:	e015      	b.n	8006ed6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eaa:	4b24      	ldr	r3, [pc, #144]	; (8006f3c <HAL_RCC_OscConfig+0x244>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb0:	f7ff f81c 	bl	8005eec <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006eb8:	f7ff f818 	bl	8005eec <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e187      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eca:	4b1b      	ldr	r3, [pc, #108]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1f0      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d036      	beq.n	8006f50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d016      	beq.n	8006f18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eea:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <HAL_RCC_OscConfig+0x248>)
 8006eec:	2201      	movs	r2, #1
 8006eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef0:	f7fe fffc 	bl	8005eec <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ef8:	f7fe fff8 	bl	8005eec <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e167      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f0a:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <HAL_RCC_OscConfig+0x240>)
 8006f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0f0      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x200>
 8006f16:	e01b      	b.n	8006f50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f18:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <HAL_RCC_OscConfig+0x248>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f1e:	f7fe ffe5 	bl	8005eec <HAL_GetTick>
 8006f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f24:	e00e      	b.n	8006f44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f26:	f7fe ffe1 	bl	8005eec <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d907      	bls.n	8006f44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e150      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	42470000 	.word	0x42470000
 8006f40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f44:	4b88      	ldr	r3, [pc, #544]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8006f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1ea      	bne.n	8006f26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 8097 	beq.w	800708c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f62:	4b81      	ldr	r3, [pc, #516]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10f      	bne.n	8006f8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	4b7d      	ldr	r3, [pc, #500]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	4a7c      	ldr	r2, [pc, #496]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8006f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f7e:	4b7a      	ldr	r3, [pc, #488]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f86:	60bb      	str	r3, [r7, #8]
 8006f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f8e:	4b77      	ldr	r3, [pc, #476]	; (800716c <HAL_RCC_OscConfig+0x474>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d118      	bne.n	8006fcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f9a:	4b74      	ldr	r3, [pc, #464]	; (800716c <HAL_RCC_OscConfig+0x474>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a73      	ldr	r2, [pc, #460]	; (800716c <HAL_RCC_OscConfig+0x474>)
 8006fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fa6:	f7fe ffa1 	bl	8005eec <HAL_GetTick>
 8006faa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fac:	e008      	b.n	8006fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fae:	f7fe ff9d 	bl	8005eec <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d901      	bls.n	8006fc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e10c      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fc0:	4b6a      	ldr	r3, [pc, #424]	; (800716c <HAL_RCC_OscConfig+0x474>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0f0      	beq.n	8006fae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d106      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x2ea>
 8006fd4:	4b64      	ldr	r3, [pc, #400]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8006fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd8:	4a63      	ldr	r2, [pc, #396]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe0:	e01c      	b.n	800701c <HAL_RCC_OscConfig+0x324>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	2b05      	cmp	r3, #5
 8006fe8:	d10c      	bne.n	8007004 <HAL_RCC_OscConfig+0x30c>
 8006fea:	4b5f      	ldr	r3, [pc, #380]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8006fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fee:	4a5e      	ldr	r2, [pc, #376]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8006ff0:	f043 0304 	orr.w	r3, r3, #4
 8006ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff6:	4b5c      	ldr	r3, [pc, #368]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8006ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffa:	4a5b      	ldr	r2, [pc, #364]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8006ffc:	f043 0301 	orr.w	r3, r3, #1
 8007000:	6713      	str	r3, [r2, #112]	; 0x70
 8007002:	e00b      	b.n	800701c <HAL_RCC_OscConfig+0x324>
 8007004:	4b58      	ldr	r3, [pc, #352]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8007006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007008:	4a57      	ldr	r2, [pc, #348]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 800700a:	f023 0301 	bic.w	r3, r3, #1
 800700e:	6713      	str	r3, [r2, #112]	; 0x70
 8007010:	4b55      	ldr	r3, [pc, #340]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8007012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007014:	4a54      	ldr	r2, [pc, #336]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8007016:	f023 0304 	bic.w	r3, r3, #4
 800701a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d015      	beq.n	8007050 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007024:	f7fe ff62 	bl	8005eec <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800702a:	e00a      	b.n	8007042 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800702c:	f7fe ff5e 	bl	8005eec <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	f241 3288 	movw	r2, #5000	; 0x1388
 800703a:	4293      	cmp	r3, r2
 800703c:	d901      	bls.n	8007042 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e0cb      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007042:	4b49      	ldr	r3, [pc, #292]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8007044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0ee      	beq.n	800702c <HAL_RCC_OscConfig+0x334>
 800704e:	e014      	b.n	800707a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007050:	f7fe ff4c 	bl	8005eec <HAL_GetTick>
 8007054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007056:	e00a      	b.n	800706e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007058:	f7fe ff48 	bl	8005eec <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	f241 3288 	movw	r2, #5000	; 0x1388
 8007066:	4293      	cmp	r3, r2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e0b5      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800706e:	4b3e      	ldr	r3, [pc, #248]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8007070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1ee      	bne.n	8007058 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d105      	bne.n	800708c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007080:	4b39      	ldr	r3, [pc, #228]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8007082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007084:	4a38      	ldr	r2, [pc, #224]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8007086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800708a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 80a1 	beq.w	80071d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007096:	4b34      	ldr	r3, [pc, #208]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 030c 	and.w	r3, r3, #12
 800709e:	2b08      	cmp	r3, #8
 80070a0:	d05c      	beq.n	800715c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d141      	bne.n	800712e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070aa:	4b31      	ldr	r3, [pc, #196]	; (8007170 <HAL_RCC_OscConfig+0x478>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b0:	f7fe ff1c 	bl	8005eec <HAL_GetTick>
 80070b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070b8:	f7fe ff18 	bl	8005eec <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e087      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ca:	4b27      	ldr	r3, [pc, #156]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f0      	bne.n	80070b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	69da      	ldr	r2, [r3, #28]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	431a      	orrs	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	019b      	lsls	r3, r3, #6
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	3b01      	subs	r3, #1
 80070f0:	041b      	lsls	r3, r3, #16
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	061b      	lsls	r3, r3, #24
 80070fa:	491b      	ldr	r1, [pc, #108]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007100:	4b1b      	ldr	r3, [pc, #108]	; (8007170 <HAL_RCC_OscConfig+0x478>)
 8007102:	2201      	movs	r2, #1
 8007104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007106:	f7fe fef1 	bl	8005eec <HAL_GetTick>
 800710a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800710c:	e008      	b.n	8007120 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800710e:	f7fe feed 	bl	8005eec <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d901      	bls.n	8007120 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e05c      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007120:	4b11      	ldr	r3, [pc, #68]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0f0      	beq.n	800710e <HAL_RCC_OscConfig+0x416>
 800712c:	e054      	b.n	80071d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800712e:	4b10      	ldr	r3, [pc, #64]	; (8007170 <HAL_RCC_OscConfig+0x478>)
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007134:	f7fe feda 	bl	8005eec <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800713c:	f7fe fed6 	bl	8005eec <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e045      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800714e:	4b06      	ldr	r3, [pc, #24]	; (8007168 <HAL_RCC_OscConfig+0x470>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1f0      	bne.n	800713c <HAL_RCC_OscConfig+0x444>
 800715a:	e03d      	b.n	80071d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d107      	bne.n	8007174 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e038      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
 8007168:	40023800 	.word	0x40023800
 800716c:	40007000 	.word	0x40007000
 8007170:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007174:	4b1b      	ldr	r3, [pc, #108]	; (80071e4 <HAL_RCC_OscConfig+0x4ec>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d028      	beq.n	80071d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800718c:	429a      	cmp	r2, r3
 800718e:	d121      	bne.n	80071d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800719a:	429a      	cmp	r2, r3
 800719c:	d11a      	bne.n	80071d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071a4:	4013      	ands	r3, r2
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d111      	bne.n	80071d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ba:	085b      	lsrs	r3, r3, #1
 80071bc:	3b01      	subs	r3, #1
 80071be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d107      	bne.n	80071d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d001      	beq.n	80071d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e000      	b.n	80071da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40023800 	.word	0x40023800

080071e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e0cc      	b.n	8007396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071fc:	4b68      	ldr	r3, [pc, #416]	; (80073a0 <HAL_RCC_ClockConfig+0x1b8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d90c      	bls.n	8007224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800720a:	4b65      	ldr	r3, [pc, #404]	; (80073a0 <HAL_RCC_ClockConfig+0x1b8>)
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	b2d2      	uxtb	r2, r2
 8007210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007212:	4b63      	ldr	r3, [pc, #396]	; (80073a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	429a      	cmp	r2, r3
 800721e:	d001      	beq.n	8007224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e0b8      	b.n	8007396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d020      	beq.n	8007272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800723c:	4b59      	ldr	r3, [pc, #356]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	4a58      	ldr	r2, [pc, #352]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007242:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0308 	and.w	r3, r3, #8
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007254:	4b53      	ldr	r3, [pc, #332]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	4a52      	ldr	r2, [pc, #328]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 800725a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800725e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007260:	4b50      	ldr	r3, [pc, #320]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	494d      	ldr	r1, [pc, #308]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 800726e:	4313      	orrs	r3, r2
 8007270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d044      	beq.n	8007308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d107      	bne.n	8007296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007286:	4b47      	ldr	r3, [pc, #284]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d119      	bne.n	80072c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e07f      	b.n	8007396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2b02      	cmp	r3, #2
 800729c:	d003      	beq.n	80072a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d107      	bne.n	80072b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072a6:	4b3f      	ldr	r3, [pc, #252]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d109      	bne.n	80072c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e06f      	b.n	8007396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072b6:	4b3b      	ldr	r3, [pc, #236]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e067      	b.n	8007396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072c6:	4b37      	ldr	r3, [pc, #220]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f023 0203 	bic.w	r2, r3, #3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	4934      	ldr	r1, [pc, #208]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072d8:	f7fe fe08 	bl	8005eec <HAL_GetTick>
 80072dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072de:	e00a      	b.n	80072f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072e0:	f7fe fe04 	bl	8005eec <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e04f      	b.n	8007396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072f6:	4b2b      	ldr	r3, [pc, #172]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 020c 	and.w	r2, r3, #12
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	429a      	cmp	r2, r3
 8007306:	d1eb      	bne.n	80072e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007308:	4b25      	ldr	r3, [pc, #148]	; (80073a0 <HAL_RCC_ClockConfig+0x1b8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	429a      	cmp	r2, r3
 8007314:	d20c      	bcs.n	8007330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007316:	4b22      	ldr	r3, [pc, #136]	; (80073a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800731e:	4b20      	ldr	r3, [pc, #128]	; (80073a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d001      	beq.n	8007330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e032      	b.n	8007396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b00      	cmp	r3, #0
 800733a:	d008      	beq.n	800734e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800733c:	4b19      	ldr	r3, [pc, #100]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	4916      	ldr	r1, [pc, #88]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 800734a:	4313      	orrs	r3, r2
 800734c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d009      	beq.n	800736e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800735a:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	490e      	ldr	r1, [pc, #56]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 800736a:	4313      	orrs	r3, r2
 800736c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800736e:	f000 f821 	bl	80073b4 <HAL_RCC_GetSysClockFreq>
 8007372:	4602      	mov	r2, r0
 8007374:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	091b      	lsrs	r3, r3, #4
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	490a      	ldr	r1, [pc, #40]	; (80073a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007380:	5ccb      	ldrb	r3, [r1, r3]
 8007382:	fa22 f303 	lsr.w	r3, r2, r3
 8007386:	4a09      	ldr	r2, [pc, #36]	; (80073ac <HAL_RCC_ClockConfig+0x1c4>)
 8007388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800738a:	4b09      	ldr	r3, [pc, #36]	; (80073b0 <HAL_RCC_ClockConfig+0x1c8>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f7fe fd6a 	bl	8005e68 <HAL_InitTick>

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	40023c00 	.word	0x40023c00
 80073a4:	40023800 	.word	0x40023800
 80073a8:	08009018 	.word	0x08009018
 80073ac:	20000030 	.word	0x20000030
 80073b0:	20000034 	.word	0x20000034

080073b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073b8:	b090      	sub	sp, #64	; 0x40
 80073ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	637b      	str	r3, [r7, #52]	; 0x34
 80073c0:	2300      	movs	r3, #0
 80073c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073c4:	2300      	movs	r3, #0
 80073c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073cc:	4b59      	ldr	r3, [pc, #356]	; (8007534 <HAL_RCC_GetSysClockFreq+0x180>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f003 030c 	and.w	r3, r3, #12
 80073d4:	2b08      	cmp	r3, #8
 80073d6:	d00d      	beq.n	80073f4 <HAL_RCC_GetSysClockFreq+0x40>
 80073d8:	2b08      	cmp	r3, #8
 80073da:	f200 80a2 	bhi.w	8007522 <HAL_RCC_GetSysClockFreq+0x16e>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <HAL_RCC_GetSysClockFreq+0x34>
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d003      	beq.n	80073ee <HAL_RCC_GetSysClockFreq+0x3a>
 80073e6:	e09c      	b.n	8007522 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073e8:	4b53      	ldr	r3, [pc, #332]	; (8007538 <HAL_RCC_GetSysClockFreq+0x184>)
 80073ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80073ec:	e09c      	b.n	8007528 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073ee:	4b53      	ldr	r3, [pc, #332]	; (800753c <HAL_RCC_GetSysClockFreq+0x188>)
 80073f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80073f2:	e099      	b.n	8007528 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073f4:	4b4f      	ldr	r3, [pc, #316]	; (8007534 <HAL_RCC_GetSysClockFreq+0x180>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073fe:	4b4d      	ldr	r3, [pc, #308]	; (8007534 <HAL_RCC_GetSysClockFreq+0x180>)
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d027      	beq.n	800745a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800740a:	4b4a      	ldr	r3, [pc, #296]	; (8007534 <HAL_RCC_GetSysClockFreq+0x180>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	099b      	lsrs	r3, r3, #6
 8007410:	2200      	movs	r2, #0
 8007412:	623b      	str	r3, [r7, #32]
 8007414:	627a      	str	r2, [r7, #36]	; 0x24
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800741c:	2100      	movs	r1, #0
 800741e:	4b47      	ldr	r3, [pc, #284]	; (800753c <HAL_RCC_GetSysClockFreq+0x188>)
 8007420:	fb03 f201 	mul.w	r2, r3, r1
 8007424:	2300      	movs	r3, #0
 8007426:	fb00 f303 	mul.w	r3, r0, r3
 800742a:	4413      	add	r3, r2
 800742c:	4a43      	ldr	r2, [pc, #268]	; (800753c <HAL_RCC_GetSysClockFreq+0x188>)
 800742e:	fba0 2102 	umull	r2, r1, r0, r2
 8007432:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007434:	62ba      	str	r2, [r7, #40]	; 0x28
 8007436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007438:	4413      	add	r3, r2
 800743a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800743c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743e:	2200      	movs	r2, #0
 8007440:	61bb      	str	r3, [r7, #24]
 8007442:	61fa      	str	r2, [r7, #28]
 8007444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007448:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800744c:	f7f9 faba 	bl	80009c4 <__aeabi_uldivmod>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4613      	mov	r3, r2
 8007456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007458:	e055      	b.n	8007506 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800745a:	4b36      	ldr	r3, [pc, #216]	; (8007534 <HAL_RCC_GetSysClockFreq+0x180>)
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	099b      	lsrs	r3, r3, #6
 8007460:	2200      	movs	r2, #0
 8007462:	613b      	str	r3, [r7, #16]
 8007464:	617a      	str	r2, [r7, #20]
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800746c:	f04f 0b00 	mov.w	fp, #0
 8007470:	4652      	mov	r2, sl
 8007472:	465b      	mov	r3, fp
 8007474:	f04f 0000 	mov.w	r0, #0
 8007478:	f04f 0100 	mov.w	r1, #0
 800747c:	0159      	lsls	r1, r3, #5
 800747e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007482:	0150      	lsls	r0, r2, #5
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	ebb2 080a 	subs.w	r8, r2, sl
 800748c:	eb63 090b 	sbc.w	r9, r3, fp
 8007490:	f04f 0200 	mov.w	r2, #0
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800749c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80074a0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80074a4:	ebb2 0408 	subs.w	r4, r2, r8
 80074a8:	eb63 0509 	sbc.w	r5, r3, r9
 80074ac:	f04f 0200 	mov.w	r2, #0
 80074b0:	f04f 0300 	mov.w	r3, #0
 80074b4:	00eb      	lsls	r3, r5, #3
 80074b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074ba:	00e2      	lsls	r2, r4, #3
 80074bc:	4614      	mov	r4, r2
 80074be:	461d      	mov	r5, r3
 80074c0:	eb14 030a 	adds.w	r3, r4, sl
 80074c4:	603b      	str	r3, [r7, #0]
 80074c6:	eb45 030b 	adc.w	r3, r5, fp
 80074ca:	607b      	str	r3, [r7, #4]
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074d8:	4629      	mov	r1, r5
 80074da:	028b      	lsls	r3, r1, #10
 80074dc:	4620      	mov	r0, r4
 80074de:	4629      	mov	r1, r5
 80074e0:	4604      	mov	r4, r0
 80074e2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80074e6:	4601      	mov	r1, r0
 80074e8:	028a      	lsls	r2, r1, #10
 80074ea:	4610      	mov	r0, r2
 80074ec:	4619      	mov	r1, r3
 80074ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f0:	2200      	movs	r2, #0
 80074f2:	60bb      	str	r3, [r7, #8]
 80074f4:	60fa      	str	r2, [r7, #12]
 80074f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074fa:	f7f9 fa63 	bl	80009c4 <__aeabi_uldivmod>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4613      	mov	r3, r2
 8007504:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007506:	4b0b      	ldr	r3, [pc, #44]	; (8007534 <HAL_RCC_GetSysClockFreq+0x180>)
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	0c1b      	lsrs	r3, r3, #16
 800750c:	f003 0303 	and.w	r3, r3, #3
 8007510:	3301      	adds	r3, #1
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007516:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	fbb2 f3f3 	udiv	r3, r2, r3
 800751e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007520:	e002      	b.n	8007528 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007522:	4b05      	ldr	r3, [pc, #20]	; (8007538 <HAL_RCC_GetSysClockFreq+0x184>)
 8007524:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007526:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800752a:	4618      	mov	r0, r3
 800752c:	3740      	adds	r7, #64	; 0x40
 800752e:	46bd      	mov	sp, r7
 8007530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007534:	40023800 	.word	0x40023800
 8007538:	00f42400 	.word	0x00f42400
 800753c:	017d7840 	.word	0x017d7840

08007540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007540:	b480      	push	{r7}
 8007542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007544:	4b02      	ldr	r3, [pc, #8]	; (8007550 <HAL_RCC_GetHCLKFreq+0x10>)
 8007546:	681b      	ldr	r3, [r3, #0]
}
 8007548:	4618      	mov	r0, r3
 800754a:	46bd      	mov	sp, r7
 800754c:	bc80      	pop	{r7}
 800754e:	4770      	bx	lr
 8007550:	20000030 	.word	0x20000030

08007554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007558:	f7ff fff2 	bl	8007540 <HAL_RCC_GetHCLKFreq>
 800755c:	4602      	mov	r2, r0
 800755e:	4b05      	ldr	r3, [pc, #20]	; (8007574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	0a9b      	lsrs	r3, r3, #10
 8007564:	f003 0307 	and.w	r3, r3, #7
 8007568:	4903      	ldr	r1, [pc, #12]	; (8007578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800756a:	5ccb      	ldrb	r3, [r1, r3]
 800756c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007570:	4618      	mov	r0, r3
 8007572:	bd80      	pop	{r7, pc}
 8007574:	40023800 	.word	0x40023800
 8007578:	08009028 	.word	0x08009028

0800757c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007580:	f7ff ffde 	bl	8007540 <HAL_RCC_GetHCLKFreq>
 8007584:	4602      	mov	r2, r0
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	0b5b      	lsrs	r3, r3, #13
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	4903      	ldr	r1, [pc, #12]	; (80075a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007592:	5ccb      	ldrb	r3, [r1, r3]
 8007594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007598:	4618      	mov	r0, r3
 800759a:	bd80      	pop	{r7, pc}
 800759c:	40023800 	.word	0x40023800
 80075a0:	08009028 	.word	0x08009028

080075a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e03f      	b.n	8007636 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fe fa98 	bl	8005b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2224      	movs	r2, #36	; 0x24
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 ff3d 	bl	8008468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	695a      	ldr	r2, [r3, #20]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800760c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800761c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2220      	movs	r2, #32
 8007630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08c      	sub	sp, #48	; 0x30
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	4613      	mov	r3, r2
 800764c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b20      	cmp	r3, #32
 8007658:	d165      	bne.n	8007726 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <HAL_UART_Transmit_DMA+0x26>
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e05e      	b.n	8007728 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007670:	2b01      	cmp	r3, #1
 8007672:	d101      	bne.n	8007678 <HAL_UART_Transmit_DMA+0x38>
 8007674:	2302      	movs	r3, #2
 8007676:	e057      	b.n	8007728 <HAL_UART_Transmit_DMA+0xe8>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	88fa      	ldrh	r2, [r7, #6]
 800768a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	88fa      	ldrh	r2, [r7, #6]
 8007690:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2221      	movs	r2, #33	; 0x21
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a4:	4a22      	ldr	r2, [pc, #136]	; (8007730 <HAL_UART_Transmit_DMA+0xf0>)
 80076a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ac:	4a21      	ldr	r2, [pc, #132]	; (8007734 <HAL_UART_Transmit_DMA+0xf4>)
 80076ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b4:	4a20      	ldr	r2, [pc, #128]	; (8007738 <HAL_UART_Transmit_DMA+0xf8>)
 80076b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076bc:	2200      	movs	r2, #0
 80076be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80076c0:	f107 0308 	add.w	r3, r7, #8
 80076c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	6819      	ldr	r1, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3304      	adds	r3, #4
 80076d4:	461a      	mov	r2, r3
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	f7fe fdf2 	bl	80062c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076e4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3314      	adds	r3, #20
 80076f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	617b      	str	r3, [r7, #20]
   return(result);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3314      	adds	r3, #20
 800770c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800770e:	627a      	str	r2, [r7, #36]	; 0x24
 8007710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6a39      	ldr	r1, [r7, #32]
 8007714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	61fb      	str	r3, [r7, #28]
   return(result);
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e5      	bne.n	80076ee <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	e000      	b.n	8007728 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007726:	2302      	movs	r3, #2
  }
}
 8007728:	4618      	mov	r0, r3
 800772a:	3730      	adds	r7, #48	; 0x30
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	08007d05 	.word	0x08007d05
 8007734:	08007d9f 	.word	0x08007d9f
 8007738:	08007f17 	.word	0x08007f17

0800773c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4613      	mov	r3, r2
 8007748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b20      	cmp	r3, #32
 8007754:	d11d      	bne.n	8007792 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <HAL_UART_Receive_DMA+0x26>
 800775c:	88fb      	ldrh	r3, [r7, #6]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e016      	b.n	8007794 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800776c:	2b01      	cmp	r3, #1
 800776e:	d101      	bne.n	8007774 <HAL_UART_Receive_DMA+0x38>
 8007770:	2302      	movs	r3, #2
 8007772:	e00f      	b.n	8007794 <HAL_UART_Receive_DMA+0x58>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007782:	88fb      	ldrh	r3, [r7, #6]
 8007784:	461a      	mov	r2, r3
 8007786:	68b9      	ldr	r1, [r7, #8]
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 fc0f 	bl	8007fac <UART_Start_Receive_DMA>
 800778e:	4603      	mov	r3, r0
 8007790:	e000      	b.n	8007794 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007792:	2302      	movs	r3, #2
  }
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b0ba      	sub	sp, #232	; 0xe8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80077da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10f      	bne.n	8007802 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <HAL_UART_IRQHandler+0x66>
 80077ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fd78 	bl	80082f0 <UART_Receive_IT>
      return;
 8007800:	e256      	b.n	8007cb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 80de 	beq.w	80079c8 <HAL_UART_IRQHandler+0x22c>
 800780c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b00      	cmp	r3, #0
 8007816:	d106      	bne.n	8007826 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800781c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80d1 	beq.w	80079c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00b      	beq.n	800784a <HAL_UART_IRQHandler+0xae>
 8007832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783a:	2b00      	cmp	r3, #0
 800783c:	d005      	beq.n	800784a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	f043 0201 	orr.w	r2, r3, #1
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800784a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800784e:	f003 0304 	and.w	r3, r3, #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <HAL_UART_IRQHandler+0xd2>
 8007856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007866:	f043 0202 	orr.w	r2, r3, #2
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800786e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00b      	beq.n	8007892 <HAL_UART_IRQHandler+0xf6>
 800787a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d005      	beq.n	8007892 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	f043 0204 	orr.w	r2, r3, #4
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d011      	beq.n	80078c2 <HAL_UART_IRQHandler+0x126>
 800789e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d105      	bne.n	80078b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80078aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d005      	beq.n	80078c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	f043 0208 	orr.w	r2, r3, #8
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 81ed 	beq.w	8007ca6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d008      	beq.n	80078ea <HAL_UART_IRQHandler+0x14e>
 80078d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078dc:	f003 0320 	and.w	r3, r3, #32
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fd03 	bl	80082f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f4:	2b40      	cmp	r3, #64	; 0x40
 80078f6:	bf0c      	ite	eq
 80078f8:	2301      	moveq	r3, #1
 80078fa:	2300      	movne	r3, #0
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d103      	bne.n	8007916 <HAL_UART_IRQHandler+0x17a>
 800790e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007912:	2b00      	cmp	r3, #0
 8007914:	d04f      	beq.n	80079b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fc0d 	bl	8008136 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007926:	2b40      	cmp	r3, #64	; 0x40
 8007928:	d141      	bne.n	80079ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3314      	adds	r3, #20
 8007930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3314      	adds	r3, #20
 8007952:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007956:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800795a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007962:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007966:	e841 2300 	strex	r3, r2, [r1]
 800796a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800796e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1d9      	bne.n	800792a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797a:	2b00      	cmp	r3, #0
 800797c:	d013      	beq.n	80079a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007982:	4a7d      	ldr	r2, [pc, #500]	; (8007b78 <HAL_UART_IRQHandler+0x3dc>)
 8007984:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fd60 	bl	8006450 <HAL_DMA_Abort_IT>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d016      	beq.n	80079c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079a0:	4610      	mov	r0, r2
 80079a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a4:	e00e      	b.n	80079c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f998 	bl	8007cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ac:	e00a      	b.n	80079c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f994 	bl	8007cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b4:	e006      	b.n	80079c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f990 	bl	8007cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80079c2:	e170      	b.n	8007ca6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c4:	bf00      	nop
    return;
 80079c6:	e16e      	b.n	8007ca6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	f040 814a 	bne.w	8007c66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d6:	f003 0310 	and.w	r3, r3, #16
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 8143 	beq.w	8007c66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80079e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 813c 	beq.w	8007c66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079ee:	2300      	movs	r3, #0
 80079f0:	60bb      	str	r3, [r7, #8]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60bb      	str	r3, [r7, #8]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	60bb      	str	r3, [r7, #8]
 8007a02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0e:	2b40      	cmp	r3, #64	; 0x40
 8007a10:	f040 80b4 	bne.w	8007b7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 8140 	beq.w	8007caa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a32:	429a      	cmp	r2, r3
 8007a34:	f080 8139 	bcs.w	8007caa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a4a:	f000 8088 	beq.w	8007b5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	330c      	adds	r3, #12
 8007a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	330c      	adds	r3, #12
 8007a76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1d9      	bne.n	8007a4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3314      	adds	r3, #20
 8007aa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aac:	f023 0301 	bic.w	r3, r3, #1
 8007ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3314      	adds	r3, #20
 8007aba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007abe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ac2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ac6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e1      	bne.n	8007a9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3314      	adds	r3, #20
 8007adc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3314      	adds	r3, #20
 8007af6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007afa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007afc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e3      	bne.n	8007ad6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b2e:	f023 0310 	bic.w	r3, r3, #16
 8007b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	330c      	adds	r3, #12
 8007b3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b40:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e3      	bne.n	8007b1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe fc09 	bl	8006370 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f8bd 	bl	8007cee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b74:	e099      	b.n	8007caa <HAL_UART_IRQHandler+0x50e>
 8007b76:	bf00      	nop
 8007b78:	080081fb 	.word	0x080081fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 808b 	beq.w	8007cae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8086 	beq.w	8007cae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	330c      	adds	r3, #12
 8007bc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007bc6:	647a      	str	r2, [r7, #68]	; 0x44
 8007bc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e3      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3314      	adds	r3, #20
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	623b      	str	r3, [r7, #32]
   return(result);
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	f023 0301 	bic.w	r3, r3, #1
 8007bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3314      	adds	r3, #20
 8007bfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bfe:	633a      	str	r2, [r7, #48]	; 0x30
 8007c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e3      	bne.n	8007bda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	330c      	adds	r3, #12
 8007c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0310 	bic.w	r3, r3, #16
 8007c36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	330c      	adds	r3, #12
 8007c40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007c44:	61fa      	str	r2, [r7, #28]
 8007c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	69b9      	ldr	r1, [r7, #24]
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	617b      	str	r3, [r7, #20]
   return(result);
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e3      	bne.n	8007c20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f845 	bl	8007cee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c64:	e023      	b.n	8007cae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d009      	beq.n	8007c86 <HAL_UART_IRQHandler+0x4ea>
 8007c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 facf 	bl	8008222 <UART_Transmit_IT>
    return;
 8007c84:	e014      	b.n	8007cb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00e      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x514>
 8007c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d008      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fb0e 	bl	80082c0 <UART_EndTransmit_IT>
    return;
 8007ca4:	e004      	b.n	8007cb0 <HAL_UART_IRQHandler+0x514>
    return;
 8007ca6:	bf00      	nop
 8007ca8:	e002      	b.n	8007cb0 <HAL_UART_IRQHandler+0x514>
      return;
 8007caa:	bf00      	nop
 8007cac:	e000      	b.n	8007cb0 <HAL_UART_IRQHandler+0x514>
      return;
 8007cae:	bf00      	nop
  }
}
 8007cb0:	37e8      	adds	r7, #232	; 0xe8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop

08007cb8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr

08007cca <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bc80      	pop	{r7}
 8007cda:	4770      	bx	lr

08007cdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr

08007cee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bc80      	pop	{r7}
 8007d02:	4770      	bx	lr

08007d04 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b090      	sub	sp, #64	; 0x40
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d137      	bne.n	8007d90 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d22:	2200      	movs	r2, #0
 8007d24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3314      	adds	r3, #20
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	623b      	str	r3, [r7, #32]
   return(result);
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3314      	adds	r3, #20
 8007d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d46:	633a      	str	r2, [r7, #48]	; 0x30
 8007d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e5      	bne.n	8007d26 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	330c      	adds	r3, #12
 8007d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d70:	637b      	str	r3, [r7, #52]	; 0x34
 8007d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	330c      	adds	r3, #12
 8007d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d7a:	61fa      	str	r2, [r7, #28]
 8007d7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	69b9      	ldr	r1, [r7, #24]
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	617b      	str	r3, [r7, #20]
   return(result);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e5      	bne.n	8007d5a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d8e:	e002      	b.n	8007d96 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007d90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007d92:	f7fc fa11 	bl	80041b8 <HAL_UART_TxCpltCallback>
}
 8007d96:	bf00      	nop
 8007d98:	3740      	adds	r7, #64	; 0x40
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff ff83 	bl	8007cb8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007db2:	bf00      	nop
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b09c      	sub	sp, #112	; 0x70
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d172      	bne.n	8007ebc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd8:	2200      	movs	r2, #0
 8007dda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	330c      	adds	r3, #12
 8007de2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de6:	e853 3f00 	ldrex	r3, [r3]
 8007dea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007df2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	330c      	adds	r3, #12
 8007dfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007dfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8007dfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e5      	bne.n	8007ddc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3314      	adds	r3, #20
 8007e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e22:	f023 0301 	bic.w	r3, r3, #1
 8007e26:	667b      	str	r3, [r7, #100]	; 0x64
 8007e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3314      	adds	r3, #20
 8007e2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e30:	647a      	str	r2, [r7, #68]	; 0x44
 8007e32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e38:	e841 2300 	strex	r3, r2, [r1]
 8007e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e5      	bne.n	8007e10 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3314      	adds	r3, #20
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	e853 3f00 	ldrex	r3, [r3]
 8007e52:	623b      	str	r3, [r7, #32]
   return(result);
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e5a:	663b      	str	r3, [r7, #96]	; 0x60
 8007e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3314      	adds	r3, #20
 8007e62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e64:	633a      	str	r2, [r7, #48]	; 0x30
 8007e66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e6c:	e841 2300 	strex	r3, r2, [r1]
 8007e70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e5      	bne.n	8007e44 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d119      	bne.n	8007ebc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	330c      	adds	r3, #12
 8007e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	e853 3f00 	ldrex	r3, [r3]
 8007e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 0310 	bic.w	r3, r3, #16
 8007e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	330c      	adds	r3, #12
 8007ea6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ea8:	61fa      	str	r2, [r7, #28]
 8007eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	69b9      	ldr	r1, [r7, #24]
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e5      	bne.n	8007e88 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d106      	bne.n	8007ed2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007ecc:	f7ff ff0f 	bl	8007cee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ed0:	e002      	b.n	8007ed8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007ed2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007ed4:	f7fc f98c 	bl	80041f0 <HAL_UART_RxCpltCallback>
}
 8007ed8:	bf00      	nop
 8007eda:	3770      	adds	r7, #112	; 0x70
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d108      	bne.n	8007f08 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007efa:	085b      	lsrs	r3, r3, #1
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	4619      	mov	r1, r3
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7ff fef4 	bl	8007cee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f06:	e002      	b.n	8007f0e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f7ff fede 	bl	8007cca <HAL_UART_RxHalfCpltCallback>
}
 8007f0e:	bf00      	nop
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f26:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f32:	2b80      	cmp	r3, #128	; 0x80
 8007f34:	bf0c      	ite	eq
 8007f36:	2301      	moveq	r3, #1
 8007f38:	2300      	movne	r3, #0
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b21      	cmp	r3, #33	; 0x21
 8007f48:	d108      	bne.n	8007f5c <UART_DMAError+0x46>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2200      	movs	r2, #0
 8007f54:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007f56:	68b8      	ldr	r0, [r7, #8]
 8007f58:	f000 f8c6 	bl	80080e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f66:	2b40      	cmp	r3, #64	; 0x40
 8007f68:	bf0c      	ite	eq
 8007f6a:	2301      	moveq	r3, #1
 8007f6c:	2300      	movne	r3, #0
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b22      	cmp	r3, #34	; 0x22
 8007f7c:	d108      	bne.n	8007f90 <UART_DMAError+0x7a>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2200      	movs	r2, #0
 8007f88:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007f8a:	68b8      	ldr	r0, [r7, #8]
 8007f8c:	f000 f8d3 	bl	8008136 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	f043 0210 	orr.w	r2, r3, #16
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f9c:	68b8      	ldr	r0, [r7, #8]
 8007f9e:	f7ff fe9d 	bl	8007cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fa2:	bf00      	nop
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b098      	sub	sp, #96	; 0x60
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	88fa      	ldrh	r2, [r7, #6]
 8007fc4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2222      	movs	r2, #34	; 0x22
 8007fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	4a40      	ldr	r2, [pc, #256]	; (80080dc <UART_Start_Receive_DMA+0x130>)
 8007fda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	4a3f      	ldr	r2, [pc, #252]	; (80080e0 <UART_Start_Receive_DMA+0x134>)
 8007fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	4a3e      	ldr	r2, [pc, #248]	; (80080e4 <UART_Start_Receive_DMA+0x138>)
 8007fea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007ff4:	f107 0308 	add.w	r3, r7, #8
 8007ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3304      	adds	r3, #4
 8008004:	4619      	mov	r1, r3
 8008006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	f7fe f958 	bl	80062c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	613b      	str	r3, [r7, #16]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	613b      	str	r3, [r7, #16]
 8008024:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d019      	beq.n	800806a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	330c      	adds	r3, #12
 800803c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800804c:	65bb      	str	r3, [r7, #88]	; 0x58
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	330c      	adds	r3, #12
 8008054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008056:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008058:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800805c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e5      	bne.n	8008036 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3314      	adds	r3, #20
 8008070:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	f043 0301 	orr.w	r3, r3, #1
 8008080:	657b      	str	r3, [r7, #84]	; 0x54
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3314      	adds	r3, #20
 8008088:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800808a:	63ba      	str	r2, [r7, #56]	; 0x38
 800808c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e5      	bne.n	800806a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3314      	adds	r3, #20
 80080a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	617b      	str	r3, [r7, #20]
   return(result);
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080b4:	653b      	str	r3, [r7, #80]	; 0x50
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3314      	adds	r3, #20
 80080bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080be:	627a      	str	r2, [r7, #36]	; 0x24
 80080c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	6a39      	ldr	r1, [r7, #32]
 80080c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e5      	bne.n	800809e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3760      	adds	r7, #96	; 0x60
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	08007dbb 	.word	0x08007dbb
 80080e0:	08007ee1 	.word	0x08007ee1
 80080e4:	08007f17 	.word	0x08007f17

080080e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b089      	sub	sp, #36	; 0x24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	330c      	adds	r3, #12
 80080f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008106:	61fb      	str	r3, [r7, #28]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	330c      	adds	r3, #12
 800810e:	69fa      	ldr	r2, [r7, #28]
 8008110:	61ba      	str	r2, [r7, #24]
 8008112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008114:	6979      	ldr	r1, [r7, #20]
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	e841 2300 	strex	r3, r2, [r1]
 800811c:	613b      	str	r3, [r7, #16]
   return(result);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e5      	bne.n	80080f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2220      	movs	r2, #32
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800812c:	bf00      	nop
 800812e:	3724      	adds	r7, #36	; 0x24
 8008130:	46bd      	mov	sp, r7
 8008132:	bc80      	pop	{r7}
 8008134:	4770      	bx	lr

08008136 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008136:	b480      	push	{r7}
 8008138:	b095      	sub	sp, #84	; 0x54
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	330c      	adds	r3, #12
 8008144:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008154:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	330c      	adds	r3, #12
 800815c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800815e:	643a      	str	r2, [r7, #64]	; 0x40
 8008160:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800816c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e5      	bne.n	800813e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3314      	adds	r3, #20
 8008178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	61fb      	str	r3, [r7, #28]
   return(result);
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	64bb      	str	r3, [r7, #72]	; 0x48
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3314      	adds	r3, #20
 8008190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008192:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008194:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e5      	bne.n	8008172 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d119      	bne.n	80081e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	330c      	adds	r3, #12
 80081b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	e853 3f00 	ldrex	r3, [r3]
 80081bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f023 0310 	bic.w	r3, r3, #16
 80081c4:	647b      	str	r3, [r7, #68]	; 0x44
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	330c      	adds	r3, #12
 80081cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081ce:	61ba      	str	r2, [r7, #24]
 80081d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	6979      	ldr	r1, [r7, #20]
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	613b      	str	r3, [r7, #16]
   return(result);
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e5      	bne.n	80081ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081f0:	bf00      	nop
 80081f2:	3754      	adds	r7, #84	; 0x54
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr

080081fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008206:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f7ff fd61 	bl	8007cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800821a:	bf00      	nop
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008222:	b480      	push	{r7}
 8008224:	b085      	sub	sp, #20
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b21      	cmp	r3, #33	; 0x21
 8008234:	d13e      	bne.n	80082b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800823e:	d114      	bne.n	800826a <UART_Transmit_IT+0x48>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d110      	bne.n	800826a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a1b      	ldr	r3, [r3, #32]
 800824c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800825c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	1c9a      	adds	r2, r3, #2
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	621a      	str	r2, [r3, #32]
 8008268:	e008      	b.n	800827c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	1c59      	adds	r1, r3, #1
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	6211      	str	r1, [r2, #32]
 8008274:	781a      	ldrb	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008280:	b29b      	uxth	r3, r3
 8008282:	3b01      	subs	r3, #1
 8008284:	b29b      	uxth	r3, r3
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	4619      	mov	r1, r3
 800828a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10f      	bne.n	80082b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800829e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68da      	ldr	r2, [r3, #12]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	e000      	b.n	80082b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082b4:	2302      	movs	r3, #2
  }
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr

080082c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2220      	movs	r2, #32
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7fb ff69 	bl	80041b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08c      	sub	sp, #48	; 0x30
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b22      	cmp	r3, #34	; 0x22
 8008302:	f040 80ab 	bne.w	800845c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800830e:	d117      	bne.n	8008340 <UART_Receive_IT+0x50>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d113      	bne.n	8008340 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008318:	2300      	movs	r3, #0
 800831a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008320:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	b29b      	uxth	r3, r3
 800832a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832e:	b29a      	uxth	r2, r3
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008338:	1c9a      	adds	r2, r3, #2
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	629a      	str	r2, [r3, #40]	; 0x28
 800833e:	e026      	b.n	800838e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008344:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008346:	2300      	movs	r3, #0
 8008348:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008352:	d007      	beq.n	8008364 <UART_Receive_IT+0x74>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <UART_Receive_IT+0x82>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d106      	bne.n	8008372 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	b2da      	uxtb	r2, r3
 800836c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836e:	701a      	strb	r2, [r3, #0]
 8008370:	e008      	b.n	8008384 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800837e:	b2da      	uxtb	r2, r3
 8008380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008382:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008392:	b29b      	uxth	r3, r3
 8008394:	3b01      	subs	r3, #1
 8008396:	b29b      	uxth	r3, r3
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	4619      	mov	r1, r3
 800839c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d15a      	bne.n	8008458 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 0220 	bic.w	r2, r2, #32
 80083b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	695a      	ldr	r2, [r3, #20]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 0201 	bic.w	r2, r2, #1
 80083d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d135      	bne.n	800844e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	330c      	adds	r3, #12
 80083ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	613b      	str	r3, [r7, #16]
   return(result);
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f023 0310 	bic.w	r3, r3, #16
 80083fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	330c      	adds	r3, #12
 8008406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008408:	623a      	str	r2, [r7, #32]
 800840a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	69f9      	ldr	r1, [r7, #28]
 800840e:	6a3a      	ldr	r2, [r7, #32]
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	61bb      	str	r3, [r7, #24]
   return(result);
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e5      	bne.n	80083e8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0310 	and.w	r3, r3, #16
 8008426:	2b10      	cmp	r3, #16
 8008428:	d10a      	bne.n	8008440 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	60fb      	str	r3, [r7, #12]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7ff fc51 	bl	8007cee <HAL_UARTEx_RxEventCallback>
 800844c:	e002      	b.n	8008454 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7fb fece 	bl	80041f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	e002      	b.n	800845e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	e000      	b.n	800845e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800845c:	2302      	movs	r3, #2
  }
}
 800845e:	4618      	mov	r0, r3
 8008460:	3730      	adds	r7, #48	; 0x30
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800846c:	b0c0      	sub	sp, #256	; 0x100
 800846e:	af00      	add	r7, sp, #0
 8008470:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008484:	68d9      	ldr	r1, [r3, #12]
 8008486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	ea40 0301 	orr.w	r3, r0, r1
 8008490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	431a      	orrs	r2, r3
 80084a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084c0:	f021 010c 	bic.w	r1, r1, #12
 80084c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084ce:	430b      	orrs	r3, r1
 80084d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80084de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e2:	6999      	ldr	r1, [r3, #24]
 80084e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	ea40 0301 	orr.w	r3, r0, r1
 80084ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	4b91      	ldr	r3, [pc, #580]	; (800873c <UART_SetConfig+0x2d4>)
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d005      	beq.n	8008508 <UART_SetConfig+0xa0>
 80084fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	4b8f      	ldr	r3, [pc, #572]	; (8008740 <UART_SetConfig+0x2d8>)
 8008504:	429a      	cmp	r2, r3
 8008506:	d104      	bne.n	8008512 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008508:	f7ff f838 	bl	800757c <HAL_RCC_GetPCLK2Freq>
 800850c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008510:	e003      	b.n	800851a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008512:	f7ff f81f 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 8008516:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800851a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008524:	f040 8110 	bne.w	8008748 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800852c:	2200      	movs	r2, #0
 800852e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008532:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008536:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800853a:	4622      	mov	r2, r4
 800853c:	462b      	mov	r3, r5
 800853e:	1891      	adds	r1, r2, r2
 8008540:	65b9      	str	r1, [r7, #88]	; 0x58
 8008542:	415b      	adcs	r3, r3
 8008544:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008546:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800854a:	4620      	mov	r0, r4
 800854c:	4629      	mov	r1, r5
 800854e:	4604      	mov	r4, r0
 8008550:	eb12 0804 	adds.w	r8, r2, r4
 8008554:	460c      	mov	r4, r1
 8008556:	eb43 0904 	adc.w	r9, r3, r4
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800856a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800856e:	4690      	mov	r8, r2
 8008570:	4699      	mov	r9, r3
 8008572:	4603      	mov	r3, r0
 8008574:	eb18 0303 	adds.w	r3, r8, r3
 8008578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800857c:	460b      	mov	r3, r1
 800857e:	eb49 0303 	adc.w	r3, r9, r3
 8008582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008592:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008596:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800859a:	460b      	mov	r3, r1
 800859c:	18db      	adds	r3, r3, r3
 800859e:	653b      	str	r3, [r7, #80]	; 0x50
 80085a0:	4613      	mov	r3, r2
 80085a2:	eb42 0303 	adc.w	r3, r2, r3
 80085a6:	657b      	str	r3, [r7, #84]	; 0x54
 80085a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085b0:	f7f8 fa08 	bl	80009c4 <__aeabi_uldivmod>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4b62      	ldr	r3, [pc, #392]	; (8008744 <UART_SetConfig+0x2dc>)
 80085ba:	fba3 2302 	umull	r2, r3, r3, r2
 80085be:	095b      	lsrs	r3, r3, #5
 80085c0:	011c      	lsls	r4, r3, #4
 80085c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80085d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80085d4:	4642      	mov	r2, r8
 80085d6:	464b      	mov	r3, r9
 80085d8:	1891      	adds	r1, r2, r2
 80085da:	64b9      	str	r1, [r7, #72]	; 0x48
 80085dc:	415b      	adcs	r3, r3
 80085de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085e4:	4645      	mov	r5, r8
 80085e6:	eb12 0a05 	adds.w	sl, r2, r5
 80085ea:	4640      	mov	r0, r8
 80085ec:	4649      	mov	r1, r9
 80085ee:	460d      	mov	r5, r1
 80085f0:	eb43 0b05 	adc.w	fp, r3, r5
 80085f4:	f04f 0200 	mov.w	r2, #0
 80085f8:	f04f 0300 	mov.w	r3, #0
 80085fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008600:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008604:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008608:	4692      	mov	sl, r2
 800860a:	469b      	mov	fp, r3
 800860c:	4603      	mov	r3, r0
 800860e:	eb1a 0303 	adds.w	r3, sl, r3
 8008612:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008616:	460b      	mov	r3, r1
 8008618:	eb4b 0303 	adc.w	r3, fp, r3
 800861c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800862c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008630:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008634:	460b      	mov	r3, r1
 8008636:	18db      	adds	r3, r3, r3
 8008638:	643b      	str	r3, [r7, #64]	; 0x40
 800863a:	4613      	mov	r3, r2
 800863c:	eb42 0303 	adc.w	r3, r2, r3
 8008640:	647b      	str	r3, [r7, #68]	; 0x44
 8008642:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008646:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800864a:	f7f8 f9bb 	bl	80009c4 <__aeabi_uldivmod>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	4611      	mov	r1, r2
 8008654:	4b3b      	ldr	r3, [pc, #236]	; (8008744 <UART_SetConfig+0x2dc>)
 8008656:	fba3 2301 	umull	r2, r3, r3, r1
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	2264      	movs	r2, #100	; 0x64
 800865e:	fb02 f303 	mul.w	r3, r2, r3
 8008662:	1acb      	subs	r3, r1, r3
 8008664:	00db      	lsls	r3, r3, #3
 8008666:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800866a:	4b36      	ldr	r3, [pc, #216]	; (8008744 <UART_SetConfig+0x2dc>)
 800866c:	fba3 2302 	umull	r2, r3, r3, r2
 8008670:	095b      	lsrs	r3, r3, #5
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008678:	441c      	add	r4, r3
 800867a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800867e:	2200      	movs	r2, #0
 8008680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008684:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008688:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800868c:	4642      	mov	r2, r8
 800868e:	464b      	mov	r3, r9
 8008690:	1891      	adds	r1, r2, r2
 8008692:	63b9      	str	r1, [r7, #56]	; 0x38
 8008694:	415b      	adcs	r3, r3
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800869c:	4641      	mov	r1, r8
 800869e:	1851      	adds	r1, r2, r1
 80086a0:	6339      	str	r1, [r7, #48]	; 0x30
 80086a2:	4649      	mov	r1, r9
 80086a4:	414b      	adcs	r3, r1
 80086a6:	637b      	str	r3, [r7, #52]	; 0x34
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	f04f 0300 	mov.w	r3, #0
 80086b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80086b4:	4659      	mov	r1, fp
 80086b6:	00cb      	lsls	r3, r1, #3
 80086b8:	4655      	mov	r5, sl
 80086ba:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80086be:	4651      	mov	r1, sl
 80086c0:	00ca      	lsls	r2, r1, #3
 80086c2:	4610      	mov	r0, r2
 80086c4:	4619      	mov	r1, r3
 80086c6:	4603      	mov	r3, r0
 80086c8:	4642      	mov	r2, r8
 80086ca:	189b      	adds	r3, r3, r2
 80086cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086d0:	464b      	mov	r3, r9
 80086d2:	460a      	mov	r2, r1
 80086d4:	eb42 0303 	adc.w	r3, r2, r3
 80086d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80086ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80086f0:	460b      	mov	r3, r1
 80086f2:	18db      	adds	r3, r3, r3
 80086f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80086f6:	4613      	mov	r3, r2
 80086f8:	eb42 0303 	adc.w	r3, r2, r3
 80086fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008702:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008706:	f7f8 f95d 	bl	80009c4 <__aeabi_uldivmod>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	4b0d      	ldr	r3, [pc, #52]	; (8008744 <UART_SetConfig+0x2dc>)
 8008710:	fba3 1302 	umull	r1, r3, r3, r2
 8008714:	095b      	lsrs	r3, r3, #5
 8008716:	2164      	movs	r1, #100	; 0x64
 8008718:	fb01 f303 	mul.w	r3, r1, r3
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	3332      	adds	r3, #50	; 0x32
 8008722:	4a08      	ldr	r2, [pc, #32]	; (8008744 <UART_SetConfig+0x2dc>)
 8008724:	fba2 2303 	umull	r2, r3, r2, r3
 8008728:	095b      	lsrs	r3, r3, #5
 800872a:	f003 0207 	and.w	r2, r3, #7
 800872e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4422      	add	r2, r4
 8008736:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008738:	e10a      	b.n	8008950 <UART_SetConfig+0x4e8>
 800873a:	bf00      	nop
 800873c:	40011000 	.word	0x40011000
 8008740:	40011400 	.word	0x40011400
 8008744:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800874c:	2200      	movs	r2, #0
 800874e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008752:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008756:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800875a:	4642      	mov	r2, r8
 800875c:	464b      	mov	r3, r9
 800875e:	1891      	adds	r1, r2, r2
 8008760:	6239      	str	r1, [r7, #32]
 8008762:	415b      	adcs	r3, r3
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
 8008766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800876a:	4641      	mov	r1, r8
 800876c:	1854      	adds	r4, r2, r1
 800876e:	46cc      	mov	ip, r9
 8008770:	eb43 050c 	adc.w	r5, r3, ip
 8008774:	f04f 0200 	mov.w	r2, #0
 8008778:	f04f 0300 	mov.w	r3, #0
 800877c:	00eb      	lsls	r3, r5, #3
 800877e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008782:	00e2      	lsls	r2, r4, #3
 8008784:	4614      	mov	r4, r2
 8008786:	461d      	mov	r5, r3
 8008788:	4640      	mov	r0, r8
 800878a:	4649      	mov	r1, r9
 800878c:	4603      	mov	r3, r0
 800878e:	18e3      	adds	r3, r4, r3
 8008790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008794:	460b      	mov	r3, r1
 8008796:	eb45 0303 	adc.w	r3, r5, r3
 800879a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800879e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087ae:	f04f 0200 	mov.w	r2, #0
 80087b2:	f04f 0300 	mov.w	r3, #0
 80087b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80087ba:	4629      	mov	r1, r5
 80087bc:	008b      	lsls	r3, r1, #2
 80087be:	4620      	mov	r0, r4
 80087c0:	4629      	mov	r1, r5
 80087c2:	4604      	mov	r4, r0
 80087c4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80087c8:	4601      	mov	r1, r0
 80087ca:	008a      	lsls	r2, r1, #2
 80087cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087d0:	f7f8 f8f8 	bl	80009c4 <__aeabi_uldivmod>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4b60      	ldr	r3, [pc, #384]	; (800895c <UART_SetConfig+0x4f4>)
 80087da:	fba3 2302 	umull	r2, r3, r3, r2
 80087de:	095b      	lsrs	r3, r3, #5
 80087e0:	011c      	lsls	r4, r3, #4
 80087e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80087f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80087f4:	4642      	mov	r2, r8
 80087f6:	464b      	mov	r3, r9
 80087f8:	1891      	adds	r1, r2, r2
 80087fa:	61b9      	str	r1, [r7, #24]
 80087fc:	415b      	adcs	r3, r3
 80087fe:	61fb      	str	r3, [r7, #28]
 8008800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008804:	4641      	mov	r1, r8
 8008806:	1851      	adds	r1, r2, r1
 8008808:	6139      	str	r1, [r7, #16]
 800880a:	4649      	mov	r1, r9
 800880c:	414b      	adcs	r3, r1
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	f04f 0300 	mov.w	r3, #0
 8008818:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800881c:	4659      	mov	r1, fp
 800881e:	00cb      	lsls	r3, r1, #3
 8008820:	4655      	mov	r5, sl
 8008822:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8008826:	4651      	mov	r1, sl
 8008828:	00ca      	lsls	r2, r1, #3
 800882a:	4610      	mov	r0, r2
 800882c:	4619      	mov	r1, r3
 800882e:	4603      	mov	r3, r0
 8008830:	4642      	mov	r2, r8
 8008832:	189b      	adds	r3, r3, r2
 8008834:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008838:	464b      	mov	r3, r9
 800883a:	460a      	mov	r2, r1
 800883c:	eb42 0303 	adc.w	r3, r2, r3
 8008840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	67bb      	str	r3, [r7, #120]	; 0x78
 800884e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008850:	f04f 0200 	mov.w	r2, #0
 8008854:	f04f 0300 	mov.w	r3, #0
 8008858:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800885c:	4649      	mov	r1, r9
 800885e:	008b      	lsls	r3, r1, #2
 8008860:	4645      	mov	r5, r8
 8008862:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8008866:	4641      	mov	r1, r8
 8008868:	008a      	lsls	r2, r1, #2
 800886a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800886e:	f7f8 f8a9 	bl	80009c4 <__aeabi_uldivmod>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	4611      	mov	r1, r2
 8008878:	4b38      	ldr	r3, [pc, #224]	; (800895c <UART_SetConfig+0x4f4>)
 800887a:	fba3 2301 	umull	r2, r3, r3, r1
 800887e:	095b      	lsrs	r3, r3, #5
 8008880:	2264      	movs	r2, #100	; 0x64
 8008882:	fb02 f303 	mul.w	r3, r2, r3
 8008886:	1acb      	subs	r3, r1, r3
 8008888:	011b      	lsls	r3, r3, #4
 800888a:	3332      	adds	r3, #50	; 0x32
 800888c:	4a33      	ldr	r2, [pc, #204]	; (800895c <UART_SetConfig+0x4f4>)
 800888e:	fba2 2303 	umull	r2, r3, r2, r3
 8008892:	095b      	lsrs	r3, r3, #5
 8008894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008898:	441c      	add	r4, r3
 800889a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800889e:	2200      	movs	r2, #0
 80088a0:	673b      	str	r3, [r7, #112]	; 0x70
 80088a2:	677a      	str	r2, [r7, #116]	; 0x74
 80088a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80088a8:	4642      	mov	r2, r8
 80088aa:	464b      	mov	r3, r9
 80088ac:	1891      	adds	r1, r2, r2
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	415b      	adcs	r3, r3
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088b8:	4641      	mov	r1, r8
 80088ba:	1851      	adds	r1, r2, r1
 80088bc:	6039      	str	r1, [r7, #0]
 80088be:	4649      	mov	r1, r9
 80088c0:	414b      	adcs	r3, r1
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	f04f 0200 	mov.w	r2, #0
 80088c8:	f04f 0300 	mov.w	r3, #0
 80088cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088d0:	4659      	mov	r1, fp
 80088d2:	00cb      	lsls	r3, r1, #3
 80088d4:	4655      	mov	r5, sl
 80088d6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80088da:	4651      	mov	r1, sl
 80088dc:	00ca      	lsls	r2, r1, #3
 80088de:	4610      	mov	r0, r2
 80088e0:	4619      	mov	r1, r3
 80088e2:	4603      	mov	r3, r0
 80088e4:	4642      	mov	r2, r8
 80088e6:	189b      	adds	r3, r3, r2
 80088e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80088ea:	464b      	mov	r3, r9
 80088ec:	460a      	mov	r2, r1
 80088ee:	eb42 0303 	adc.w	r3, r2, r3
 80088f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	663b      	str	r3, [r7, #96]	; 0x60
 80088fe:	667a      	str	r2, [r7, #100]	; 0x64
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800890c:	4649      	mov	r1, r9
 800890e:	008b      	lsls	r3, r1, #2
 8008910:	4645      	mov	r5, r8
 8008912:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8008916:	4641      	mov	r1, r8
 8008918:	008a      	lsls	r2, r1, #2
 800891a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800891e:	f7f8 f851 	bl	80009c4 <__aeabi_uldivmod>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4b0d      	ldr	r3, [pc, #52]	; (800895c <UART_SetConfig+0x4f4>)
 8008928:	fba3 1302 	umull	r1, r3, r3, r2
 800892c:	095b      	lsrs	r3, r3, #5
 800892e:	2164      	movs	r1, #100	; 0x64
 8008930:	fb01 f303 	mul.w	r3, r1, r3
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	3332      	adds	r3, #50	; 0x32
 800893a:	4a08      	ldr	r2, [pc, #32]	; (800895c <UART_SetConfig+0x4f4>)
 800893c:	fba2 2303 	umull	r2, r3, r2, r3
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	f003 020f 	and.w	r2, r3, #15
 8008946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4422      	add	r2, r4
 800894e:	609a      	str	r2, [r3, #8]
}
 8008950:	bf00      	nop
 8008952:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008956:	46bd      	mov	sp, r7
 8008958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800895c:	51eb851f 	.word	0x51eb851f

08008960 <realloc>:
 8008960:	4b02      	ldr	r3, [pc, #8]	; (800896c <realloc+0xc>)
 8008962:	460a      	mov	r2, r1
 8008964:	4601      	mov	r1, r0
 8008966:	6818      	ldr	r0, [r3, #0]
 8008968:	f000 b802 	b.w	8008970 <_realloc_r>
 800896c:	20000088 	.word	0x20000088

08008970 <_realloc_r>:
 8008970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008974:	4680      	mov	r8, r0
 8008976:	4614      	mov	r4, r2
 8008978:	460e      	mov	r6, r1
 800897a:	b921      	cbnz	r1, 8008986 <_realloc_r+0x16>
 800897c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008980:	4611      	mov	r1, r2
 8008982:	f000 b8d1 	b.w	8008b28 <_malloc_r>
 8008986:	b92a      	cbnz	r2, 8008994 <_realloc_r+0x24>
 8008988:	f000 f864 	bl	8008a54 <_free_r>
 800898c:	4625      	mov	r5, r4
 800898e:	4628      	mov	r0, r5
 8008990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008994:	f000 f954 	bl	8008c40 <_malloc_usable_size_r>
 8008998:	4284      	cmp	r4, r0
 800899a:	4607      	mov	r7, r0
 800899c:	d802      	bhi.n	80089a4 <_realloc_r+0x34>
 800899e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089a2:	d812      	bhi.n	80089ca <_realloc_r+0x5a>
 80089a4:	4621      	mov	r1, r4
 80089a6:	4640      	mov	r0, r8
 80089a8:	f000 f8be 	bl	8008b28 <_malloc_r>
 80089ac:	4605      	mov	r5, r0
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d0ed      	beq.n	800898e <_realloc_r+0x1e>
 80089b2:	42bc      	cmp	r4, r7
 80089b4:	4622      	mov	r2, r4
 80089b6:	4631      	mov	r1, r6
 80089b8:	bf28      	it	cs
 80089ba:	463a      	movcs	r2, r7
 80089bc:	f000 f83c 	bl	8008a38 <memcpy>
 80089c0:	4631      	mov	r1, r6
 80089c2:	4640      	mov	r0, r8
 80089c4:	f000 f846 	bl	8008a54 <_free_r>
 80089c8:	e7e1      	b.n	800898e <_realloc_r+0x1e>
 80089ca:	4635      	mov	r5, r6
 80089cc:	e7df      	b.n	800898e <_realloc_r+0x1e>

080089ce <memset>:
 80089ce:	4402      	add	r2, r0
 80089d0:	4603      	mov	r3, r0
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d100      	bne.n	80089d8 <memset+0xa>
 80089d6:	4770      	bx	lr
 80089d8:	f803 1b01 	strb.w	r1, [r3], #1
 80089dc:	e7f9      	b.n	80089d2 <memset+0x4>
	...

080089e0 <__errno>:
 80089e0:	4b01      	ldr	r3, [pc, #4]	; (80089e8 <__errno+0x8>)
 80089e2:	6818      	ldr	r0, [r3, #0]
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	20000088 	.word	0x20000088

080089ec <__libc_init_array>:
 80089ec:	b570      	push	{r4, r5, r6, lr}
 80089ee:	4d0d      	ldr	r5, [pc, #52]	; (8008a24 <__libc_init_array+0x38>)
 80089f0:	4c0d      	ldr	r4, [pc, #52]	; (8008a28 <__libc_init_array+0x3c>)
 80089f2:	1b64      	subs	r4, r4, r5
 80089f4:	10a4      	asrs	r4, r4, #2
 80089f6:	2600      	movs	r6, #0
 80089f8:	42a6      	cmp	r6, r4
 80089fa:	d109      	bne.n	8008a10 <__libc_init_array+0x24>
 80089fc:	4d0b      	ldr	r5, [pc, #44]	; (8008a2c <__libc_init_array+0x40>)
 80089fe:	4c0c      	ldr	r4, [pc, #48]	; (8008a30 <__libc_init_array+0x44>)
 8008a00:	f000 f936 	bl	8008c70 <_init>
 8008a04:	1b64      	subs	r4, r4, r5
 8008a06:	10a4      	asrs	r4, r4, #2
 8008a08:	2600      	movs	r6, #0
 8008a0a:	42a6      	cmp	r6, r4
 8008a0c:	d105      	bne.n	8008a1a <__libc_init_array+0x2e>
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}
 8008a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a14:	4798      	blx	r3
 8008a16:	3601      	adds	r6, #1
 8008a18:	e7ee      	b.n	80089f8 <__libc_init_array+0xc>
 8008a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a1e:	4798      	blx	r3
 8008a20:	3601      	adds	r6, #1
 8008a22:	e7f2      	b.n	8008a0a <__libc_init_array+0x1e>
 8008a24:	08009040 	.word	0x08009040
 8008a28:	08009040 	.word	0x08009040
 8008a2c:	08009040 	.word	0x08009040
 8008a30:	08009048 	.word	0x08009048

08008a34 <__retarget_lock_acquire_recursive>:
 8008a34:	4770      	bx	lr

08008a36 <__retarget_lock_release_recursive>:
 8008a36:	4770      	bx	lr

08008a38 <memcpy>:
 8008a38:	440a      	add	r2, r1
 8008a3a:	4291      	cmp	r1, r2
 8008a3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a40:	d100      	bne.n	8008a44 <memcpy+0xc>
 8008a42:	4770      	bx	lr
 8008a44:	b510      	push	{r4, lr}
 8008a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a4e:	4291      	cmp	r1, r2
 8008a50:	d1f9      	bne.n	8008a46 <memcpy+0xe>
 8008a52:	bd10      	pop	{r4, pc}

08008a54 <_free_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4605      	mov	r5, r0
 8008a58:	2900      	cmp	r1, #0
 8008a5a:	d041      	beq.n	8008ae0 <_free_r+0x8c>
 8008a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a60:	1f0c      	subs	r4, r1, #4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	bfb8      	it	lt
 8008a66:	18e4      	addlt	r4, r4, r3
 8008a68:	f000 f8de 	bl	8008c28 <__malloc_lock>
 8008a6c:	4a1d      	ldr	r2, [pc, #116]	; (8008ae4 <_free_r+0x90>)
 8008a6e:	6813      	ldr	r3, [r2, #0]
 8008a70:	b933      	cbnz	r3, 8008a80 <_free_r+0x2c>
 8008a72:	6063      	str	r3, [r4, #4]
 8008a74:	6014      	str	r4, [r2, #0]
 8008a76:	4628      	mov	r0, r5
 8008a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a7c:	f000 b8da 	b.w	8008c34 <__malloc_unlock>
 8008a80:	42a3      	cmp	r3, r4
 8008a82:	d908      	bls.n	8008a96 <_free_r+0x42>
 8008a84:	6820      	ldr	r0, [r4, #0]
 8008a86:	1821      	adds	r1, r4, r0
 8008a88:	428b      	cmp	r3, r1
 8008a8a:	bf01      	itttt	eq
 8008a8c:	6819      	ldreq	r1, [r3, #0]
 8008a8e:	685b      	ldreq	r3, [r3, #4]
 8008a90:	1809      	addeq	r1, r1, r0
 8008a92:	6021      	streq	r1, [r4, #0]
 8008a94:	e7ed      	b.n	8008a72 <_free_r+0x1e>
 8008a96:	461a      	mov	r2, r3
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	b10b      	cbz	r3, 8008aa0 <_free_r+0x4c>
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	d9fa      	bls.n	8008a96 <_free_r+0x42>
 8008aa0:	6811      	ldr	r1, [r2, #0]
 8008aa2:	1850      	adds	r0, r2, r1
 8008aa4:	42a0      	cmp	r0, r4
 8008aa6:	d10b      	bne.n	8008ac0 <_free_r+0x6c>
 8008aa8:	6820      	ldr	r0, [r4, #0]
 8008aaa:	4401      	add	r1, r0
 8008aac:	1850      	adds	r0, r2, r1
 8008aae:	4283      	cmp	r3, r0
 8008ab0:	6011      	str	r1, [r2, #0]
 8008ab2:	d1e0      	bne.n	8008a76 <_free_r+0x22>
 8008ab4:	6818      	ldr	r0, [r3, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	6053      	str	r3, [r2, #4]
 8008aba:	4408      	add	r0, r1
 8008abc:	6010      	str	r0, [r2, #0]
 8008abe:	e7da      	b.n	8008a76 <_free_r+0x22>
 8008ac0:	d902      	bls.n	8008ac8 <_free_r+0x74>
 8008ac2:	230c      	movs	r3, #12
 8008ac4:	602b      	str	r3, [r5, #0]
 8008ac6:	e7d6      	b.n	8008a76 <_free_r+0x22>
 8008ac8:	6820      	ldr	r0, [r4, #0]
 8008aca:	1821      	adds	r1, r4, r0
 8008acc:	428b      	cmp	r3, r1
 8008ace:	bf04      	itt	eq
 8008ad0:	6819      	ldreq	r1, [r3, #0]
 8008ad2:	685b      	ldreq	r3, [r3, #4]
 8008ad4:	6063      	str	r3, [r4, #4]
 8008ad6:	bf04      	itt	eq
 8008ad8:	1809      	addeq	r1, r1, r0
 8008ada:	6021      	streq	r1, [r4, #0]
 8008adc:	6054      	str	r4, [r2, #4]
 8008ade:	e7ca      	b.n	8008a76 <_free_r+0x22>
 8008ae0:	bd38      	pop	{r3, r4, r5, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20002520 	.word	0x20002520

08008ae8 <sbrk_aligned>:
 8008ae8:	b570      	push	{r4, r5, r6, lr}
 8008aea:	4e0e      	ldr	r6, [pc, #56]	; (8008b24 <sbrk_aligned+0x3c>)
 8008aec:	460c      	mov	r4, r1
 8008aee:	6831      	ldr	r1, [r6, #0]
 8008af0:	4605      	mov	r5, r0
 8008af2:	b911      	cbnz	r1, 8008afa <sbrk_aligned+0x12>
 8008af4:	f000 f8ac 	bl	8008c50 <_sbrk_r>
 8008af8:	6030      	str	r0, [r6, #0]
 8008afa:	4621      	mov	r1, r4
 8008afc:	4628      	mov	r0, r5
 8008afe:	f000 f8a7 	bl	8008c50 <_sbrk_r>
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	d00a      	beq.n	8008b1c <sbrk_aligned+0x34>
 8008b06:	1cc4      	adds	r4, r0, #3
 8008b08:	f024 0403 	bic.w	r4, r4, #3
 8008b0c:	42a0      	cmp	r0, r4
 8008b0e:	d007      	beq.n	8008b20 <sbrk_aligned+0x38>
 8008b10:	1a21      	subs	r1, r4, r0
 8008b12:	4628      	mov	r0, r5
 8008b14:	f000 f89c 	bl	8008c50 <_sbrk_r>
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d101      	bne.n	8008b20 <sbrk_aligned+0x38>
 8008b1c:	f04f 34ff 	mov.w	r4, #4294967295
 8008b20:	4620      	mov	r0, r4
 8008b22:	bd70      	pop	{r4, r5, r6, pc}
 8008b24:	20002524 	.word	0x20002524

08008b28 <_malloc_r>:
 8008b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b2c:	1ccd      	adds	r5, r1, #3
 8008b2e:	f025 0503 	bic.w	r5, r5, #3
 8008b32:	3508      	adds	r5, #8
 8008b34:	2d0c      	cmp	r5, #12
 8008b36:	bf38      	it	cc
 8008b38:	250c      	movcc	r5, #12
 8008b3a:	2d00      	cmp	r5, #0
 8008b3c:	4607      	mov	r7, r0
 8008b3e:	db01      	blt.n	8008b44 <_malloc_r+0x1c>
 8008b40:	42a9      	cmp	r1, r5
 8008b42:	d905      	bls.n	8008b50 <_malloc_r+0x28>
 8008b44:	230c      	movs	r3, #12
 8008b46:	603b      	str	r3, [r7, #0]
 8008b48:	2600      	movs	r6, #0
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c24 <_malloc_r+0xfc>
 8008b54:	f000 f868 	bl	8008c28 <__malloc_lock>
 8008b58:	f8d8 3000 	ldr.w	r3, [r8]
 8008b5c:	461c      	mov	r4, r3
 8008b5e:	bb5c      	cbnz	r4, 8008bb8 <_malloc_r+0x90>
 8008b60:	4629      	mov	r1, r5
 8008b62:	4638      	mov	r0, r7
 8008b64:	f7ff ffc0 	bl	8008ae8 <sbrk_aligned>
 8008b68:	1c43      	adds	r3, r0, #1
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	d155      	bne.n	8008c1a <_malloc_r+0xf2>
 8008b6e:	f8d8 4000 	ldr.w	r4, [r8]
 8008b72:	4626      	mov	r6, r4
 8008b74:	2e00      	cmp	r6, #0
 8008b76:	d145      	bne.n	8008c04 <_malloc_r+0xdc>
 8008b78:	2c00      	cmp	r4, #0
 8008b7a:	d048      	beq.n	8008c0e <_malloc_r+0xe6>
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4638      	mov	r0, r7
 8008b82:	eb04 0903 	add.w	r9, r4, r3
 8008b86:	f000 f863 	bl	8008c50 <_sbrk_r>
 8008b8a:	4581      	cmp	r9, r0
 8008b8c:	d13f      	bne.n	8008c0e <_malloc_r+0xe6>
 8008b8e:	6821      	ldr	r1, [r4, #0]
 8008b90:	1a6d      	subs	r5, r5, r1
 8008b92:	4629      	mov	r1, r5
 8008b94:	4638      	mov	r0, r7
 8008b96:	f7ff ffa7 	bl	8008ae8 <sbrk_aligned>
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d037      	beq.n	8008c0e <_malloc_r+0xe6>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	442b      	add	r3, r5
 8008ba2:	6023      	str	r3, [r4, #0]
 8008ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d038      	beq.n	8008c1e <_malloc_r+0xf6>
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	42a2      	cmp	r2, r4
 8008bb0:	d12b      	bne.n	8008c0a <_malloc_r+0xe2>
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	605a      	str	r2, [r3, #4]
 8008bb6:	e00f      	b.n	8008bd8 <_malloc_r+0xb0>
 8008bb8:	6822      	ldr	r2, [r4, #0]
 8008bba:	1b52      	subs	r2, r2, r5
 8008bbc:	d41f      	bmi.n	8008bfe <_malloc_r+0xd6>
 8008bbe:	2a0b      	cmp	r2, #11
 8008bc0:	d917      	bls.n	8008bf2 <_malloc_r+0xca>
 8008bc2:	1961      	adds	r1, r4, r5
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	6025      	str	r5, [r4, #0]
 8008bc8:	bf18      	it	ne
 8008bca:	6059      	strne	r1, [r3, #4]
 8008bcc:	6863      	ldr	r3, [r4, #4]
 8008bce:	bf08      	it	eq
 8008bd0:	f8c8 1000 	streq.w	r1, [r8]
 8008bd4:	5162      	str	r2, [r4, r5]
 8008bd6:	604b      	str	r3, [r1, #4]
 8008bd8:	4638      	mov	r0, r7
 8008bda:	f104 060b 	add.w	r6, r4, #11
 8008bde:	f000 f829 	bl	8008c34 <__malloc_unlock>
 8008be2:	f026 0607 	bic.w	r6, r6, #7
 8008be6:	1d23      	adds	r3, r4, #4
 8008be8:	1af2      	subs	r2, r6, r3
 8008bea:	d0ae      	beq.n	8008b4a <_malloc_r+0x22>
 8008bec:	1b9b      	subs	r3, r3, r6
 8008bee:	50a3      	str	r3, [r4, r2]
 8008bf0:	e7ab      	b.n	8008b4a <_malloc_r+0x22>
 8008bf2:	42a3      	cmp	r3, r4
 8008bf4:	6862      	ldr	r2, [r4, #4]
 8008bf6:	d1dd      	bne.n	8008bb4 <_malloc_r+0x8c>
 8008bf8:	f8c8 2000 	str.w	r2, [r8]
 8008bfc:	e7ec      	b.n	8008bd8 <_malloc_r+0xb0>
 8008bfe:	4623      	mov	r3, r4
 8008c00:	6864      	ldr	r4, [r4, #4]
 8008c02:	e7ac      	b.n	8008b5e <_malloc_r+0x36>
 8008c04:	4634      	mov	r4, r6
 8008c06:	6876      	ldr	r6, [r6, #4]
 8008c08:	e7b4      	b.n	8008b74 <_malloc_r+0x4c>
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	e7cc      	b.n	8008ba8 <_malloc_r+0x80>
 8008c0e:	230c      	movs	r3, #12
 8008c10:	603b      	str	r3, [r7, #0]
 8008c12:	4638      	mov	r0, r7
 8008c14:	f000 f80e 	bl	8008c34 <__malloc_unlock>
 8008c18:	e797      	b.n	8008b4a <_malloc_r+0x22>
 8008c1a:	6025      	str	r5, [r4, #0]
 8008c1c:	e7dc      	b.n	8008bd8 <_malloc_r+0xb0>
 8008c1e:	605b      	str	r3, [r3, #4]
 8008c20:	deff      	udf	#255	; 0xff
 8008c22:	bf00      	nop
 8008c24:	20002520 	.word	0x20002520

08008c28 <__malloc_lock>:
 8008c28:	4801      	ldr	r0, [pc, #4]	; (8008c30 <__malloc_lock+0x8>)
 8008c2a:	f7ff bf03 	b.w	8008a34 <__retarget_lock_acquire_recursive>
 8008c2e:	bf00      	nop
 8008c30:	2000251c 	.word	0x2000251c

08008c34 <__malloc_unlock>:
 8008c34:	4801      	ldr	r0, [pc, #4]	; (8008c3c <__malloc_unlock+0x8>)
 8008c36:	f7ff befe 	b.w	8008a36 <__retarget_lock_release_recursive>
 8008c3a:	bf00      	nop
 8008c3c:	2000251c 	.word	0x2000251c

08008c40 <_malloc_usable_size_r>:
 8008c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c44:	1f18      	subs	r0, r3, #4
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	bfbc      	itt	lt
 8008c4a:	580b      	ldrlt	r3, [r1, r0]
 8008c4c:	18c0      	addlt	r0, r0, r3
 8008c4e:	4770      	bx	lr

08008c50 <_sbrk_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4d06      	ldr	r5, [pc, #24]	; (8008c6c <_sbrk_r+0x1c>)
 8008c54:	2300      	movs	r3, #0
 8008c56:	4604      	mov	r4, r0
 8008c58:	4608      	mov	r0, r1
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	f7fd f87c 	bl	8005d58 <_sbrk>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d102      	bne.n	8008c6a <_sbrk_r+0x1a>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	b103      	cbz	r3, 8008c6a <_sbrk_r+0x1a>
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	20002518 	.word	0x20002518

08008c70 <_init>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	bf00      	nop
 8008c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c76:	bc08      	pop	{r3}
 8008c78:	469e      	mov	lr, r3
 8008c7a:	4770      	bx	lr

08008c7c <_fini>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	bf00      	nop
 8008c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c82:	bc08      	pop	{r3}
 8008c84:	469e      	mov	lr, r3
 8008c86:	4770      	bx	lr
